// Code generated by cdpgen. DO NOT EDIT.

package storage

import (
	"encoding/json"
	"log"
)

const CommandStorageClearDataForOrigin = "Storage.clearDataForOrigin"

// ClearDataForOriginArgs represents the arguments for ClearDataForOrigin in the Storage domain.
type ClearDataForOriginArgs struct {
	Origin       string `json:"origin"`       // Security origin.
	StorageTypes string `json:"storageTypes"` // Comma separated origin names.
}

// Unmarshal the byte array into a return value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearDataForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearDataForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearDataForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearDataForOriginReply represents the return values for ClearDataForOrigin in the Storage domain.
type ClearDataForOriginReply struct {
}

// ClearDataForOriginReply returns whether or not the FrameID matches the reply value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ClearDataForOriginReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy ClearDataForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearDataForOriginReply(*c)
	return nil
}

const CommandStorageGetUsageAndQuota = "Storage.getUsageAndQuota"

// GetUsageAndQuotaArgs represents the arguments for GetUsageAndQuota in the Storage domain.
type GetUsageAndQuotaArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaArgs) UnmarshalJSON(b []byte) error {
	type Copy GetUsageAndQuotaArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetUsageAndQuotaArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaArgs) MarshalJSON() ([]byte, error) {
	type Copy GetUsageAndQuotaArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetUsageAndQuotaReply represents the return values for GetUsageAndQuota in the Storage domain.
type GetUsageAndQuotaReply struct {
	Usage          float64        `json:"usage"`          // Storage usage (bytes).
	Quota          float64        `json:"quota"`          // Storage quota (bytes).
	UsageBreakdown []UsageForType `json:"usageBreakdown"` // Storage usage per type (bytes).
}

// GetUsageAndQuotaReply returns whether or not the FrameID matches the reply value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: GetUsageAndQuotaReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaReply) UnmarshalJSON(b []byte) error {
	type Copy GetUsageAndQuotaReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetUsageAndQuotaReply(*c)
	return nil
}

const CommandStorageTrackCacheStorageForOrigin = "Storage.trackCacheStorageForOrigin"

// TrackCacheStorageForOriginArgs represents the arguments for TrackCacheStorageForOrigin in the Storage domain.
type TrackCacheStorageForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy TrackCacheStorageForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TrackCacheStorageForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy TrackCacheStorageForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// TrackCacheStorageForOriginReply represents the return values for TrackCacheStorageForOrigin in the Storage domain.
type TrackCacheStorageForOriginReply struct {
}

// TrackCacheStorageForOriginReply returns whether or not the FrameID matches the reply value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: TrackCacheStorageForOriginReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy TrackCacheStorageForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TrackCacheStorageForOriginReply(*c)
	return nil
}

const CommandStorageTrackIndexedDBForOrigin = "Storage.trackIndexedDBForOrigin"

// TrackIndexedDBForOriginArgs represents the arguments for TrackIndexedDBForOrigin in the Storage domain.
type TrackIndexedDBForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy TrackIndexedDBForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TrackIndexedDBForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy TrackIndexedDBForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// TrackIndexedDBForOriginReply represents the return values for TrackIndexedDBForOrigin in the Storage domain.
type TrackIndexedDBForOriginReply struct {
}

// TrackIndexedDBForOriginReply returns whether or not the FrameID matches the reply value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: TrackIndexedDBForOriginReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy TrackIndexedDBForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TrackIndexedDBForOriginReply(*c)
	return nil
}

const CommandStorageUntrackCacheStorageForOrigin = "Storage.untrackCacheStorageForOrigin"

// UntrackCacheStorageForOriginArgs represents the arguments for UntrackCacheStorageForOrigin in the Storage domain.
type UntrackCacheStorageForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy UntrackCacheStorageForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UntrackCacheStorageForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy UntrackCacheStorageForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// UntrackCacheStorageForOriginReply represents the return values for UntrackCacheStorageForOrigin in the Storage domain.
type UntrackCacheStorageForOriginReply struct {
}

// UntrackCacheStorageForOriginReply returns whether or not the FrameID matches the reply value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: UntrackCacheStorageForOriginReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy UntrackCacheStorageForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UntrackCacheStorageForOriginReply(*c)
	return nil
}

const CommandStorageUntrackIndexedDBForOrigin = "Storage.untrackIndexedDBForOrigin"

// UntrackIndexedDBForOriginArgs represents the arguments for UntrackIndexedDBForOrigin in the Storage domain.
type UntrackIndexedDBForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy UntrackIndexedDBForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UntrackIndexedDBForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy UntrackIndexedDBForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// UntrackIndexedDBForOriginReply represents the return values for UntrackIndexedDBForOrigin in the Storage domain.
type UntrackIndexedDBForOriginReply struct {
}

// UntrackIndexedDBForOriginReply returns whether or not the FrameID matches the reply value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: UntrackIndexedDBForOriginReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy UntrackIndexedDBForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UntrackIndexedDBForOriginReply(*c)
	return nil
}
