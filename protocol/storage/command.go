// Code generated by cdpgen. DO NOT EDIT.

package storage

import (
	"encoding/json"
	"log"

	shared "github.com/4ydx/cdp/protocol"
	"github.com/4ydx/cdp/protocol/network"
)

const (
	CommandStorageClearDataForOrigin           = "Storage.clearDataForOrigin"
	CommandStorageGetCookies                   = "Storage.getCookies"
	CommandStorageSetCookies                   = "Storage.setCookies"
	CommandStorageClearCookies                 = "Storage.clearCookies"
	CommandStorageGetUsageAndQuota             = "Storage.getUsageAndQuota"
	CommandStorageTrackCacheStorageForOrigin   = "Storage.trackCacheStorageForOrigin"
	CommandStorageTrackIndexedDBForOrigin      = "Storage.trackIndexedDBForOrigin"
	CommandStorageUntrackCacheStorageForOrigin = "Storage.untrackCacheStorageForOrigin"
	CommandStorageUntrackIndexedDBForOrigin    = "Storage.untrackIndexedDBForOrigin"
)

// ClearDataForOriginArgs represents the arguments for ClearDataForOrigin in the Storage domain.
type ClearDataForOriginArgs struct {
	Origin       string `json:"origin"`       // Security origin.
	StorageTypes string `json:"storageTypes"` // Comma separated list of StorageType to clear.
}

// Unmarshal the byte array into a return value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearDataForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearDataForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearDataForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearDataForOriginReply represents the return values for ClearDataForOrigin in the Storage domain.
type ClearDataForOriginReply struct {
}

// ClearDataForOriginReply returns whether or not the FrameID matches the reply value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ClearDataForOriginReply %s", err)
		return false, err
	}
	return true, nil
}

// ClearDataForOriginReply returns the FrameID value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for ClearDataForOrigin in the Storage domain.
func (a *ClearDataForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy ClearDataForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearDataForOriginReply(*c)
	return nil
}

// GetCookiesArgs represents the arguments for GetCookies in the Storage domain.
type GetCookiesArgs struct {
	BrowserContextID shared.ContextID `json:"browserContextId,omitempty"` // Browser context to use when called on the browser endpoint.
}

// Unmarshal the byte array into a return value for GetCookies in the Storage domain.
func (a *GetCookiesArgs) UnmarshalJSON(b []byte) error {
	type Copy GetCookiesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetCookiesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetCookies in the Storage domain.
func (a *GetCookiesArgs) MarshalJSON() ([]byte, error) {
	type Copy GetCookiesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetCookiesReply represents the return values for GetCookies in the Storage domain.
type GetCookiesReply struct {
	Cookies []network.Cookie `json:"cookies"` // Array of cookie objects.
}

// GetCookiesReply returns whether or not the FrameID matches the reply value for GetCookies in the Storage domain.
func (a *GetCookiesReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetCookiesReply %s", err)
		return false, err
	}
	return true, nil
}

// GetCookiesReply returns the FrameID value for GetCookies in the Storage domain.
func (a *GetCookiesReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetCookies in the Storage domain.
func (a *GetCookiesReply) UnmarshalJSON(b []byte) error {
	type Copy GetCookiesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetCookiesReply(*c)
	return nil
}

// SetCookiesArgs represents the arguments for SetCookies in the Storage domain.
type SetCookiesArgs struct {
	Cookies          []network.CookieParam `json:"cookies"`                    // Cookies to be set.
	BrowserContextID shared.ContextID      `json:"browserContextId,omitempty"` // Browser context to use when called on the browser endpoint.
}

// Unmarshal the byte array into a return value for SetCookies in the Storage domain.
func (a *SetCookiesArgs) UnmarshalJSON(b []byte) error {
	type Copy SetCookiesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetCookiesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetCookies in the Storage domain.
func (a *SetCookiesArgs) MarshalJSON() ([]byte, error) {
	type Copy SetCookiesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetCookiesReply represents the return values for SetCookies in the Storage domain.
type SetCookiesReply struct {
}

// SetCookiesReply returns whether or not the FrameID matches the reply value for SetCookies in the Storage domain.
func (a *SetCookiesReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetCookiesReply %s", err)
		return false, err
	}
	return true, nil
}

// SetCookiesReply returns the FrameID value for SetCookies in the Storage domain.
func (a *SetCookiesReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetCookies in the Storage domain.
func (a *SetCookiesReply) UnmarshalJSON(b []byte) error {
	type Copy SetCookiesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetCookiesReply(*c)
	return nil
}

// ClearCookiesArgs represents the arguments for ClearCookies in the Storage domain.
type ClearCookiesArgs struct {
	BrowserContextID shared.ContextID `json:"browserContextId,omitempty"` // Browser context to use when called on the browser endpoint.
}

// Unmarshal the byte array into a return value for ClearCookies in the Storage domain.
func (a *ClearCookiesArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearCookiesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearCookiesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ClearCookies in the Storage domain.
func (a *ClearCookiesArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearCookiesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearCookiesReply represents the return values for ClearCookies in the Storage domain.
type ClearCookiesReply struct {
}

// ClearCookiesReply returns whether or not the FrameID matches the reply value for ClearCookies in the Storage domain.
func (a *ClearCookiesReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ClearCookiesReply %s", err)
		return false, err
	}
	return true, nil
}

// ClearCookiesReply returns the FrameID value for ClearCookies in the Storage domain.
func (a *ClearCookiesReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for ClearCookies in the Storage domain.
func (a *ClearCookiesReply) UnmarshalJSON(b []byte) error {
	type Copy ClearCookiesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearCookiesReply(*c)
	return nil
}

// GetUsageAndQuotaArgs represents the arguments for GetUsageAndQuota in the Storage domain.
type GetUsageAndQuotaArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaArgs) UnmarshalJSON(b []byte) error {
	type Copy GetUsageAndQuotaArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetUsageAndQuotaArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaArgs) MarshalJSON() ([]byte, error) {
	type Copy GetUsageAndQuotaArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetUsageAndQuotaReply represents the return values for GetUsageAndQuota in the Storage domain.
type GetUsageAndQuotaReply struct {
	Usage          float64        `json:"usage"`          // Storage usage (bytes).
	Quota          float64        `json:"quota"`          // Storage quota (bytes).
	UsageBreakdown []UsageForType `json:"usageBreakdown"` // Storage usage per type (bytes).
}

// GetUsageAndQuotaReply returns whether or not the FrameID matches the reply value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetUsageAndQuotaReply %s", err)
		return false, err
	}
	return true, nil
}

// GetUsageAndQuotaReply returns the FrameID value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetUsageAndQuota in the Storage domain.
func (a *GetUsageAndQuotaReply) UnmarshalJSON(b []byte) error {
	type Copy GetUsageAndQuotaReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetUsageAndQuotaReply(*c)
	return nil
}

// TrackCacheStorageForOriginArgs represents the arguments for TrackCacheStorageForOrigin in the Storage domain.
type TrackCacheStorageForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy TrackCacheStorageForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TrackCacheStorageForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy TrackCacheStorageForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// TrackCacheStorageForOriginReply represents the return values for TrackCacheStorageForOrigin in the Storage domain.
type TrackCacheStorageForOriginReply struct {
}

// TrackCacheStorageForOriginReply returns whether or not the FrameID matches the reply value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: TrackCacheStorageForOriginReply %s", err)
		return false, err
	}
	return true, nil
}

// TrackCacheStorageForOriginReply returns the FrameID value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for TrackCacheStorageForOrigin in the Storage domain.
func (a *TrackCacheStorageForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy TrackCacheStorageForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TrackCacheStorageForOriginReply(*c)
	return nil
}

// TrackIndexedDBForOriginArgs represents the arguments for TrackIndexedDBForOrigin in the Storage domain.
type TrackIndexedDBForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy TrackIndexedDBForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TrackIndexedDBForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy TrackIndexedDBForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// TrackIndexedDBForOriginReply represents the return values for TrackIndexedDBForOrigin in the Storage domain.
type TrackIndexedDBForOriginReply struct {
}

// TrackIndexedDBForOriginReply returns whether or not the FrameID matches the reply value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: TrackIndexedDBForOriginReply %s", err)
		return false, err
	}
	return true, nil
}

// TrackIndexedDBForOriginReply returns the FrameID value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for TrackIndexedDBForOrigin in the Storage domain.
func (a *TrackIndexedDBForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy TrackIndexedDBForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TrackIndexedDBForOriginReply(*c)
	return nil
}

// UntrackCacheStorageForOriginArgs represents the arguments for UntrackCacheStorageForOrigin in the Storage domain.
type UntrackCacheStorageForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy UntrackCacheStorageForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UntrackCacheStorageForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy UntrackCacheStorageForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// UntrackCacheStorageForOriginReply represents the return values for UntrackCacheStorageForOrigin in the Storage domain.
type UntrackCacheStorageForOriginReply struct {
}

// UntrackCacheStorageForOriginReply returns whether or not the FrameID matches the reply value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: UntrackCacheStorageForOriginReply %s", err)
		return false, err
	}
	return true, nil
}

// UntrackCacheStorageForOriginReply returns the FrameID value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for UntrackCacheStorageForOrigin in the Storage domain.
func (a *UntrackCacheStorageForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy UntrackCacheStorageForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UntrackCacheStorageForOriginReply(*c)
	return nil
}

// UntrackIndexedDBForOriginArgs represents the arguments for UntrackIndexedDBForOrigin in the Storage domain.
type UntrackIndexedDBForOriginArgs struct {
	Origin string `json:"origin"` // Security origin.
}

// Unmarshal the byte array into a return value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginArgs) UnmarshalJSON(b []byte) error {
	type Copy UntrackIndexedDBForOriginArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UntrackIndexedDBForOriginArgs(*c)
	return nil
}

// Marshall the byte array into a return value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginArgs) MarshalJSON() ([]byte, error) {
	type Copy UntrackIndexedDBForOriginArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// UntrackIndexedDBForOriginReply represents the return values for UntrackIndexedDBForOrigin in the Storage domain.
type UntrackIndexedDBForOriginReply struct {
}

// UntrackIndexedDBForOriginReply returns whether or not the FrameID matches the reply value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: UntrackIndexedDBForOriginReply %s", err)
		return false, err
	}
	return true, nil
}

// UntrackIndexedDBForOriginReply returns the FrameID value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for UntrackIndexedDBForOrigin in the Storage domain.
func (a *UntrackIndexedDBForOriginReply) UnmarshalJSON(b []byte) error {
	type Copy UntrackIndexedDBForOriginReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UntrackIndexedDBForOriginReply(*c)
	return nil
}
