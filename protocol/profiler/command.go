// Code generated by cdpgen. DO NOT EDIT.

package profiler

import (
	"encoding/json"
	"log"
)

const (
	CommandProfilerDisable                 = "Profiler.disable"
	CommandProfilerEnable                  = "Profiler.enable"
	CommandProfilerGetBestEffortCoverage   = "Profiler.getBestEffortCoverage"
	CommandProfilerSetSamplingInterval     = "Profiler.setSamplingInterval"
	CommandProfilerStart                   = "Profiler.start"
	CommandProfilerStartPreciseCoverage    = "Profiler.startPreciseCoverage"
	CommandProfilerStartTypeProfile        = "Profiler.startTypeProfile"
	CommandProfilerStop                    = "Profiler.stop"
	CommandProfilerStopPreciseCoverage     = "Profiler.stopPreciseCoverage"
	CommandProfilerStopTypeProfile         = "Profiler.stopTypeProfile"
	CommandProfilerTakePreciseCoverage     = "Profiler.takePreciseCoverage"
	CommandProfilerTakeTypeProfile         = "Profiler.takeTypeProfile"
	CommandProfilerEnableRuntimeCallStats  = "Profiler.enableRuntimeCallStats"
	CommandProfilerDisableRuntimeCallStats = "Profiler.disableRuntimeCallStats"
	CommandProfilerGetRuntimeCallStats     = "Profiler.getRuntimeCallStats"
)

// DisableArgs represents the arguments for Disable in the Profiler domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the Profiler domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the Profiler domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the Profiler domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the Profiler domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: DisableReply %s", err)
		return false, err
	}
	return true, nil
}

// DisableReply returns the FrameID value for Disable in the Profiler domain.
func (a *DisableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Disable in the Profiler domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// EnableArgs represents the arguments for Enable in the Profiler domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the Profiler domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the Profiler domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the Profiler domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the Profiler domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: EnableReply %s", err)
		return false, err
	}
	return true, nil
}

// EnableReply returns the FrameID value for Enable in the Profiler domain.
func (a *EnableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Enable in the Profiler domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// GetBestEffortCoverageArgs represents the arguments for GetBestEffortCoverage in the Profiler domain.
type GetBestEffortCoverageArgs struct {
}

// Unmarshal the byte array into a return value for GetBestEffortCoverage in the Profiler domain.
func (a *GetBestEffortCoverageArgs) UnmarshalJSON(b []byte) error {
	type Copy GetBestEffortCoverageArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetBestEffortCoverageArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetBestEffortCoverage in the Profiler domain.
func (a *GetBestEffortCoverageArgs) MarshalJSON() ([]byte, error) {
	type Copy GetBestEffortCoverageArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetBestEffortCoverageReply represents the return values for GetBestEffortCoverage in the Profiler domain.
type GetBestEffortCoverageReply struct {
	Result []ScriptCoverage `json:"result"` // Coverage data for the current isolate.
}

// GetBestEffortCoverageReply returns whether or not the FrameID matches the reply value for GetBestEffortCoverage in the Profiler domain.
func (a *GetBestEffortCoverageReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetBestEffortCoverageReply %s", err)
		return false, err
	}
	return true, nil
}

// GetBestEffortCoverageReply returns the FrameID value for GetBestEffortCoverage in the Profiler domain.
func (a *GetBestEffortCoverageReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetBestEffortCoverage in the Profiler domain.
func (a *GetBestEffortCoverageReply) UnmarshalJSON(b []byte) error {
	type Copy GetBestEffortCoverageReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetBestEffortCoverageReply(*c)
	return nil
}

// SetSamplingIntervalArgs represents the arguments for SetSamplingInterval in the Profiler domain.
type SetSamplingIntervalArgs struct {
	Interval int `json:"interval"` // New sampling interval in microseconds.
}

// Unmarshal the byte array into a return value for SetSamplingInterval in the Profiler domain.
func (a *SetSamplingIntervalArgs) UnmarshalJSON(b []byte) error {
	type Copy SetSamplingIntervalArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetSamplingIntervalArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetSamplingInterval in the Profiler domain.
func (a *SetSamplingIntervalArgs) MarshalJSON() ([]byte, error) {
	type Copy SetSamplingIntervalArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetSamplingIntervalReply represents the return values for SetSamplingInterval in the Profiler domain.
type SetSamplingIntervalReply struct {
}

// SetSamplingIntervalReply returns whether or not the FrameID matches the reply value for SetSamplingInterval in the Profiler domain.
func (a *SetSamplingIntervalReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetSamplingIntervalReply %s", err)
		return false, err
	}
	return true, nil
}

// SetSamplingIntervalReply returns the FrameID value for SetSamplingInterval in the Profiler domain.
func (a *SetSamplingIntervalReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetSamplingInterval in the Profiler domain.
func (a *SetSamplingIntervalReply) UnmarshalJSON(b []byte) error {
	type Copy SetSamplingIntervalReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetSamplingIntervalReply(*c)
	return nil
}

// StartArgs represents the arguments for Start in the Profiler domain.
type StartArgs struct {
}

// Unmarshal the byte array into a return value for Start in the Profiler domain.
func (a *StartArgs) UnmarshalJSON(b []byte) error {
	type Copy StartArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Start in the Profiler domain.
func (a *StartArgs) MarshalJSON() ([]byte, error) {
	type Copy StartArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartReply represents the return values for Start in the Profiler domain.
type StartReply struct {
}

// StartReply returns whether or not the FrameID matches the reply value for Start in the Profiler domain.
func (a *StartReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StartReply %s", err)
		return false, err
	}
	return true, nil
}

// StartReply returns the FrameID value for Start in the Profiler domain.
func (a *StartReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Start in the Profiler domain.
func (a *StartReply) UnmarshalJSON(b []byte) error {
	type Copy StartReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartReply(*c)
	return nil
}

// StartPreciseCoverageArgs represents the arguments for StartPreciseCoverage in the Profiler domain.
type StartPreciseCoverageArgs struct {
	CallCount             bool `json:"callCount,omitempty"`             // Collect accurate call counts beyond simple 'covered' or 'not covered'.
	Detailed              bool `json:"detailed,omitempty"`              // Collect block-based coverage.
	AllowTriggeredUpdates bool `json:"allowTriggeredUpdates,omitempty"` // Allow the backend to send updates on its own initiative
}

// Unmarshal the byte array into a return value for StartPreciseCoverage in the Profiler domain.
func (a *StartPreciseCoverageArgs) UnmarshalJSON(b []byte) error {
	type Copy StartPreciseCoverageArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartPreciseCoverageArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartPreciseCoverage in the Profiler domain.
func (a *StartPreciseCoverageArgs) MarshalJSON() ([]byte, error) {
	type Copy StartPreciseCoverageArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartPreciseCoverageReply represents the return values for StartPreciseCoverage in the Profiler domain.
type StartPreciseCoverageReply struct {
	Timestamp float64 `json:"timestamp"` // Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
}

// StartPreciseCoverageReply returns whether or not the FrameID matches the reply value for StartPreciseCoverage in the Profiler domain.
func (a *StartPreciseCoverageReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StartPreciseCoverageReply %s", err)
		return false, err
	}
	return true, nil
}

// StartPreciseCoverageReply returns the FrameID value for StartPreciseCoverage in the Profiler domain.
func (a *StartPreciseCoverageReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StartPreciseCoverage in the Profiler domain.
func (a *StartPreciseCoverageReply) UnmarshalJSON(b []byte) error {
	type Copy StartPreciseCoverageReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartPreciseCoverageReply(*c)
	return nil
}

// StartTypeProfileArgs represents the arguments for StartTypeProfile in the Profiler domain.
type StartTypeProfileArgs struct {
}

// Unmarshal the byte array into a return value for StartTypeProfile in the Profiler domain.
func (a *StartTypeProfileArgs) UnmarshalJSON(b []byte) error {
	type Copy StartTypeProfileArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartTypeProfileArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartTypeProfile in the Profiler domain.
func (a *StartTypeProfileArgs) MarshalJSON() ([]byte, error) {
	type Copy StartTypeProfileArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartTypeProfileReply represents the return values for StartTypeProfile in the Profiler domain.
type StartTypeProfileReply struct {
}

// StartTypeProfileReply returns whether or not the FrameID matches the reply value for StartTypeProfile in the Profiler domain.
func (a *StartTypeProfileReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StartTypeProfileReply %s", err)
		return false, err
	}
	return true, nil
}

// StartTypeProfileReply returns the FrameID value for StartTypeProfile in the Profiler domain.
func (a *StartTypeProfileReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StartTypeProfile in the Profiler domain.
func (a *StartTypeProfileReply) UnmarshalJSON(b []byte) error {
	type Copy StartTypeProfileReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartTypeProfileReply(*c)
	return nil
}

// StopArgs represents the arguments for Stop in the Profiler domain.
type StopArgs struct {
}

// Unmarshal the byte array into a return value for Stop in the Profiler domain.
func (a *StopArgs) UnmarshalJSON(b []byte) error {
	type Copy StopArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Stop in the Profiler domain.
func (a *StopArgs) MarshalJSON() ([]byte, error) {
	type Copy StopArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopReply represents the return values for Stop in the Profiler domain.
type StopReply struct {
	Profile Profile `json:"profile"` // Recorded profile.
}

// StopReply returns whether or not the FrameID matches the reply value for Stop in the Profiler domain.
func (a *StopReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StopReply %s", err)
		return false, err
	}
	return true, nil
}

// StopReply returns the FrameID value for Stop in the Profiler domain.
func (a *StopReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Stop in the Profiler domain.
func (a *StopReply) UnmarshalJSON(b []byte) error {
	type Copy StopReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopReply(*c)
	return nil
}

// StopPreciseCoverageArgs represents the arguments for StopPreciseCoverage in the Profiler domain.
type StopPreciseCoverageArgs struct {
}

// Unmarshal the byte array into a return value for StopPreciseCoverage in the Profiler domain.
func (a *StopPreciseCoverageArgs) UnmarshalJSON(b []byte) error {
	type Copy StopPreciseCoverageArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopPreciseCoverageArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopPreciseCoverage in the Profiler domain.
func (a *StopPreciseCoverageArgs) MarshalJSON() ([]byte, error) {
	type Copy StopPreciseCoverageArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopPreciseCoverageReply represents the return values for StopPreciseCoverage in the Profiler domain.
type StopPreciseCoverageReply struct {
}

// StopPreciseCoverageReply returns whether or not the FrameID matches the reply value for StopPreciseCoverage in the Profiler domain.
func (a *StopPreciseCoverageReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StopPreciseCoverageReply %s", err)
		return false, err
	}
	return true, nil
}

// StopPreciseCoverageReply returns the FrameID value for StopPreciseCoverage in the Profiler domain.
func (a *StopPreciseCoverageReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StopPreciseCoverage in the Profiler domain.
func (a *StopPreciseCoverageReply) UnmarshalJSON(b []byte) error {
	type Copy StopPreciseCoverageReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopPreciseCoverageReply(*c)
	return nil
}

// StopTypeProfileArgs represents the arguments for StopTypeProfile in the Profiler domain.
type StopTypeProfileArgs struct {
}

// Unmarshal the byte array into a return value for StopTypeProfile in the Profiler domain.
func (a *StopTypeProfileArgs) UnmarshalJSON(b []byte) error {
	type Copy StopTypeProfileArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopTypeProfileArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopTypeProfile in the Profiler domain.
func (a *StopTypeProfileArgs) MarshalJSON() ([]byte, error) {
	type Copy StopTypeProfileArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopTypeProfileReply represents the return values for StopTypeProfile in the Profiler domain.
type StopTypeProfileReply struct {
}

// StopTypeProfileReply returns whether or not the FrameID matches the reply value for StopTypeProfile in the Profiler domain.
func (a *StopTypeProfileReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StopTypeProfileReply %s", err)
		return false, err
	}
	return true, nil
}

// StopTypeProfileReply returns the FrameID value for StopTypeProfile in the Profiler domain.
func (a *StopTypeProfileReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StopTypeProfile in the Profiler domain.
func (a *StopTypeProfileReply) UnmarshalJSON(b []byte) error {
	type Copy StopTypeProfileReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopTypeProfileReply(*c)
	return nil
}

// TakePreciseCoverageArgs represents the arguments for TakePreciseCoverage in the Profiler domain.
type TakePreciseCoverageArgs struct {
}

// Unmarshal the byte array into a return value for TakePreciseCoverage in the Profiler domain.
func (a *TakePreciseCoverageArgs) UnmarshalJSON(b []byte) error {
	type Copy TakePreciseCoverageArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TakePreciseCoverageArgs(*c)
	return nil
}

// Marshall the byte array into a return value for TakePreciseCoverage in the Profiler domain.
func (a *TakePreciseCoverageArgs) MarshalJSON() ([]byte, error) {
	type Copy TakePreciseCoverageArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// TakePreciseCoverageReply represents the return values for TakePreciseCoverage in the Profiler domain.
type TakePreciseCoverageReply struct {
	Result    []ScriptCoverage `json:"result"`    // Coverage data for the current isolate.
	Timestamp float64          `json:"timestamp"` // Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
}

// TakePreciseCoverageReply returns whether or not the FrameID matches the reply value for TakePreciseCoverage in the Profiler domain.
func (a *TakePreciseCoverageReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: TakePreciseCoverageReply %s", err)
		return false, err
	}
	return true, nil
}

// TakePreciseCoverageReply returns the FrameID value for TakePreciseCoverage in the Profiler domain.
func (a *TakePreciseCoverageReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for TakePreciseCoverage in the Profiler domain.
func (a *TakePreciseCoverageReply) UnmarshalJSON(b []byte) error {
	type Copy TakePreciseCoverageReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TakePreciseCoverageReply(*c)
	return nil
}

// TakeTypeProfileArgs represents the arguments for TakeTypeProfile in the Profiler domain.
type TakeTypeProfileArgs struct {
}

// Unmarshal the byte array into a return value for TakeTypeProfile in the Profiler domain.
func (a *TakeTypeProfileArgs) UnmarshalJSON(b []byte) error {
	type Copy TakeTypeProfileArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TakeTypeProfileArgs(*c)
	return nil
}

// Marshall the byte array into a return value for TakeTypeProfile in the Profiler domain.
func (a *TakeTypeProfileArgs) MarshalJSON() ([]byte, error) {
	type Copy TakeTypeProfileArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// TakeTypeProfileReply represents the return values for TakeTypeProfile in the Profiler domain.
type TakeTypeProfileReply struct {
	Result []ScriptTypeProfile `json:"result"` // Type profile for all scripts since startTypeProfile() was turned on.
}

// TakeTypeProfileReply returns whether or not the FrameID matches the reply value for TakeTypeProfile in the Profiler domain.
func (a *TakeTypeProfileReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: TakeTypeProfileReply %s", err)
		return false, err
	}
	return true, nil
}

// TakeTypeProfileReply returns the FrameID value for TakeTypeProfile in the Profiler domain.
func (a *TakeTypeProfileReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for TakeTypeProfile in the Profiler domain.
func (a *TakeTypeProfileReply) UnmarshalJSON(b []byte) error {
	type Copy TakeTypeProfileReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TakeTypeProfileReply(*c)
	return nil
}

// EnableRuntimeCallStatsArgs represents the arguments for EnableRuntimeCallStats in the Profiler domain.
type EnableRuntimeCallStatsArgs struct {
}

// Unmarshal the byte array into a return value for EnableRuntimeCallStats in the Profiler domain.
func (a *EnableRuntimeCallStatsArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableRuntimeCallStatsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableRuntimeCallStatsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for EnableRuntimeCallStats in the Profiler domain.
func (a *EnableRuntimeCallStatsArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableRuntimeCallStatsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableRuntimeCallStatsReply represents the return values for EnableRuntimeCallStats in the Profiler domain.
type EnableRuntimeCallStatsReply struct {
}

// EnableRuntimeCallStatsReply returns whether or not the FrameID matches the reply value for EnableRuntimeCallStats in the Profiler domain.
func (a *EnableRuntimeCallStatsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: EnableRuntimeCallStatsReply %s", err)
		return false, err
	}
	return true, nil
}

// EnableRuntimeCallStatsReply returns the FrameID value for EnableRuntimeCallStats in the Profiler domain.
func (a *EnableRuntimeCallStatsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for EnableRuntimeCallStats in the Profiler domain.
func (a *EnableRuntimeCallStatsReply) UnmarshalJSON(b []byte) error {
	type Copy EnableRuntimeCallStatsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableRuntimeCallStatsReply(*c)
	return nil
}

// DisableRuntimeCallStatsArgs represents the arguments for DisableRuntimeCallStats in the Profiler domain.
type DisableRuntimeCallStatsArgs struct {
}

// Unmarshal the byte array into a return value for DisableRuntimeCallStats in the Profiler domain.
func (a *DisableRuntimeCallStatsArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableRuntimeCallStatsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableRuntimeCallStatsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for DisableRuntimeCallStats in the Profiler domain.
func (a *DisableRuntimeCallStatsArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableRuntimeCallStatsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableRuntimeCallStatsReply represents the return values for DisableRuntimeCallStats in the Profiler domain.
type DisableRuntimeCallStatsReply struct {
}

// DisableRuntimeCallStatsReply returns whether or not the FrameID matches the reply value for DisableRuntimeCallStats in the Profiler domain.
func (a *DisableRuntimeCallStatsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: DisableRuntimeCallStatsReply %s", err)
		return false, err
	}
	return true, nil
}

// DisableRuntimeCallStatsReply returns the FrameID value for DisableRuntimeCallStats in the Profiler domain.
func (a *DisableRuntimeCallStatsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for DisableRuntimeCallStats in the Profiler domain.
func (a *DisableRuntimeCallStatsReply) UnmarshalJSON(b []byte) error {
	type Copy DisableRuntimeCallStatsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableRuntimeCallStatsReply(*c)
	return nil
}

// GetRuntimeCallStatsArgs represents the arguments for GetRuntimeCallStats in the Profiler domain.
type GetRuntimeCallStatsArgs struct {
}

// Unmarshal the byte array into a return value for GetRuntimeCallStats in the Profiler domain.
func (a *GetRuntimeCallStatsArgs) UnmarshalJSON(b []byte) error {
	type Copy GetRuntimeCallStatsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetRuntimeCallStatsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetRuntimeCallStats in the Profiler domain.
func (a *GetRuntimeCallStatsArgs) MarshalJSON() ([]byte, error) {
	type Copy GetRuntimeCallStatsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetRuntimeCallStatsReply represents the return values for GetRuntimeCallStats in the Profiler domain.
type GetRuntimeCallStatsReply struct {
	Result []CounterInfo `json:"result"` // Collected counter information.
}

// GetRuntimeCallStatsReply returns whether or not the FrameID matches the reply value for GetRuntimeCallStats in the Profiler domain.
func (a *GetRuntimeCallStatsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetRuntimeCallStatsReply %s", err)
		return false, err
	}
	return true, nil
}

// GetRuntimeCallStatsReply returns the FrameID value for GetRuntimeCallStats in the Profiler domain.
func (a *GetRuntimeCallStatsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetRuntimeCallStats in the Profiler domain.
func (a *GetRuntimeCallStatsReply) UnmarshalJSON(b []byte) error {
	type Copy GetRuntimeCallStatsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetRuntimeCallStatsReply(*c)
	return nil
}
