// Code generated by cdpgen. DO NOT EDIT.

package profiler

import (
	"encoding/json"
	"log"

	"github.com/4ydx/cdp/protocol/debugger"
)

const (
	EventProfilerConsoleProfileFinished     = "Profiler.consoleProfileFinished"
	EventProfilerConsoleProfileStarted      = "Profiler.consoleProfileStarted"
	EventProfilerPreciseCoverageDeltaUpdate = "Profiler.preciseCoverageDeltaUpdate"
)

type Unmarshaler func() json.Unmarshaler

var EventConstants = map[string]Unmarshaler{
	EventProfilerConsoleProfileFinished:     func() json.Unmarshaler { return &ConsoleProfileFinishedReply{} },
	EventProfilerConsoleProfileStarted:      func() json.Unmarshaler { return &ConsoleProfileStartedReply{} },
	EventProfilerPreciseCoverageDeltaUpdate: func() json.Unmarshaler { return &PreciseCoverageDeltaUpdateReply{} },
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	if ok {
		return e(), ok
	}
	return nil, ok
}

// ConsoleProfileFinishedReply is the reply for ConsoleProfileFinished events.
type ConsoleProfileFinishedReply struct {
	ID       string            `json:"id"`              // No description.
	Location debugger.Location `json:"location"`        // Location of console.profileEnd().
	Profile  Profile           `json:"profile"`         // No description.
	Title    string            `json:"title,omitempty"` // Profile title passed as an argument to console.profile().
}

// Unmarshal the byte array into a return value for ConsoleProfileFinished in the Profiler domain.
func (a *ConsoleProfileFinishedReply) UnmarshalJSON(b []byte) error {
	type Copy ConsoleProfileFinishedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ConsoleProfileFinishedReply(*c)
	return nil
}

// ConsoleProfileFinishedReply returns whether or not the FrameID matches the reply value for ConsoleProfileFinished in the Profiler domain.
func (a *ConsoleProfileFinishedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ConsoleProfileFinishedReply %s", err)
		return false, err
	}
	return true, nil
}

// ConsoleProfileFinishedReply returns the FrameID for ConsoleProfileFinished in the Profiler domain.
func (a *ConsoleProfileFinishedReply) GetFrameID() string {
	return ""
}

// ConsoleProfileStartedReply is the reply for ConsoleProfileStarted events.
type ConsoleProfileStartedReply struct {
	ID       string            `json:"id"`              // No description.
	Location debugger.Location `json:"location"`        // Location of console.profile().
	Title    string            `json:"title,omitempty"` // Profile title passed as an argument to console.profile().
}

// Unmarshal the byte array into a return value for ConsoleProfileStarted in the Profiler domain.
func (a *ConsoleProfileStartedReply) UnmarshalJSON(b []byte) error {
	type Copy ConsoleProfileStartedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ConsoleProfileStartedReply(*c)
	return nil
}

// ConsoleProfileStartedReply returns whether or not the FrameID matches the reply value for ConsoleProfileStarted in the Profiler domain.
func (a *ConsoleProfileStartedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ConsoleProfileStartedReply %s", err)
		return false, err
	}
	return true, nil
}

// ConsoleProfileStartedReply returns the FrameID for ConsoleProfileStarted in the Profiler domain.
func (a *ConsoleProfileStartedReply) GetFrameID() string {
	return ""
}

// PreciseCoverageDeltaUpdateReply is the reply for PreciseCoverageDeltaUpdate events.
type PreciseCoverageDeltaUpdateReply struct {
	Timestamp float64          `json:"timestamp"` // Monotonically increasing time (in seconds) when the coverage update was taken in the backend.
	Occassion string           `json:"occassion"` // Identifier for distinguishing coverage events.
	Result    []ScriptCoverage `json:"result"`    // Coverage data for the current isolate.
}

// Unmarshal the byte array into a return value for PreciseCoverageDeltaUpdate in the Profiler domain.
func (a *PreciseCoverageDeltaUpdateReply) UnmarshalJSON(b []byte) error {
	type Copy PreciseCoverageDeltaUpdateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PreciseCoverageDeltaUpdateReply(*c)
	return nil
}

// PreciseCoverageDeltaUpdateReply returns whether or not the FrameID matches the reply value for PreciseCoverageDeltaUpdate in the Profiler domain.
func (a *PreciseCoverageDeltaUpdateReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: PreciseCoverageDeltaUpdateReply %s", err)
		return false, err
	}
	return true, nil
}

// PreciseCoverageDeltaUpdateReply returns the FrameID for PreciseCoverageDeltaUpdate in the Profiler domain.
func (a *PreciseCoverageDeltaUpdateReply) GetFrameID() string {
	return ""
}
