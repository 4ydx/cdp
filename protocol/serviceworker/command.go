// Code generated by cdpgen. DO NOT EDIT.

package serviceworker

import (
	"encoding/json"
	"log"
)

const CommandServiceWorkerDeliverPushMessage = "ServiceWorker.deliverPushMessage"

// DeliverPushMessageArgs represents the arguments for DeliverPushMessage in the ServiceWorker domain.
type DeliverPushMessageArgs struct {
	Origin         string `json:"origin"`         // No description.
	RegistrationID string `json:"registrationId"` // No description.
	Data           string `json:"data"`           // No description.
}

// Unmarshal the byte array into a return value for DeliverPushMessage in the ServiceWorker domain.
func (a *DeliverPushMessageArgs) UnmarshalJSON(b []byte) error {
	type Copy DeliverPushMessageArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DeliverPushMessageArgs(*c)
	return nil
}

// Marshall the byte array into a return value for DeliverPushMessage in the ServiceWorker domain.
func (a *DeliverPushMessageArgs) MarshalJSON() ([]byte, error) {
	type Copy DeliverPushMessageArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DeliverPushMessageReply represents the return values for DeliverPushMessage in the ServiceWorker domain.
type DeliverPushMessageReply struct {
}

// DeliverPushMessageReply returns whether or not the FrameID matches the reply value for DeliverPushMessage in the ServiceWorker domain.
func (a *DeliverPushMessageReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: DeliverPushMessageReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for DeliverPushMessage in the ServiceWorker domain.
func (a *DeliverPushMessageReply) UnmarshalJSON(b []byte) error {
	type Copy DeliverPushMessageReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DeliverPushMessageReply(*c)
	return nil
}

const CommandServiceWorkerDisable = "ServiceWorker.disable"

// DisableArgs represents the arguments for Disable in the ServiceWorker domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the ServiceWorker domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the ServiceWorker domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the ServiceWorker domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the ServiceWorker domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: DisableReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Disable in the ServiceWorker domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

const CommandServiceWorkerDispatchSyncEvent = "ServiceWorker.dispatchSyncEvent"

// DispatchSyncEventArgs represents the arguments for DispatchSyncEvent in the ServiceWorker domain.
type DispatchSyncEventArgs struct {
	Origin         string `json:"origin"`         // No description.
	RegistrationID string `json:"registrationId"` // No description.
	Tag            string `json:"tag"`            // No description.
	LastChance     bool   `json:"lastChance"`     // No description.
}

// Unmarshal the byte array into a return value for DispatchSyncEvent in the ServiceWorker domain.
func (a *DispatchSyncEventArgs) UnmarshalJSON(b []byte) error {
	type Copy DispatchSyncEventArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DispatchSyncEventArgs(*c)
	return nil
}

// Marshall the byte array into a return value for DispatchSyncEvent in the ServiceWorker domain.
func (a *DispatchSyncEventArgs) MarshalJSON() ([]byte, error) {
	type Copy DispatchSyncEventArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DispatchSyncEventReply represents the return values for DispatchSyncEvent in the ServiceWorker domain.
type DispatchSyncEventReply struct {
}

// DispatchSyncEventReply returns whether or not the FrameID matches the reply value for DispatchSyncEvent in the ServiceWorker domain.
func (a *DispatchSyncEventReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: DispatchSyncEventReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for DispatchSyncEvent in the ServiceWorker domain.
func (a *DispatchSyncEventReply) UnmarshalJSON(b []byte) error {
	type Copy DispatchSyncEventReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DispatchSyncEventReply(*c)
	return nil
}

const CommandServiceWorkerEnable = "ServiceWorker.enable"

// EnableArgs represents the arguments for Enable in the ServiceWorker domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the ServiceWorker domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the ServiceWorker domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the ServiceWorker domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the ServiceWorker domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: EnableReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Enable in the ServiceWorker domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

const CommandServiceWorkerInspectWorker = "ServiceWorker.inspectWorker"

// InspectWorkerArgs represents the arguments for InspectWorker in the ServiceWorker domain.
type InspectWorkerArgs struct {
	VersionID string `json:"versionId"` // No description.
}

// Unmarshal the byte array into a return value for InspectWorker in the ServiceWorker domain.
func (a *InspectWorkerArgs) UnmarshalJSON(b []byte) error {
	type Copy InspectWorkerArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = InspectWorkerArgs(*c)
	return nil
}

// Marshall the byte array into a return value for InspectWorker in the ServiceWorker domain.
func (a *InspectWorkerArgs) MarshalJSON() ([]byte, error) {
	type Copy InspectWorkerArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// InspectWorkerReply represents the return values for InspectWorker in the ServiceWorker domain.
type InspectWorkerReply struct {
}

// InspectWorkerReply returns whether or not the FrameID matches the reply value for InspectWorker in the ServiceWorker domain.
func (a *InspectWorkerReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: InspectWorkerReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for InspectWorker in the ServiceWorker domain.
func (a *InspectWorkerReply) UnmarshalJSON(b []byte) error {
	type Copy InspectWorkerReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = InspectWorkerReply(*c)
	return nil
}

const CommandServiceWorkerSetForceUpdateOnPageLoad = "ServiceWorker.setForceUpdateOnPageLoad"

// SetForceUpdateOnPageLoadArgs represents the arguments for SetForceUpdateOnPageLoad in the ServiceWorker domain.
type SetForceUpdateOnPageLoadArgs struct {
	ForceUpdateOnPageLoad bool `json:"forceUpdateOnPageLoad"` // No description.
}

// Unmarshal the byte array into a return value for SetForceUpdateOnPageLoad in the ServiceWorker domain.
func (a *SetForceUpdateOnPageLoadArgs) UnmarshalJSON(b []byte) error {
	type Copy SetForceUpdateOnPageLoadArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetForceUpdateOnPageLoadArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetForceUpdateOnPageLoad in the ServiceWorker domain.
func (a *SetForceUpdateOnPageLoadArgs) MarshalJSON() ([]byte, error) {
	type Copy SetForceUpdateOnPageLoadArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetForceUpdateOnPageLoadReply represents the return values for SetForceUpdateOnPageLoad in the ServiceWorker domain.
type SetForceUpdateOnPageLoadReply struct {
}

// SetForceUpdateOnPageLoadReply returns whether or not the FrameID matches the reply value for SetForceUpdateOnPageLoad in the ServiceWorker domain.
func (a *SetForceUpdateOnPageLoadReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetForceUpdateOnPageLoadReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetForceUpdateOnPageLoad in the ServiceWorker domain.
func (a *SetForceUpdateOnPageLoadReply) UnmarshalJSON(b []byte) error {
	type Copy SetForceUpdateOnPageLoadReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetForceUpdateOnPageLoadReply(*c)
	return nil
}

const CommandServiceWorkerSkipWaiting = "ServiceWorker.skipWaiting"

// SkipWaitingArgs represents the arguments for SkipWaiting in the ServiceWorker domain.
type SkipWaitingArgs struct {
	ScopeURL string `json:"scopeURL"` // No description.
}

// Unmarshal the byte array into a return value for SkipWaiting in the ServiceWorker domain.
func (a *SkipWaitingArgs) UnmarshalJSON(b []byte) error {
	type Copy SkipWaitingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SkipWaitingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SkipWaiting in the ServiceWorker domain.
func (a *SkipWaitingArgs) MarshalJSON() ([]byte, error) {
	type Copy SkipWaitingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SkipWaitingReply represents the return values for SkipWaiting in the ServiceWorker domain.
type SkipWaitingReply struct {
}

// SkipWaitingReply returns whether or not the FrameID matches the reply value for SkipWaiting in the ServiceWorker domain.
func (a *SkipWaitingReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SkipWaitingReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SkipWaiting in the ServiceWorker domain.
func (a *SkipWaitingReply) UnmarshalJSON(b []byte) error {
	type Copy SkipWaitingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SkipWaitingReply(*c)
	return nil
}

const CommandServiceWorkerStartWorker = "ServiceWorker.startWorker"

// StartWorkerArgs represents the arguments for StartWorker in the ServiceWorker domain.
type StartWorkerArgs struct {
	ScopeURL string `json:"scopeURL"` // No description.
}

// Unmarshal the byte array into a return value for StartWorker in the ServiceWorker domain.
func (a *StartWorkerArgs) UnmarshalJSON(b []byte) error {
	type Copy StartWorkerArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartWorkerArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartWorker in the ServiceWorker domain.
func (a *StartWorkerArgs) MarshalJSON() ([]byte, error) {
	type Copy StartWorkerArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartWorkerReply represents the return values for StartWorker in the ServiceWorker domain.
type StartWorkerReply struct {
}

// StartWorkerReply returns whether or not the FrameID matches the reply value for StartWorker in the ServiceWorker domain.
func (a *StartWorkerReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StartWorkerReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for StartWorker in the ServiceWorker domain.
func (a *StartWorkerReply) UnmarshalJSON(b []byte) error {
	type Copy StartWorkerReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartWorkerReply(*c)
	return nil
}

const CommandServiceWorkerStopAllWorkers = "ServiceWorker.stopAllWorkers"

// StopAllWorkersArgs represents the arguments for StopAllWorkers in the ServiceWorker domain.
type StopAllWorkersArgs struct {
}

// Unmarshal the byte array into a return value for StopAllWorkers in the ServiceWorker domain.
func (a *StopAllWorkersArgs) UnmarshalJSON(b []byte) error {
	type Copy StopAllWorkersArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopAllWorkersArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopAllWorkers in the ServiceWorker domain.
func (a *StopAllWorkersArgs) MarshalJSON() ([]byte, error) {
	type Copy StopAllWorkersArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopAllWorkersReply represents the return values for StopAllWorkers in the ServiceWorker domain.
type StopAllWorkersReply struct {
}

// StopAllWorkersReply returns whether or not the FrameID matches the reply value for StopAllWorkers in the ServiceWorker domain.
func (a *StopAllWorkersReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StopAllWorkersReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for StopAllWorkers in the ServiceWorker domain.
func (a *StopAllWorkersReply) UnmarshalJSON(b []byte) error {
	type Copy StopAllWorkersReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopAllWorkersReply(*c)
	return nil
}

const CommandServiceWorkerStopWorker = "ServiceWorker.stopWorker"

// StopWorkerArgs represents the arguments for StopWorker in the ServiceWorker domain.
type StopWorkerArgs struct {
	VersionID string `json:"versionId"` // No description.
}

// Unmarshal the byte array into a return value for StopWorker in the ServiceWorker domain.
func (a *StopWorkerArgs) UnmarshalJSON(b []byte) error {
	type Copy StopWorkerArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopWorkerArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopWorker in the ServiceWorker domain.
func (a *StopWorkerArgs) MarshalJSON() ([]byte, error) {
	type Copy StopWorkerArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopWorkerReply represents the return values for StopWorker in the ServiceWorker domain.
type StopWorkerReply struct {
}

// StopWorkerReply returns whether or not the FrameID matches the reply value for StopWorker in the ServiceWorker domain.
func (a *StopWorkerReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StopWorkerReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for StopWorker in the ServiceWorker domain.
func (a *StopWorkerReply) UnmarshalJSON(b []byte) error {
	type Copy StopWorkerReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopWorkerReply(*c)
	return nil
}

const CommandServiceWorkerUnregister = "ServiceWorker.unregister"

// UnregisterArgs represents the arguments for Unregister in the ServiceWorker domain.
type UnregisterArgs struct {
	ScopeURL string `json:"scopeURL"` // No description.
}

// Unmarshal the byte array into a return value for Unregister in the ServiceWorker domain.
func (a *UnregisterArgs) UnmarshalJSON(b []byte) error {
	type Copy UnregisterArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UnregisterArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Unregister in the ServiceWorker domain.
func (a *UnregisterArgs) MarshalJSON() ([]byte, error) {
	type Copy UnregisterArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// UnregisterReply represents the return values for Unregister in the ServiceWorker domain.
type UnregisterReply struct {
}

// UnregisterReply returns whether or not the FrameID matches the reply value for Unregister in the ServiceWorker domain.
func (a *UnregisterReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: UnregisterReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Unregister in the ServiceWorker domain.
func (a *UnregisterReply) UnmarshalJSON(b []byte) error {
	type Copy UnregisterReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UnregisterReply(*c)
	return nil
}

const CommandServiceWorkerUpdateRegistration = "ServiceWorker.updateRegistration"

// UpdateRegistrationArgs represents the arguments for UpdateRegistration in the ServiceWorker domain.
type UpdateRegistrationArgs struct {
	ScopeURL string `json:"scopeURL"` // No description.
}

// Unmarshal the byte array into a return value for UpdateRegistration in the ServiceWorker domain.
func (a *UpdateRegistrationArgs) UnmarshalJSON(b []byte) error {
	type Copy UpdateRegistrationArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UpdateRegistrationArgs(*c)
	return nil
}

// Marshall the byte array into a return value for UpdateRegistration in the ServiceWorker domain.
func (a *UpdateRegistrationArgs) MarshalJSON() ([]byte, error) {
	type Copy UpdateRegistrationArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// UpdateRegistrationReply represents the return values for UpdateRegistration in the ServiceWorker domain.
type UpdateRegistrationReply struct {
}

// UpdateRegistrationReply returns whether or not the FrameID matches the reply value for UpdateRegistration in the ServiceWorker domain.
func (a *UpdateRegistrationReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: UpdateRegistrationReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for UpdateRegistration in the ServiceWorker domain.
func (a *UpdateRegistrationReply) UnmarshalJSON(b []byte) error {
	type Copy UpdateRegistrationReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UpdateRegistrationReply(*c)
	return nil
}
