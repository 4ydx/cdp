// Code generated by cdpgen. DO NOT EDIT.

package audits

import "github.com/4ydx/cdp/protocol/network"

// AffectedCookie Information about a cookie that is affected by an inspector
// issue.
type AffectedCookie struct {
	Name   string `json:"name"`   // The following three properties uniquely identify a cookie
	Path   string `json:"path"`   // No description.
	Domain string `json:"domain"` // No description.
}

// AffectedRequest Information about a request that is affected by an
// inspector issue.
type AffectedRequest struct {
	RequestID network.RequestID `json:"requestId"`     // The unique request id.
	URL       string            `json:"url,omitempty"` // No description.
}

// SameSiteCookieExclusionReason
type SameSiteCookieExclusionReason string

// SameSiteCookieExclusionReason as enums.
const (
	SameSiteCookieExclusionReasonNotSet                                 SameSiteCookieExclusionReason = ""
	SameSiteCookieExclusionReasonExcludeSameSiteUnspecifiedTreatedAsLax SameSiteCookieExclusionReason = "ExcludeSameSiteUnspecifiedTreatedAsLax"
	SameSiteCookieExclusionReasonExcludeSameSiteNoneInsecure            SameSiteCookieExclusionReason = "ExcludeSameSiteNoneInsecure"
)

func (e SameSiteCookieExclusionReason) Valid() bool {
	switch e {
	case "ExcludeSameSiteUnspecifiedTreatedAsLax", "ExcludeSameSiteNoneInsecure":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieExclusionReason) String() string {
	return string(e)
}

// SameSiteCookieWarningReason
type SameSiteCookieWarningReason string

// SameSiteCookieWarningReason as enums.
const (
	SameSiteCookieWarningReasonNotSet                                         SameSiteCookieWarningReason = ""
	SameSiteCookieWarningReasonWarnSameSiteUnspecifiedCrossSiteContext        SameSiteCookieWarningReason = "WarnSameSiteUnspecifiedCrossSiteContext"
	SameSiteCookieWarningReasonWarnSameSiteNoneInsecure                       SameSiteCookieWarningReason = "WarnSameSiteNoneInsecure"
	SameSiteCookieWarningReasonWarnSameSiteUnspecifiedLaxAllowUnsafe          SameSiteCookieWarningReason = "WarnSameSiteUnspecifiedLaxAllowUnsafe"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeSecureURLMethodUnsafe   SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeSecureUrlMethodUnsafe"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeSecureURLLax            SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeSecureUrlLax"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeSecureURLStrict         SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeSecureUrlStrict"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeInsecureURLMethodUnsafe SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeInsecureUrlMethodUnsafe"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeInsecureURLLax          SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeInsecureUrlLax"
	SameSiteCookieWarningReasonWarnSameSiteCrossSchemeInsecureURLStrict       SameSiteCookieWarningReason = "WarnSameSiteCrossSchemeInsecureUrlStrict"
)

func (e SameSiteCookieWarningReason) Valid() bool {
	switch e {
	case "WarnSameSiteUnspecifiedCrossSiteContext", "WarnSameSiteNoneInsecure", "WarnSameSiteUnspecifiedLaxAllowUnsafe", "WarnSameSiteCrossSchemeSecureUrlMethodUnsafe", "WarnSameSiteCrossSchemeSecureUrlLax", "WarnSameSiteCrossSchemeSecureUrlStrict", "WarnSameSiteCrossSchemeInsecureUrlMethodUnsafe", "WarnSameSiteCrossSchemeInsecureUrlLax", "WarnSameSiteCrossSchemeInsecureUrlStrict":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieWarningReason) String() string {
	return string(e)
}

// SameSiteCookieOperation
type SameSiteCookieOperation string

// SameSiteCookieOperation as enums.
const (
	SameSiteCookieOperationNotSet     SameSiteCookieOperation = ""
	SameSiteCookieOperationSetCookie  SameSiteCookieOperation = "SetCookie"
	SameSiteCookieOperationReadCookie SameSiteCookieOperation = "ReadCookie"
)

func (e SameSiteCookieOperation) Valid() bool {
	switch e {
	case "SetCookie", "ReadCookie":
		return true
	default:
		return false
	}
}

func (e SameSiteCookieOperation) String() string {
	return string(e)
}

// SameSiteCookieIssueDetails This information is currently necessary, as the
// front-end has a difficult time finding a specific cookie. With this, we can
// convey specific error information without the cookie.
type SameSiteCookieIssueDetails struct {
	Cookie                 AffectedCookie                  `json:"cookie"`                   // No description.
	CookieWarningReasons   []SameSiteCookieWarningReason   `json:"cookieWarningReasons"`     // No description.
	CookieExclusionReasons []SameSiteCookieExclusionReason `json:"cookieExclusionReasons"`   // No description.
	Operation              SameSiteCookieOperation         `json:"operation"`                // Optionally identifies the site-for-cookies and the cookie url, which may be used by the front-end as additional context.
	SiteForCookies         string                          `json:"siteForCookies,omitempty"` // No description.
	CookieURL              string                          `json:"cookieUrl,omitempty"`      // No description.
	Request                *AffectedRequest                `json:"request,omitempty"`        // No description.
}

// InspectorIssueCode A unique identifier for the type of issue. Each type may
// use one of the optional fields in InspectorIssueDetails to convey more
// specific information about the kind of issue.
type InspectorIssueCode string

// InspectorIssueCode as enums.
const (
	InspectorIssueCodeNotSet              InspectorIssueCode = ""
	InspectorIssueCodeSameSiteCookieIssue InspectorIssueCode = "SameSiteCookieIssue"
)

func (e InspectorIssueCode) Valid() bool {
	switch e {
	case "SameSiteCookieIssue":
		return true
	default:
		return false
	}
}

func (e InspectorIssueCode) String() string {
	return string(e)
}

// InspectorIssueDetails This struct holds a list of optional fields with
// additional information specific to the kind of issue. When adding a new
// issue code, please also add a new optional field to this type.
type InspectorIssueDetails struct {
	SameSiteCookieIssueDetails *SameSiteCookieIssueDetails `json:"sameSiteCookieIssueDetails,omitempty"` // No description.
}

// InspectorIssue An inspector issue reported from the back-end.
type InspectorIssue struct {
	Code    InspectorIssueCode    `json:"code"`    // No description.
	Details InspectorIssueDetails `json:"details"` // No description.
}
