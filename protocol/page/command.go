// Code generated by cdpgen. DO NOT EDIT.

package page

import (
	"encoding/json"
	"log"

	"github.com/4ydx/cdp/protocol"
	"github.com/4ydx/cdp/protocol/debugger"
	"github.com/4ydx/cdp/protocol/dom"
	"github.com/4ydx/cdp/protocol/network"
	"github.com/4ydx/cdp/protocol/runtime"
)

const (
	CommandPageAddScriptToEvaluateOnLoad           = "Page.addScriptToEvaluateOnLoad"
	CommandPageAddScriptToEvaluateOnNewDocument    = "Page.addScriptToEvaluateOnNewDocument"
	CommandPageBringToFront                        = "Page.bringToFront"
	CommandPageCaptureScreenshot                   = "Page.captureScreenshot"
	CommandPageClearDeviceMetricsOverride          = "Page.clearDeviceMetricsOverride"
	CommandPageClearDeviceOrientationOverride      = "Page.clearDeviceOrientationOverride"
	CommandPageClearGeolocationOverride            = "Page.clearGeolocationOverride"
	CommandPageCreateIsolatedWorld                 = "Page.createIsolatedWorld"
	CommandPageDeleteCookie                        = "Page.deleteCookie"
	CommandPageDisable                             = "Page.disable"
	CommandPageEnable                              = "Page.enable"
	CommandPageGetAppManifest                      = "Page.getAppManifest"
	CommandPageGetCookies                          = "Page.getCookies"
	CommandPageGetFrameTree                        = "Page.getFrameTree"
	CommandPageGetLayoutMetrics                    = "Page.getLayoutMetrics"
	CommandPageGetNavigationHistory                = "Page.getNavigationHistory"
	CommandPageGetResourceContent                  = "Page.getResourceContent"
	CommandPageGetResourceTree                     = "Page.getResourceTree"
	CommandPageHandleJavaScriptDialog              = "Page.handleJavaScriptDialog"
	CommandPageNavigate                            = "Page.navigate"
	CommandPageNavigateToHistoryEntry              = "Page.navigateToHistoryEntry"
	CommandPagePrintToPDF                          = "Page.printToPDF"
	CommandPageReload                              = "Page.reload"
	CommandPageRemoveScriptToEvaluateOnLoad        = "Page.removeScriptToEvaluateOnLoad"
	CommandPageRemoveScriptToEvaluateOnNewDocument = "Page.removeScriptToEvaluateOnNewDocument"
	CommandPageRequestAppBanner                    = "Page.requestAppBanner"
	CommandPageScreencastFrameAck                  = "Page.screencastFrameAck"
	CommandPageSearchInResource                    = "Page.searchInResource"
	CommandPageSetAdBlockingEnabled                = "Page.setAdBlockingEnabled"
	CommandPageSetBypassCSP                        = "Page.setBypassCSP"
	CommandPageSetDeviceMetricsOverride            = "Page.setDeviceMetricsOverride"
	CommandPageSetDeviceOrientationOverride        = "Page.setDeviceOrientationOverride"
	CommandPageSetFontFamilies                     = "Page.setFontFamilies"
	CommandPageSetFontSizes                        = "Page.setFontSizes"
	CommandPageSetDocumentContent                  = "Page.setDocumentContent"
	CommandPageSetDownloadBehavior                 = "Page.setDownloadBehavior"
	CommandPageSetGeolocationOverride              = "Page.setGeolocationOverride"
	CommandPageSetLifecycleEventsEnabled           = "Page.setLifecycleEventsEnabled"
	CommandPageSetTouchEmulationEnabled            = "Page.setTouchEmulationEnabled"
	CommandPageStartScreencast                     = "Page.startScreencast"
	CommandPageStopLoading                         = "Page.stopLoading"
	CommandPageCrash                               = "Page.crash"
	CommandPageClose                               = "Page.close"
	CommandPageSetWebLifecycleState                = "Page.setWebLifecycleState"
	CommandPageStopScreencast                      = "Page.stopScreencast"
	CommandPageSetProduceCompilationCache          = "Page.setProduceCompilationCache"
	CommandPageAddCompilationCache                 = "Page.addCompilationCache"
	CommandPageClearCompilationCache               = "Page.clearCompilationCache"
)

// AddScriptToEvaluateOnLoadArgs represents the arguments for AddScriptToEvaluateOnLoad in the Page domain.
type AddScriptToEvaluateOnLoadArgs struct {
	ScriptSource string `json:"scriptSource"` // No description.
}

// Unmarshal the byte array into a return value for AddScriptToEvaluateOnLoad in the Page domain.
func (a *AddScriptToEvaluateOnLoadArgs) UnmarshalJSON(b []byte) error {
	type Copy AddScriptToEvaluateOnLoadArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddScriptToEvaluateOnLoadArgs(*c)
	return nil
}

// Marshall the byte array into a return value for AddScriptToEvaluateOnLoad in the Page domain.
func (a *AddScriptToEvaluateOnLoadArgs) MarshalJSON() ([]byte, error) {
	type Copy AddScriptToEvaluateOnLoadArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// AddScriptToEvaluateOnLoadReply represents the return values for AddScriptToEvaluateOnLoad in the Page domain.
type AddScriptToEvaluateOnLoadReply struct {
	Identifier ScriptIdentifier `json:"identifier"` // Identifier of the added script.
}

// AddScriptToEvaluateOnLoadReply returns whether or not the FrameID matches the reply value for AddScriptToEvaluateOnLoad in the Page domain.
func (a *AddScriptToEvaluateOnLoadReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: AddScriptToEvaluateOnLoadReply", err)
	}
	return true
}

// AddScriptToEvaluateOnLoadReply returns the FrameID value for AddScriptToEvaluateOnLoad in the Page domain.
func (a *AddScriptToEvaluateOnLoadReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for AddScriptToEvaluateOnLoad in the Page domain.
func (a *AddScriptToEvaluateOnLoadReply) UnmarshalJSON(b []byte) error {
	type Copy AddScriptToEvaluateOnLoadReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddScriptToEvaluateOnLoadReply(*c)
	return nil
}

// AddScriptToEvaluateOnNewDocumentArgs represents the arguments for AddScriptToEvaluateOnNewDocument in the Page domain.
type AddScriptToEvaluateOnNewDocumentArgs struct {
	Source string `json:"source"` // No description.
}

// Unmarshal the byte array into a return value for AddScriptToEvaluateOnNewDocument in the Page domain.
func (a *AddScriptToEvaluateOnNewDocumentArgs) UnmarshalJSON(b []byte) error {
	type Copy AddScriptToEvaluateOnNewDocumentArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddScriptToEvaluateOnNewDocumentArgs(*c)
	return nil
}

// Marshall the byte array into a return value for AddScriptToEvaluateOnNewDocument in the Page domain.
func (a *AddScriptToEvaluateOnNewDocumentArgs) MarshalJSON() ([]byte, error) {
	type Copy AddScriptToEvaluateOnNewDocumentArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// AddScriptToEvaluateOnNewDocumentReply represents the return values for AddScriptToEvaluateOnNewDocument in the Page domain.
type AddScriptToEvaluateOnNewDocumentReply struct {
	Identifier ScriptIdentifier `json:"identifier"` // Identifier of the added script.
}

// AddScriptToEvaluateOnNewDocumentReply returns whether or not the FrameID matches the reply value for AddScriptToEvaluateOnNewDocument in the Page domain.
func (a *AddScriptToEvaluateOnNewDocumentReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: AddScriptToEvaluateOnNewDocumentReply", err)
	}
	return true
}

// AddScriptToEvaluateOnNewDocumentReply returns the FrameID value for AddScriptToEvaluateOnNewDocument in the Page domain.
func (a *AddScriptToEvaluateOnNewDocumentReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for AddScriptToEvaluateOnNewDocument in the Page domain.
func (a *AddScriptToEvaluateOnNewDocumentReply) UnmarshalJSON(b []byte) error {
	type Copy AddScriptToEvaluateOnNewDocumentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddScriptToEvaluateOnNewDocumentReply(*c)
	return nil
}

// BringToFrontArgs represents the arguments for BringToFront in the Page domain.
type BringToFrontArgs struct {
}

// Unmarshal the byte array into a return value for BringToFront in the Page domain.
func (a *BringToFrontArgs) UnmarshalJSON(b []byte) error {
	type Copy BringToFrontArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = BringToFrontArgs(*c)
	return nil
}

// Marshall the byte array into a return value for BringToFront in the Page domain.
func (a *BringToFrontArgs) MarshalJSON() ([]byte, error) {
	type Copy BringToFrontArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// BringToFrontReply represents the return values for BringToFront in the Page domain.
type BringToFrontReply struct {
}

// BringToFrontReply returns whether or not the FrameID matches the reply value for BringToFront in the Page domain.
func (a *BringToFrontReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: BringToFrontReply", err)
	}
	return true
}

// BringToFrontReply returns the FrameID value for BringToFront in the Page domain.
func (a *BringToFrontReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for BringToFront in the Page domain.
func (a *BringToFrontReply) UnmarshalJSON(b []byte) error {
	type Copy BringToFrontReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = BringToFrontReply(*c)
	return nil
}

// CaptureScreenshotArgs represents the arguments for CaptureScreenshot in the Page domain.
type CaptureScreenshotArgs struct {
	// Format Image compression format (defaults to png).
	//
	// Values: "jpeg", "png".
	Format  string   `json:"format,omitempty"`
	Quality int      `json:"quality,omitempty"` // Compression quality from range [0..100] (jpeg only).
	Clip    Viewport `json:"clip,omitempty"`    // Capture the screenshot of a given region only.
	// FromSurface Capture the screenshot from the surface, rather than
	// the view. Defaults to true.
	//
	// Note: This property is experimental.
	FromSurface bool `json:"fromSurface,omitempty"`
}

// Unmarshal the byte array into a return value for CaptureScreenshot in the Page domain.
func (a *CaptureScreenshotArgs) UnmarshalJSON(b []byte) error {
	type Copy CaptureScreenshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CaptureScreenshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for CaptureScreenshot in the Page domain.
func (a *CaptureScreenshotArgs) MarshalJSON() ([]byte, error) {
	type Copy CaptureScreenshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CaptureScreenshotReply represents the return values for CaptureScreenshot in the Page domain.
type CaptureScreenshotReply struct {
	Data []byte `json:"data"` // Base64-encoded image data.
}

// CaptureScreenshotReply returns whether or not the FrameID matches the reply value for CaptureScreenshot in the Page domain.
func (a *CaptureScreenshotReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: CaptureScreenshotReply", err)
	}
	return true
}

// CaptureScreenshotReply returns the FrameID value for CaptureScreenshot in the Page domain.
func (a *CaptureScreenshotReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for CaptureScreenshot in the Page domain.
func (a *CaptureScreenshotReply) UnmarshalJSON(b []byte) error {
	type Copy CaptureScreenshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CaptureScreenshotReply(*c)
	return nil
}

// CreateIsolatedWorldArgs represents the arguments for CreateIsolatedWorld in the Page domain.
type CreateIsolatedWorldArgs struct {
	FrameID             shared.FrameID `json:"frameId"`                       // Id of the frame in which the isolated world should be created.
	WorldName           string         `json:"worldName,omitempty"`           // An optional name which is reported in the Execution Context.
	GrantUniveralAccess bool           `json:"grantUniveralAccess,omitempty"` // Whether or not universal access should be granted to the isolated world. This is a powerful option, use with caution.
}

// Unmarshal the byte array into a return value for CreateIsolatedWorld in the Page domain.
func (a *CreateIsolatedWorldArgs) UnmarshalJSON(b []byte) error {
	type Copy CreateIsolatedWorldArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CreateIsolatedWorldArgs(*c)
	return nil
}

// Marshall the byte array into a return value for CreateIsolatedWorld in the Page domain.
func (a *CreateIsolatedWorldArgs) MarshalJSON() ([]byte, error) {
	type Copy CreateIsolatedWorldArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CreateIsolatedWorldReply represents the return values for CreateIsolatedWorld in the Page domain.
type CreateIsolatedWorldReply struct {
	ExecutionContextID runtime.ExecutionContextID `json:"executionContextId"` // Execution context of the isolated world.
}

// CreateIsolatedWorldReply returns whether or not the FrameID matches the reply value for CreateIsolatedWorld in the Page domain.
func (a *CreateIsolatedWorldReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: CreateIsolatedWorldReply", err)
	}
	return true
}

// CreateIsolatedWorldReply returns the FrameID value for CreateIsolatedWorld in the Page domain.
func (a *CreateIsolatedWorldReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for CreateIsolatedWorld in the Page domain.
func (a *CreateIsolatedWorldReply) UnmarshalJSON(b []byte) error {
	type Copy CreateIsolatedWorldReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CreateIsolatedWorldReply(*c)
	return nil
}

// DisableArgs represents the arguments for Disable in the Page domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the Page domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the Page domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the Page domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the Page domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: DisableReply", err)
	}
	return true
}

// DisableReply returns the FrameID value for Disable in the Page domain.
func (a *DisableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Disable in the Page domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// EnableArgs represents the arguments for Enable in the Page domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the Page domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the Page domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the Page domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the Page domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: EnableReply", err)
	}
	return true
}

// EnableReply returns the FrameID value for Enable in the Page domain.
func (a *EnableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Enable in the Page domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// GetAppManifestArgs represents the arguments for GetAppManifest in the Page domain.
type GetAppManifestArgs struct {
}

// Unmarshal the byte array into a return value for GetAppManifest in the Page domain.
func (a *GetAppManifestArgs) UnmarshalJSON(b []byte) error {
	type Copy GetAppManifestArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetAppManifestArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetAppManifest in the Page domain.
func (a *GetAppManifestArgs) MarshalJSON() ([]byte, error) {
	type Copy GetAppManifestArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetAppManifestReply represents the return values for GetAppManifest in the Page domain.
type GetAppManifestReply struct {
	URL    string             `json:"url"`            // Manifest location.
	Errors []AppManifestError `json:"errors"`         // No description.
	Data   string             `json:"data,omitempty"` // Manifest content.
}

// GetAppManifestReply returns whether or not the FrameID matches the reply value for GetAppManifest in the Page domain.
func (a *GetAppManifestReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: GetAppManifestReply", err)
	}
	return true
}

// GetAppManifestReply returns the FrameID value for GetAppManifest in the Page domain.
func (a *GetAppManifestReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetAppManifest in the Page domain.
func (a *GetAppManifestReply) UnmarshalJSON(b []byte) error {
	type Copy GetAppManifestReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetAppManifestReply(*c)
	return nil
}

// GetFrameTreeArgs represents the arguments for GetFrameTree in the Page domain.
type GetFrameTreeArgs struct {
}

// Unmarshal the byte array into a return value for GetFrameTree in the Page domain.
func (a *GetFrameTreeArgs) UnmarshalJSON(b []byte) error {
	type Copy GetFrameTreeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetFrameTreeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetFrameTree in the Page domain.
func (a *GetFrameTreeArgs) MarshalJSON() ([]byte, error) {
	type Copy GetFrameTreeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetFrameTreeReply represents the return values for GetFrameTree in the Page domain.
type GetFrameTreeReply struct {
	FrameTree FrameTree `json:"frameTree"` // Present frame tree structure.
}

// GetFrameTreeReply returns whether or not the FrameID matches the reply value for GetFrameTree in the Page domain.
func (a *GetFrameTreeReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: GetFrameTreeReply", err)
	}
	return true
}

// GetFrameTreeReply returns the FrameID value for GetFrameTree in the Page domain.
func (a *GetFrameTreeReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetFrameTree in the Page domain.
func (a *GetFrameTreeReply) UnmarshalJSON(b []byte) error {
	type Copy GetFrameTreeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetFrameTreeReply(*c)
	return nil
}

// GetLayoutMetricsArgs represents the arguments for GetLayoutMetrics in the Page domain.
type GetLayoutMetricsArgs struct {
}

// Unmarshal the byte array into a return value for GetLayoutMetrics in the Page domain.
func (a *GetLayoutMetricsArgs) UnmarshalJSON(b []byte) error {
	type Copy GetLayoutMetricsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetLayoutMetricsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetLayoutMetrics in the Page domain.
func (a *GetLayoutMetricsArgs) MarshalJSON() ([]byte, error) {
	type Copy GetLayoutMetricsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetLayoutMetricsReply represents the return values for GetLayoutMetrics in the Page domain.
type GetLayoutMetricsReply struct {
	LayoutViewport LayoutViewport `json:"layoutViewport"` // Metrics relating to the layout viewport.
	VisualViewport VisualViewport `json:"visualViewport"` // Metrics relating to the visual viewport.
	ContentSize    dom.Rect       `json:"contentSize"`    // Size of scrollable area.
}

// GetLayoutMetricsReply returns whether or not the FrameID matches the reply value for GetLayoutMetrics in the Page domain.
func (a *GetLayoutMetricsReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: GetLayoutMetricsReply", err)
	}
	return true
}

// GetLayoutMetricsReply returns the FrameID value for GetLayoutMetrics in the Page domain.
func (a *GetLayoutMetricsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetLayoutMetrics in the Page domain.
func (a *GetLayoutMetricsReply) UnmarshalJSON(b []byte) error {
	type Copy GetLayoutMetricsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetLayoutMetricsReply(*c)
	return nil
}

// GetNavigationHistoryArgs represents the arguments for GetNavigationHistory in the Page domain.
type GetNavigationHistoryArgs struct {
}

// Unmarshal the byte array into a return value for GetNavigationHistory in the Page domain.
func (a *GetNavigationHistoryArgs) UnmarshalJSON(b []byte) error {
	type Copy GetNavigationHistoryArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetNavigationHistoryArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetNavigationHistory in the Page domain.
func (a *GetNavigationHistoryArgs) MarshalJSON() ([]byte, error) {
	type Copy GetNavigationHistoryArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetNavigationHistoryReply represents the return values for GetNavigationHistory in the Page domain.
type GetNavigationHistoryReply struct {
	CurrentIndex int               `json:"currentIndex"` // Index of the current navigation history entry.
	Entries      []NavigationEntry `json:"entries"`      // Array of navigation history entries.
}

// GetNavigationHistoryReply returns whether or not the FrameID matches the reply value for GetNavigationHistory in the Page domain.
func (a *GetNavigationHistoryReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: GetNavigationHistoryReply", err)
	}
	return true
}

// GetNavigationHistoryReply returns the FrameID value for GetNavigationHistory in the Page domain.
func (a *GetNavigationHistoryReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetNavigationHistory in the Page domain.
func (a *GetNavigationHistoryReply) UnmarshalJSON(b []byte) error {
	type Copy GetNavigationHistoryReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetNavigationHistoryReply(*c)
	return nil
}

// GetResourceContentArgs represents the arguments for GetResourceContent in the Page domain.
type GetResourceContentArgs struct {
	FrameID shared.FrameID `json:"frameId"` // Frame id to get resource for.
	URL     string         `json:"url"`     // URL of the resource to get content for.
}

// Unmarshal the byte array into a return value for GetResourceContent in the Page domain.
func (a *GetResourceContentArgs) UnmarshalJSON(b []byte) error {
	type Copy GetResourceContentArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetResourceContentArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetResourceContent in the Page domain.
func (a *GetResourceContentArgs) MarshalJSON() ([]byte, error) {
	type Copy GetResourceContentArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetResourceContentReply represents the return values for GetResourceContent in the Page domain.
type GetResourceContentReply struct {
	Content       string `json:"content"`       // Resource content.
	Base64Encoded bool   `json:"base64Encoded"` // True, if content was served as base64.
}

// GetResourceContentReply returns whether or not the FrameID matches the reply value for GetResourceContent in the Page domain.
func (a *GetResourceContentReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: GetResourceContentReply", err)
	}
	return true
}

// GetResourceContentReply returns the FrameID value for GetResourceContent in the Page domain.
func (a *GetResourceContentReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetResourceContent in the Page domain.
func (a *GetResourceContentReply) UnmarshalJSON(b []byte) error {
	type Copy GetResourceContentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetResourceContentReply(*c)
	return nil
}

// GetResourceTreeArgs represents the arguments for GetResourceTree in the Page domain.
type GetResourceTreeArgs struct {
}

// Unmarshal the byte array into a return value for GetResourceTree in the Page domain.
func (a *GetResourceTreeArgs) UnmarshalJSON(b []byte) error {
	type Copy GetResourceTreeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetResourceTreeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetResourceTree in the Page domain.
func (a *GetResourceTreeArgs) MarshalJSON() ([]byte, error) {
	type Copy GetResourceTreeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetResourceTreeReply represents the return values for GetResourceTree in the Page domain.
type GetResourceTreeReply struct {
	FrameTree FrameResourceTree `json:"frameTree"` // Present frame / resource tree structure.
}

// GetResourceTreeReply returns whether or not the FrameID matches the reply value for GetResourceTree in the Page domain.
func (a *GetResourceTreeReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: GetResourceTreeReply", err)
	}
	return true
}

// GetResourceTreeReply returns the FrameID value for GetResourceTree in the Page domain.
func (a *GetResourceTreeReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetResourceTree in the Page domain.
func (a *GetResourceTreeReply) UnmarshalJSON(b []byte) error {
	type Copy GetResourceTreeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetResourceTreeReply(*c)
	return nil
}

// HandleJavaScriptDialogArgs represents the arguments for HandleJavaScriptDialog in the Page domain.
type HandleJavaScriptDialogArgs struct {
	Accept     bool   `json:"accept"`               // Whether to accept or dismiss the dialog.
	PromptText string `json:"promptText,omitempty"` // The text to enter into the dialog prompt before accepting. Used only if this is a prompt dialog.
}

// Unmarshal the byte array into a return value for HandleJavaScriptDialog in the Page domain.
func (a *HandleJavaScriptDialogArgs) UnmarshalJSON(b []byte) error {
	type Copy HandleJavaScriptDialogArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HandleJavaScriptDialogArgs(*c)
	return nil
}

// Marshall the byte array into a return value for HandleJavaScriptDialog in the Page domain.
func (a *HandleJavaScriptDialogArgs) MarshalJSON() ([]byte, error) {
	type Copy HandleJavaScriptDialogArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// HandleJavaScriptDialogReply represents the return values for HandleJavaScriptDialog in the Page domain.
type HandleJavaScriptDialogReply struct {
}

// HandleJavaScriptDialogReply returns whether or not the FrameID matches the reply value for HandleJavaScriptDialog in the Page domain.
func (a *HandleJavaScriptDialogReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: HandleJavaScriptDialogReply", err)
	}
	return true
}

// HandleJavaScriptDialogReply returns the FrameID value for HandleJavaScriptDialog in the Page domain.
func (a *HandleJavaScriptDialogReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for HandleJavaScriptDialog in the Page domain.
func (a *HandleJavaScriptDialogReply) UnmarshalJSON(b []byte) error {
	type Copy HandleJavaScriptDialogReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HandleJavaScriptDialogReply(*c)
	return nil
}

// NavigateArgs represents the arguments for Navigate in the Page domain.
type NavigateArgs struct {
	URL            string         `json:"url"`                      // URL to navigate the page to.
	Referrer       string         `json:"referrer,omitempty"`       // Referrer URL.
	TransitionType TransitionType `json:"transitionType,omitempty"` // Intended transition type.
	FrameID        shared.FrameID `json:"frameId,omitempty"`        // Frame id to navigate, if not specified navigates the top frame.
}

// Unmarshal the byte array into a return value for Navigate in the Page domain.
func (a *NavigateArgs) UnmarshalJSON(b []byte) error {
	type Copy NavigateArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NavigateArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Navigate in the Page domain.
func (a *NavigateArgs) MarshalJSON() ([]byte, error) {
	type Copy NavigateArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// NavigateReply represents the return values for Navigate in the Page domain.
type NavigateReply struct {
	FrameID   shared.FrameID   `json:"frameId"`             // Frame id that has navigated (or failed to navigate)
	LoaderID  network.LoaderID `json:"loaderId,omitempty"`  // Loader identifier.
	ErrorText string           `json:"errorText,omitempty"` // User friendly error message, present if and only if navigation has failed.
}

// NavigateReply returns whether or not the FrameID matches the reply value for Navigate in the Page domain.
func (a *NavigateReply) MatchFrameID(frameID string, m []byte) bool {
	v := &NavigateReply{}
	err := v.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: NavigateReply", err)
	}
	if v.FrameID != shared.FrameID(frameID) {
		return false
	}
	*a = *v
	return true
}

// NavigateReply returns the FrameID for Navigate in the Page domain.
func (a *NavigateReply) GetFrameID() string {
	return string(a.FrameID)
}

// Unmarshal the byte array into a return value for Navigate in the Page domain.
func (a *NavigateReply) UnmarshalJSON(b []byte) error {
	type Copy NavigateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NavigateReply(*c)
	return nil
}

// NavigateToHistoryEntryArgs represents the arguments for NavigateToHistoryEntry in the Page domain.
type NavigateToHistoryEntryArgs struct {
	EntryID int `json:"entryId"` // Unique id of the entry to navigate to.
}

// Unmarshal the byte array into a return value for NavigateToHistoryEntry in the Page domain.
func (a *NavigateToHistoryEntryArgs) UnmarshalJSON(b []byte) error {
	type Copy NavigateToHistoryEntryArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NavigateToHistoryEntryArgs(*c)
	return nil
}

// Marshall the byte array into a return value for NavigateToHistoryEntry in the Page domain.
func (a *NavigateToHistoryEntryArgs) MarshalJSON() ([]byte, error) {
	type Copy NavigateToHistoryEntryArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// NavigateToHistoryEntryReply represents the return values for NavigateToHistoryEntry in the Page domain.
type NavigateToHistoryEntryReply struct {
}

// NavigateToHistoryEntryReply returns whether or not the FrameID matches the reply value for NavigateToHistoryEntry in the Page domain.
func (a *NavigateToHistoryEntryReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: NavigateToHistoryEntryReply", err)
	}
	return true
}

// NavigateToHistoryEntryReply returns the FrameID value for NavigateToHistoryEntry in the Page domain.
func (a *NavigateToHistoryEntryReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for NavigateToHistoryEntry in the Page domain.
func (a *NavigateToHistoryEntryReply) UnmarshalJSON(b []byte) error {
	type Copy NavigateToHistoryEntryReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NavigateToHistoryEntryReply(*c)
	return nil
}

// PrintToPDFArgs represents the arguments for PrintToPDF in the Page domain.
type PrintToPDFArgs struct {
	Landscape               bool    `json:"landscape,omitempty"`               // Paper orientation. Defaults to false.
	DisplayHeaderFooter     bool    `json:"displayHeaderFooter,omitempty"`     // Display header and footer. Defaults to false.
	PrintBackground         bool    `json:"printBackground,omitempty"`         // Print background graphics. Defaults to false.
	Scale                   float64 `json:"scale,omitempty"`                   // Scale of the webpage rendering. Defaults to 1.
	PaperWidth              float64 `json:"paperWidth,omitempty"`              // Paper width in inches. Defaults to 8.5 inches.
	PaperHeight             float64 `json:"paperHeight,omitempty"`             // Paper height in inches. Defaults to 11 inches.
	MarginTop               float64 `json:"marginTop,omitempty"`               // Top margin in inches. Defaults to 1cm (~0.4 inches).
	MarginBottom            float64 `json:"marginBottom,omitempty"`            // Bottom margin in inches. Defaults to 1cm (~0.4 inches).
	MarginLeft              float64 `json:"marginLeft,omitempty"`              // Left margin in inches. Defaults to 1cm (~0.4 inches).
	MarginRight             float64 `json:"marginRight,omitempty"`             // Right margin in inches. Defaults to 1cm (~0.4 inches).
	PageRanges              string  `json:"pageRanges,omitempty"`              // Paper ranges to print, e.g., '1-5, 8, 11-13'. Defaults to the empty string, which means print all pages.
	IgnoreInvalidPageRanges bool    `json:"ignoreInvalidPageRanges,omitempty"` // Whether to silently ignore invalid but successfully parsed page ranges, such as '3-2'. Defaults to false.
	HeaderTemplate          string  `json:"headerTemplate,omitempty"`          // HTML template for the print header. Should be valid HTML markup with following classes used to inject printing values into them: - `date`: formatted print date - `title`: document title - `url`: document location - `pageNumber`: current page number - `totalPages`: total pages in the document For example, `<span class=title></span>` would generate span containing the title.
	FooterTemplate          string  `json:"footerTemplate,omitempty"`          // HTML template for the print footer. Should use the same format as the `headerTemplate`.
	PreferCSSPageSize       bool    `json:"preferCSSPageSize,omitempty"`       // Whether or not to prefer page size as defined by css. Defaults to false, in which case the content will be scaled to fit the paper size.
}

// Unmarshal the byte array into a return value for PrintToPDF in the Page domain.
func (a *PrintToPDFArgs) UnmarshalJSON(b []byte) error {
	type Copy PrintToPDFArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PrintToPDFArgs(*c)
	return nil
}

// Marshall the byte array into a return value for PrintToPDF in the Page domain.
func (a *PrintToPDFArgs) MarshalJSON() ([]byte, error) {
	type Copy PrintToPDFArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// PrintToPDFReply represents the return values for PrintToPDF in the Page domain.
type PrintToPDFReply struct {
	Data []byte `json:"data"` // Base64-encoded pdf data.
}

// PrintToPDFReply returns whether or not the FrameID matches the reply value for PrintToPDF in the Page domain.
func (a *PrintToPDFReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: PrintToPDFReply", err)
	}
	return true
}

// PrintToPDFReply returns the FrameID value for PrintToPDF in the Page domain.
func (a *PrintToPDFReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for PrintToPDF in the Page domain.
func (a *PrintToPDFReply) UnmarshalJSON(b []byte) error {
	type Copy PrintToPDFReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PrintToPDFReply(*c)
	return nil
}

// ReloadArgs represents the arguments for Reload in the Page domain.
type ReloadArgs struct {
	IgnoreCache            bool   `json:"ignoreCache,omitempty"`            // If true, browser cache is ignored (as if the user pressed Shift+refresh).
	ScriptToEvaluateOnLoad string `json:"scriptToEvaluateOnLoad,omitempty"` // If set, the script will be injected into all frames of the inspected page after reload. Argument will be ignored if reloading dataURL origin.
}

// Unmarshal the byte array into a return value for Reload in the Page domain.
func (a *ReloadArgs) UnmarshalJSON(b []byte) error {
	type Copy ReloadArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReloadArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Reload in the Page domain.
func (a *ReloadArgs) MarshalJSON() ([]byte, error) {
	type Copy ReloadArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ReloadReply represents the return values for Reload in the Page domain.
type ReloadReply struct {
}

// ReloadReply returns whether or not the FrameID matches the reply value for Reload in the Page domain.
func (a *ReloadReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ReloadReply", err)
	}
	return true
}

// ReloadReply returns the FrameID value for Reload in the Page domain.
func (a *ReloadReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Reload in the Page domain.
func (a *ReloadReply) UnmarshalJSON(b []byte) error {
	type Copy ReloadReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReloadReply(*c)
	return nil
}

// RemoveScriptToEvaluateOnLoadArgs represents the arguments for RemoveScriptToEvaluateOnLoad in the Page domain.
type RemoveScriptToEvaluateOnLoadArgs struct {
	Identifier ScriptIdentifier `json:"identifier"` // No description.
}

// Unmarshal the byte array into a return value for RemoveScriptToEvaluateOnLoad in the Page domain.
func (a *RemoveScriptToEvaluateOnLoadArgs) UnmarshalJSON(b []byte) error {
	type Copy RemoveScriptToEvaluateOnLoadArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveScriptToEvaluateOnLoadArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RemoveScriptToEvaluateOnLoad in the Page domain.
func (a *RemoveScriptToEvaluateOnLoadArgs) MarshalJSON() ([]byte, error) {
	type Copy RemoveScriptToEvaluateOnLoadArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RemoveScriptToEvaluateOnLoadReply represents the return values for RemoveScriptToEvaluateOnLoad in the Page domain.
type RemoveScriptToEvaluateOnLoadReply struct {
}

// RemoveScriptToEvaluateOnLoadReply returns whether or not the FrameID matches the reply value for RemoveScriptToEvaluateOnLoad in the Page domain.
func (a *RemoveScriptToEvaluateOnLoadReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: RemoveScriptToEvaluateOnLoadReply", err)
	}
	return true
}

// RemoveScriptToEvaluateOnLoadReply returns the FrameID value for RemoveScriptToEvaluateOnLoad in the Page domain.
func (a *RemoveScriptToEvaluateOnLoadReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for RemoveScriptToEvaluateOnLoad in the Page domain.
func (a *RemoveScriptToEvaluateOnLoadReply) UnmarshalJSON(b []byte) error {
	type Copy RemoveScriptToEvaluateOnLoadReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveScriptToEvaluateOnLoadReply(*c)
	return nil
}

// RemoveScriptToEvaluateOnNewDocumentArgs represents the arguments for RemoveScriptToEvaluateOnNewDocument in the Page domain.
type RemoveScriptToEvaluateOnNewDocumentArgs struct {
	Identifier ScriptIdentifier `json:"identifier"` // No description.
}

// Unmarshal the byte array into a return value for RemoveScriptToEvaluateOnNewDocument in the Page domain.
func (a *RemoveScriptToEvaluateOnNewDocumentArgs) UnmarshalJSON(b []byte) error {
	type Copy RemoveScriptToEvaluateOnNewDocumentArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveScriptToEvaluateOnNewDocumentArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RemoveScriptToEvaluateOnNewDocument in the Page domain.
func (a *RemoveScriptToEvaluateOnNewDocumentArgs) MarshalJSON() ([]byte, error) {
	type Copy RemoveScriptToEvaluateOnNewDocumentArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RemoveScriptToEvaluateOnNewDocumentReply represents the return values for RemoveScriptToEvaluateOnNewDocument in the Page domain.
type RemoveScriptToEvaluateOnNewDocumentReply struct {
}

// RemoveScriptToEvaluateOnNewDocumentReply returns whether or not the FrameID matches the reply value for RemoveScriptToEvaluateOnNewDocument in the Page domain.
func (a *RemoveScriptToEvaluateOnNewDocumentReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: RemoveScriptToEvaluateOnNewDocumentReply", err)
	}
	return true
}

// RemoveScriptToEvaluateOnNewDocumentReply returns the FrameID value for RemoveScriptToEvaluateOnNewDocument in the Page domain.
func (a *RemoveScriptToEvaluateOnNewDocumentReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for RemoveScriptToEvaluateOnNewDocument in the Page domain.
func (a *RemoveScriptToEvaluateOnNewDocumentReply) UnmarshalJSON(b []byte) error {
	type Copy RemoveScriptToEvaluateOnNewDocumentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveScriptToEvaluateOnNewDocumentReply(*c)
	return nil
}

// RequestAppBannerArgs represents the arguments for RequestAppBanner in the Page domain.
type RequestAppBannerArgs struct {
}

// Unmarshal the byte array into a return value for RequestAppBanner in the Page domain.
func (a *RequestAppBannerArgs) UnmarshalJSON(b []byte) error {
	type Copy RequestAppBannerArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestAppBannerArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RequestAppBanner in the Page domain.
func (a *RequestAppBannerArgs) MarshalJSON() ([]byte, error) {
	type Copy RequestAppBannerArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RequestAppBannerReply represents the return values for RequestAppBanner in the Page domain.
type RequestAppBannerReply struct {
}

// RequestAppBannerReply returns whether or not the FrameID matches the reply value for RequestAppBanner in the Page domain.
func (a *RequestAppBannerReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: RequestAppBannerReply", err)
	}
	return true
}

// RequestAppBannerReply returns the FrameID value for RequestAppBanner in the Page domain.
func (a *RequestAppBannerReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for RequestAppBanner in the Page domain.
func (a *RequestAppBannerReply) UnmarshalJSON(b []byte) error {
	type Copy RequestAppBannerReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestAppBannerReply(*c)
	return nil
}

// ScreencastFrameAckArgs represents the arguments for ScreencastFrameAck in the Page domain.
type ScreencastFrameAckArgs struct {
	SessionID int `json:"sessionId"` // Frame number.
}

// Unmarshal the byte array into a return value for ScreencastFrameAck in the Page domain.
func (a *ScreencastFrameAckArgs) UnmarshalJSON(b []byte) error {
	type Copy ScreencastFrameAckArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ScreencastFrameAckArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ScreencastFrameAck in the Page domain.
func (a *ScreencastFrameAckArgs) MarshalJSON() ([]byte, error) {
	type Copy ScreencastFrameAckArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ScreencastFrameAckReply represents the return values for ScreencastFrameAck in the Page domain.
type ScreencastFrameAckReply struct {
}

// ScreencastFrameAckReply returns whether or not the FrameID matches the reply value for ScreencastFrameAck in the Page domain.
func (a *ScreencastFrameAckReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ScreencastFrameAckReply", err)
	}
	return true
}

// ScreencastFrameAckReply returns the FrameID value for ScreencastFrameAck in the Page domain.
func (a *ScreencastFrameAckReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for ScreencastFrameAck in the Page domain.
func (a *ScreencastFrameAckReply) UnmarshalJSON(b []byte) error {
	type Copy ScreencastFrameAckReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ScreencastFrameAckReply(*c)
	return nil
}

// SearchInResourceArgs represents the arguments for SearchInResource in the Page domain.
type SearchInResourceArgs struct {
	FrameID       shared.FrameID `json:"frameId"`                 // Frame id for resource to search in.
	URL           string         `json:"url"`                     // URL of the resource to search in.
	Query         string         `json:"query"`                   // String to search for.
	CaseSensitive bool           `json:"caseSensitive,omitempty"` // If true, search is case sensitive.
	IsRegex       bool           `json:"isRegex,omitempty"`       // If true, treats string parameter as regex.
}

// Unmarshal the byte array into a return value for SearchInResource in the Page domain.
func (a *SearchInResourceArgs) UnmarshalJSON(b []byte) error {
	type Copy SearchInResourceArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SearchInResourceArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SearchInResource in the Page domain.
func (a *SearchInResourceArgs) MarshalJSON() ([]byte, error) {
	type Copy SearchInResourceArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SearchInResourceReply represents the return values for SearchInResource in the Page domain.
type SearchInResourceReply struct {
	Result []debugger.SearchMatch `json:"result"` // List of search matches.
}

// SearchInResourceReply returns whether or not the FrameID matches the reply value for SearchInResource in the Page domain.
func (a *SearchInResourceReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SearchInResourceReply", err)
	}
	return true
}

// SearchInResourceReply returns the FrameID value for SearchInResource in the Page domain.
func (a *SearchInResourceReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SearchInResource in the Page domain.
func (a *SearchInResourceReply) UnmarshalJSON(b []byte) error {
	type Copy SearchInResourceReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SearchInResourceReply(*c)
	return nil
}

// SetAdBlockingEnabledArgs represents the arguments for SetAdBlockingEnabled in the Page domain.
type SetAdBlockingEnabledArgs struct {
	Enabled bool `json:"enabled"` // Whether to block ads.
}

// Unmarshal the byte array into a return value for SetAdBlockingEnabled in the Page domain.
func (a *SetAdBlockingEnabledArgs) UnmarshalJSON(b []byte) error {
	type Copy SetAdBlockingEnabledArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetAdBlockingEnabledArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetAdBlockingEnabled in the Page domain.
func (a *SetAdBlockingEnabledArgs) MarshalJSON() ([]byte, error) {
	type Copy SetAdBlockingEnabledArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetAdBlockingEnabledReply represents the return values for SetAdBlockingEnabled in the Page domain.
type SetAdBlockingEnabledReply struct {
}

// SetAdBlockingEnabledReply returns whether or not the FrameID matches the reply value for SetAdBlockingEnabled in the Page domain.
func (a *SetAdBlockingEnabledReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetAdBlockingEnabledReply", err)
	}
	return true
}

// SetAdBlockingEnabledReply returns the FrameID value for SetAdBlockingEnabled in the Page domain.
func (a *SetAdBlockingEnabledReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetAdBlockingEnabled in the Page domain.
func (a *SetAdBlockingEnabledReply) UnmarshalJSON(b []byte) error {
	type Copy SetAdBlockingEnabledReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetAdBlockingEnabledReply(*c)
	return nil
}

// SetBypassCSPArgs represents the arguments for SetBypassCSP in the Page domain.
type SetBypassCSPArgs struct {
	Enabled bool `json:"enabled"` // Whether to bypass page CSP.
}

// Unmarshal the byte array into a return value for SetBypassCSP in the Page domain.
func (a *SetBypassCSPArgs) UnmarshalJSON(b []byte) error {
	type Copy SetBypassCSPArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetBypassCSPArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetBypassCSP in the Page domain.
func (a *SetBypassCSPArgs) MarshalJSON() ([]byte, error) {
	type Copy SetBypassCSPArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetBypassCSPReply represents the return values for SetBypassCSP in the Page domain.
type SetBypassCSPReply struct {
}

// SetBypassCSPReply returns whether or not the FrameID matches the reply value for SetBypassCSP in the Page domain.
func (a *SetBypassCSPReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetBypassCSPReply", err)
	}
	return true
}

// SetBypassCSPReply returns the FrameID value for SetBypassCSP in the Page domain.
func (a *SetBypassCSPReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetBypassCSP in the Page domain.
func (a *SetBypassCSPReply) UnmarshalJSON(b []byte) error {
	type Copy SetBypassCSPReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetBypassCSPReply(*c)
	return nil
}

// SetFontFamiliesArgs represents the arguments for SetFontFamilies in the Page domain.
type SetFontFamiliesArgs struct {
	FontFamilies FontFamilies `json:"fontFamilies"` // Specifies font families to set. If a font family is not specified, it won't be changed.
}

// Unmarshal the byte array into a return value for SetFontFamilies in the Page domain.
func (a *SetFontFamiliesArgs) UnmarshalJSON(b []byte) error {
	type Copy SetFontFamiliesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetFontFamiliesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetFontFamilies in the Page domain.
func (a *SetFontFamiliesArgs) MarshalJSON() ([]byte, error) {
	type Copy SetFontFamiliesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetFontFamiliesReply represents the return values for SetFontFamilies in the Page domain.
type SetFontFamiliesReply struct {
}

// SetFontFamiliesReply returns whether or not the FrameID matches the reply value for SetFontFamilies in the Page domain.
func (a *SetFontFamiliesReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetFontFamiliesReply", err)
	}
	return true
}

// SetFontFamiliesReply returns the FrameID value for SetFontFamilies in the Page domain.
func (a *SetFontFamiliesReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetFontFamilies in the Page domain.
func (a *SetFontFamiliesReply) UnmarshalJSON(b []byte) error {
	type Copy SetFontFamiliesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetFontFamiliesReply(*c)
	return nil
}

// SetFontSizesArgs represents the arguments for SetFontSizes in the Page domain.
type SetFontSizesArgs struct {
	FontSizes FontSizes `json:"fontSizes"` // Specifies font sizes to set. If a font size is not specified, it won't be changed.
}

// Unmarshal the byte array into a return value for SetFontSizes in the Page domain.
func (a *SetFontSizesArgs) UnmarshalJSON(b []byte) error {
	type Copy SetFontSizesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetFontSizesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetFontSizes in the Page domain.
func (a *SetFontSizesArgs) MarshalJSON() ([]byte, error) {
	type Copy SetFontSizesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetFontSizesReply represents the return values for SetFontSizes in the Page domain.
type SetFontSizesReply struct {
}

// SetFontSizesReply returns whether or not the FrameID matches the reply value for SetFontSizes in the Page domain.
func (a *SetFontSizesReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetFontSizesReply", err)
	}
	return true
}

// SetFontSizesReply returns the FrameID value for SetFontSizes in the Page domain.
func (a *SetFontSizesReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetFontSizes in the Page domain.
func (a *SetFontSizesReply) UnmarshalJSON(b []byte) error {
	type Copy SetFontSizesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetFontSizesReply(*c)
	return nil
}

// SetDocumentContentArgs represents the arguments for SetDocumentContent in the Page domain.
type SetDocumentContentArgs struct {
	FrameID shared.FrameID `json:"frameId"` // Frame id to set HTML for.
	HTML    string         `json:"html"`    // HTML content to set.
}

// Unmarshal the byte array into a return value for SetDocumentContent in the Page domain.
func (a *SetDocumentContentArgs) UnmarshalJSON(b []byte) error {
	type Copy SetDocumentContentArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDocumentContentArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetDocumentContent in the Page domain.
func (a *SetDocumentContentArgs) MarshalJSON() ([]byte, error) {
	type Copy SetDocumentContentArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetDocumentContentReply represents the return values for SetDocumentContent in the Page domain.
type SetDocumentContentReply struct {
}

// SetDocumentContentReply returns whether or not the FrameID matches the reply value for SetDocumentContent in the Page domain.
func (a *SetDocumentContentReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetDocumentContentReply", err)
	}
	return true
}

// SetDocumentContentReply returns the FrameID value for SetDocumentContent in the Page domain.
func (a *SetDocumentContentReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetDocumentContent in the Page domain.
func (a *SetDocumentContentReply) UnmarshalJSON(b []byte) error {
	type Copy SetDocumentContentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDocumentContentReply(*c)
	return nil
}

// SetDownloadBehaviorArgs represents the arguments for SetDownloadBehavior in the Page domain.
type SetDownloadBehaviorArgs struct {
	// Behavior Whether to allow all or deny all download requests, or use
	// default Chrome behavior if available (otherwise deny).
	//
	// Values: "deny", "allow", "default".
	Behavior     string `json:"behavior"`
	DownloadPath string `json:"downloadPath,omitempty"` // The default path to save downloaded files to. This is required if behavior is set to 'allow'
}

// Unmarshal the byte array into a return value for SetDownloadBehavior in the Page domain.
func (a *SetDownloadBehaviorArgs) UnmarshalJSON(b []byte) error {
	type Copy SetDownloadBehaviorArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDownloadBehaviorArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetDownloadBehavior in the Page domain.
func (a *SetDownloadBehaviorArgs) MarshalJSON() ([]byte, error) {
	type Copy SetDownloadBehaviorArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetDownloadBehaviorReply represents the return values for SetDownloadBehavior in the Page domain.
type SetDownloadBehaviorReply struct {
}

// SetDownloadBehaviorReply returns whether or not the FrameID matches the reply value for SetDownloadBehavior in the Page domain.
func (a *SetDownloadBehaviorReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetDownloadBehaviorReply", err)
	}
	return true
}

// SetDownloadBehaviorReply returns the FrameID value for SetDownloadBehavior in the Page domain.
func (a *SetDownloadBehaviorReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetDownloadBehavior in the Page domain.
func (a *SetDownloadBehaviorReply) UnmarshalJSON(b []byte) error {
	type Copy SetDownloadBehaviorReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDownloadBehaviorReply(*c)
	return nil
}

// SetLifecycleEventsEnabledArgs represents the arguments for SetLifecycleEventsEnabled in the Page domain.
type SetLifecycleEventsEnabledArgs struct {
	Enabled bool `json:"enabled"` // If true, starts emitting lifecycle events.
}

// Unmarshal the byte array into a return value for SetLifecycleEventsEnabled in the Page domain.
func (a *SetLifecycleEventsEnabledArgs) UnmarshalJSON(b []byte) error {
	type Copy SetLifecycleEventsEnabledArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetLifecycleEventsEnabledArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetLifecycleEventsEnabled in the Page domain.
func (a *SetLifecycleEventsEnabledArgs) MarshalJSON() ([]byte, error) {
	type Copy SetLifecycleEventsEnabledArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetLifecycleEventsEnabledReply represents the return values for SetLifecycleEventsEnabled in the Page domain.
type SetLifecycleEventsEnabledReply struct {
}

// SetLifecycleEventsEnabledReply returns whether or not the FrameID matches the reply value for SetLifecycleEventsEnabled in the Page domain.
func (a *SetLifecycleEventsEnabledReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetLifecycleEventsEnabledReply", err)
	}
	return true
}

// SetLifecycleEventsEnabledReply returns the FrameID value for SetLifecycleEventsEnabled in the Page domain.
func (a *SetLifecycleEventsEnabledReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetLifecycleEventsEnabled in the Page domain.
func (a *SetLifecycleEventsEnabledReply) UnmarshalJSON(b []byte) error {
	type Copy SetLifecycleEventsEnabledReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetLifecycleEventsEnabledReply(*c)
	return nil
}

// StartScreencastArgs represents the arguments for StartScreencast in the Page domain.
type StartScreencastArgs struct {
	// Format Image compression format.
	//
	// Values: "jpeg", "png".
	Format        string `json:"format,omitempty"`
	Quality       int    `json:"quality,omitempty"`       // Compression quality from range [0..100].
	MaxWidth      int    `json:"maxWidth,omitempty"`      // Maximum screenshot width.
	MaxHeight     int    `json:"maxHeight,omitempty"`     // Maximum screenshot height.
	EveryNthFrame int    `json:"everyNthFrame,omitempty"` // Send every n-th frame.
}

// Unmarshal the byte array into a return value for StartScreencast in the Page domain.
func (a *StartScreencastArgs) UnmarshalJSON(b []byte) error {
	type Copy StartScreencastArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartScreencastArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartScreencast in the Page domain.
func (a *StartScreencastArgs) MarshalJSON() ([]byte, error) {
	type Copy StartScreencastArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartScreencastReply represents the return values for StartScreencast in the Page domain.
type StartScreencastReply struct {
}

// StartScreencastReply returns whether or not the FrameID matches the reply value for StartScreencast in the Page domain.
func (a *StartScreencastReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StartScreencastReply", err)
	}
	return true
}

// StartScreencastReply returns the FrameID value for StartScreencast in the Page domain.
func (a *StartScreencastReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StartScreencast in the Page domain.
func (a *StartScreencastReply) UnmarshalJSON(b []byte) error {
	type Copy StartScreencastReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartScreencastReply(*c)
	return nil
}

// StopLoadingArgs represents the arguments for StopLoading in the Page domain.
type StopLoadingArgs struct {
}

// Unmarshal the byte array into a return value for StopLoading in the Page domain.
func (a *StopLoadingArgs) UnmarshalJSON(b []byte) error {
	type Copy StopLoadingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopLoadingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopLoading in the Page domain.
func (a *StopLoadingArgs) MarshalJSON() ([]byte, error) {
	type Copy StopLoadingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopLoadingReply represents the return values for StopLoading in the Page domain.
type StopLoadingReply struct {
}

// StopLoadingReply returns whether or not the FrameID matches the reply value for StopLoading in the Page domain.
func (a *StopLoadingReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StopLoadingReply", err)
	}
	return true
}

// StopLoadingReply returns the FrameID value for StopLoading in the Page domain.
func (a *StopLoadingReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StopLoading in the Page domain.
func (a *StopLoadingReply) UnmarshalJSON(b []byte) error {
	type Copy StopLoadingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopLoadingReply(*c)
	return nil
}

// CrashArgs represents the arguments for Crash in the Page domain.
type CrashArgs struct {
}

// Unmarshal the byte array into a return value for Crash in the Page domain.
func (a *CrashArgs) UnmarshalJSON(b []byte) error {
	type Copy CrashArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CrashArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Crash in the Page domain.
func (a *CrashArgs) MarshalJSON() ([]byte, error) {
	type Copy CrashArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CrashReply represents the return values for Crash in the Page domain.
type CrashReply struct {
}

// CrashReply returns whether or not the FrameID matches the reply value for Crash in the Page domain.
func (a *CrashReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: CrashReply", err)
	}
	return true
}

// CrashReply returns the FrameID value for Crash in the Page domain.
func (a *CrashReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Crash in the Page domain.
func (a *CrashReply) UnmarshalJSON(b []byte) error {
	type Copy CrashReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CrashReply(*c)
	return nil
}

// CloseArgs represents the arguments for Close in the Page domain.
type CloseArgs struct {
}

// Unmarshal the byte array into a return value for Close in the Page domain.
func (a *CloseArgs) UnmarshalJSON(b []byte) error {
	type Copy CloseArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CloseArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Close in the Page domain.
func (a *CloseArgs) MarshalJSON() ([]byte, error) {
	type Copy CloseArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CloseReply represents the return values for Close in the Page domain.
type CloseReply struct {
}

// CloseReply returns whether or not the FrameID matches the reply value for Close in the Page domain.
func (a *CloseReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: CloseReply", err)
	}
	return true
}

// CloseReply returns the FrameID value for Close in the Page domain.
func (a *CloseReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Close in the Page domain.
func (a *CloseReply) UnmarshalJSON(b []byte) error {
	type Copy CloseReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CloseReply(*c)
	return nil
}

// SetWebLifecycleStateArgs represents the arguments for SetWebLifecycleState in the Page domain.
type SetWebLifecycleStateArgs struct {
	// State Target lifecycle state
	//
	// Values: "frozen", "active".
	State string `json:"state"`
}

// Unmarshal the byte array into a return value for SetWebLifecycleState in the Page domain.
func (a *SetWebLifecycleStateArgs) UnmarshalJSON(b []byte) error {
	type Copy SetWebLifecycleStateArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetWebLifecycleStateArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetWebLifecycleState in the Page domain.
func (a *SetWebLifecycleStateArgs) MarshalJSON() ([]byte, error) {
	type Copy SetWebLifecycleStateArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetWebLifecycleStateReply represents the return values for SetWebLifecycleState in the Page domain.
type SetWebLifecycleStateReply struct {
}

// SetWebLifecycleStateReply returns whether or not the FrameID matches the reply value for SetWebLifecycleState in the Page domain.
func (a *SetWebLifecycleStateReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetWebLifecycleStateReply", err)
	}
	return true
}

// SetWebLifecycleStateReply returns the FrameID value for SetWebLifecycleState in the Page domain.
func (a *SetWebLifecycleStateReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetWebLifecycleState in the Page domain.
func (a *SetWebLifecycleStateReply) UnmarshalJSON(b []byte) error {
	type Copy SetWebLifecycleStateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetWebLifecycleStateReply(*c)
	return nil
}

// StopScreencastArgs represents the arguments for StopScreencast in the Page domain.
type StopScreencastArgs struct {
}

// Unmarshal the byte array into a return value for StopScreencast in the Page domain.
func (a *StopScreencastArgs) UnmarshalJSON(b []byte) error {
	type Copy StopScreencastArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopScreencastArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopScreencast in the Page domain.
func (a *StopScreencastArgs) MarshalJSON() ([]byte, error) {
	type Copy StopScreencastArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopScreencastReply represents the return values for StopScreencast in the Page domain.
type StopScreencastReply struct {
}

// StopScreencastReply returns whether or not the FrameID matches the reply value for StopScreencast in the Page domain.
func (a *StopScreencastReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StopScreencastReply", err)
	}
	return true
}

// StopScreencastReply returns the FrameID value for StopScreencast in the Page domain.
func (a *StopScreencastReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StopScreencast in the Page domain.
func (a *StopScreencastReply) UnmarshalJSON(b []byte) error {
	type Copy StopScreencastReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopScreencastReply(*c)
	return nil
}

// SetProduceCompilationCacheArgs represents the arguments for SetProduceCompilationCache in the Page domain.
type SetProduceCompilationCacheArgs struct {
	Enabled bool `json:"enabled"` // No description.
}

// Unmarshal the byte array into a return value for SetProduceCompilationCache in the Page domain.
func (a *SetProduceCompilationCacheArgs) UnmarshalJSON(b []byte) error {
	type Copy SetProduceCompilationCacheArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetProduceCompilationCacheArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetProduceCompilationCache in the Page domain.
func (a *SetProduceCompilationCacheArgs) MarshalJSON() ([]byte, error) {
	type Copy SetProduceCompilationCacheArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetProduceCompilationCacheReply represents the return values for SetProduceCompilationCache in the Page domain.
type SetProduceCompilationCacheReply struct {
}

// SetProduceCompilationCacheReply returns whether or not the FrameID matches the reply value for SetProduceCompilationCache in the Page domain.
func (a *SetProduceCompilationCacheReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetProduceCompilationCacheReply", err)
	}
	return true
}

// SetProduceCompilationCacheReply returns the FrameID value for SetProduceCompilationCache in the Page domain.
func (a *SetProduceCompilationCacheReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetProduceCompilationCache in the Page domain.
func (a *SetProduceCompilationCacheReply) UnmarshalJSON(b []byte) error {
	type Copy SetProduceCompilationCacheReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetProduceCompilationCacheReply(*c)
	return nil
}

// AddCompilationCacheArgs represents the arguments for AddCompilationCache in the Page domain.
type AddCompilationCacheArgs struct {
	URL  string `json:"url"`  // No description.
	Data []byte `json:"data"` // Base64-encoded data
}

// Unmarshal the byte array into a return value for AddCompilationCache in the Page domain.
func (a *AddCompilationCacheArgs) UnmarshalJSON(b []byte) error {
	type Copy AddCompilationCacheArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddCompilationCacheArgs(*c)
	return nil
}

// Marshall the byte array into a return value for AddCompilationCache in the Page domain.
func (a *AddCompilationCacheArgs) MarshalJSON() ([]byte, error) {
	type Copy AddCompilationCacheArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// AddCompilationCacheReply represents the return values for AddCompilationCache in the Page domain.
type AddCompilationCacheReply struct {
}

// AddCompilationCacheReply returns whether or not the FrameID matches the reply value for AddCompilationCache in the Page domain.
func (a *AddCompilationCacheReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: AddCompilationCacheReply", err)
	}
	return true
}

// AddCompilationCacheReply returns the FrameID value for AddCompilationCache in the Page domain.
func (a *AddCompilationCacheReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for AddCompilationCache in the Page domain.
func (a *AddCompilationCacheReply) UnmarshalJSON(b []byte) error {
	type Copy AddCompilationCacheReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddCompilationCacheReply(*c)
	return nil
}

// ClearCompilationCacheArgs represents the arguments for ClearCompilationCache in the Page domain.
type ClearCompilationCacheArgs struct {
}

// Unmarshal the byte array into a return value for ClearCompilationCache in the Page domain.
func (a *ClearCompilationCacheArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearCompilationCacheArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearCompilationCacheArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ClearCompilationCache in the Page domain.
func (a *ClearCompilationCacheArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearCompilationCacheArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearCompilationCacheReply represents the return values for ClearCompilationCache in the Page domain.
type ClearCompilationCacheReply struct {
}

// ClearCompilationCacheReply returns whether or not the FrameID matches the reply value for ClearCompilationCache in the Page domain.
func (a *ClearCompilationCacheReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ClearCompilationCacheReply", err)
	}
	return true
}

// ClearCompilationCacheReply returns the FrameID value for ClearCompilationCache in the Page domain.
func (a *ClearCompilationCacheReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for ClearCompilationCache in the Page domain.
func (a *ClearCompilationCacheReply) UnmarshalJSON(b []byte) error {
	type Copy ClearCompilationCacheReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearCompilationCacheReply(*c)
	return nil
}
