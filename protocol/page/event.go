// Code generated by cdpgen. DO NOT EDIT.

package page

import (
	"encoding/json"
	"log"

	"github.com/4ydx/cdp/protocol"
	"github.com/4ydx/cdp/protocol/network"
	"github.com/4ydx/cdp/protocol/runtime"
)

const (
	EventPageDomContentEventFired            = "Page.domContentEventFired"
	EventPageFrameAttached                   = "Page.frameAttached"
	EventPageFrameClearedScheduledNavigation = "Page.frameClearedScheduledNavigation"
	EventPageFrameDetached                   = "Page.frameDetached"
	EventPageFrameNavigated                  = "Page.frameNavigated"
	EventPageFrameResized                    = "Page.frameResized"
	EventPageFrameScheduledNavigation        = "Page.frameScheduledNavigation"
	EventPageFrameStartedLoading             = "Page.frameStartedLoading"
	EventPageFrameStoppedLoading             = "Page.frameStoppedLoading"
	EventPageInterstitialHidden              = "Page.interstitialHidden"
	EventPageInterstitialShown               = "Page.interstitialShown"
	EventPageJavascriptDialogClosed          = "Page.javascriptDialogClosed"
	EventPageJavascriptDialogOpening         = "Page.javascriptDialogOpening"
	EventPageLifecycleEvent                  = "Page.lifecycleEvent"
	EventPageLoadEventFired                  = "Page.loadEventFired"
	EventPageNavigatedWithinDocument         = "Page.navigatedWithinDocument"
	EventPageScreencastFrame                 = "Page.screencastFrame"
	EventPageScreencastVisibilityChanged     = "Page.screencastVisibilityChanged"
	EventPageWindowOpen                      = "Page.windowOpen"
	EventPageCompilationCacheProduced        = "Page.compilationCacheProduced"
)

var EventConstants = map[string]json.Unmarshaler{
	EventPageDomContentEventFired:            &DOMContentEventFiredReply{},
	EventPageFrameAttached:                   &FrameAttachedReply{},
	EventPageFrameClearedScheduledNavigation: &FrameClearedScheduledNavigationReply{},
	EventPageFrameDetached:                   &FrameDetachedReply{},
	EventPageFrameNavigated:                  &FrameNavigatedReply{},
	EventPageFrameResized:                    &FrameResizedReply{},
	EventPageFrameScheduledNavigation:        &FrameScheduledNavigationReply{},
	EventPageFrameStartedLoading:             &FrameStartedLoadingReply{},
	EventPageFrameStoppedLoading:             &FrameStoppedLoadingReply{},
	EventPageInterstitialHidden:              &InterstitialHiddenReply{},
	EventPageInterstitialShown:               &InterstitialShownReply{},
	EventPageJavascriptDialogClosed:          &JavascriptDialogClosedReply{},
	EventPageJavascriptDialogOpening:         &JavascriptDialogOpeningReply{},
	EventPageLifecycleEvent:                  &LifecycleEventReply{},
	EventPageLoadEventFired:                  &LoadEventFiredReply{},
	EventPageNavigatedWithinDocument:         &NavigatedWithinDocumentReply{},
	EventPageScreencastFrame:                 &ScreencastFrameReply{},
	EventPageScreencastVisibilityChanged:     &ScreencastVisibilityChangedReply{},
	EventPageWindowOpen:                      &WindowOpenReply{},
	EventPageCompilationCacheProduced:        &CompilationCacheProducedReply{},
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	return e, ok
}

// DOMContentEventFiredReply is the reply for DOMContentEventFired events.
type DOMContentEventFiredReply struct {
	Timestamp network.MonotonicTime `json:"timestamp"` // No description.
}

// Unmarshal the byte array into a return value for DOMContentEventFired in the Page domain.
func (a *DOMContentEventFiredReply) UnmarshalJSON(b []byte) error {
	type Copy DOMContentEventFiredReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DOMContentEventFiredReply(*c)
	return nil
}

// DOMContentEventFiredReply returns whether or not the FrameID matches the reply value for DOMContentEventFired in the DOMContentEventFired domain.
func (a *DOMContentEventFiredReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// DOMContentEventFiredReply returns the FrameID for DOMContentEventFired in the DOMContentEventFired domain.
func (a *DOMContentEventFiredReply) GetFrameID() string {
	return ""
}

// FrameAttachedReply is the reply for FrameAttached events.
type FrameAttachedReply struct {
	FrameID       shared.FrameID     `json:"frameId"`         // Id of the frame that has been attached.
	ParentFrameID shared.FrameID     `json:"parentFrameId"`   // Parent frame identifier.
	Stack         runtime.StackTrace `json:"stack,omitempty"` // JavaScript stack trace of when frame was attached, only set if frame initiated from script.
}

// Unmarshal the byte array into a return value for FrameAttached in the Page domain.
func (a *FrameAttachedReply) UnmarshalJSON(b []byte) error {
	type Copy FrameAttachedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FrameAttachedReply(*c)
	return nil
}

// FrameAttachedReply returns whether or not the FrameID matches the reply value for FrameAttached in the FrameAttached domain.
func (a *FrameAttachedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: FrameAttachedReply", err)
	}
	return a.FrameID == shared.FrameID(frameID)
}

// FrameAttachedReply returns the FrameID for FrameAttached in the FrameAttached domain.
func (a *FrameAttachedReply) GetFrameID() string {
	return string(a.FrameID)
}

// FrameClearedScheduledNavigationReply is the reply for FrameClearedScheduledNavigation events.
type FrameClearedScheduledNavigationReply struct {
	FrameID shared.FrameID `json:"frameId"` // Id of the frame that has cleared its scheduled navigation.
}

// Unmarshal the byte array into a return value for FrameClearedScheduledNavigation in the Page domain.
func (a *FrameClearedScheduledNavigationReply) UnmarshalJSON(b []byte) error {
	type Copy FrameClearedScheduledNavigationReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FrameClearedScheduledNavigationReply(*c)
	return nil
}

// FrameClearedScheduledNavigationReply returns whether or not the FrameID matches the reply value for FrameClearedScheduledNavigation in the FrameClearedScheduledNavigation domain.
func (a *FrameClearedScheduledNavigationReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: FrameClearedScheduledNavigationReply", err)
	}
	return a.FrameID == shared.FrameID(frameID)
}

// FrameClearedScheduledNavigationReply returns the FrameID for FrameClearedScheduledNavigation in the FrameClearedScheduledNavigation domain.
func (a *FrameClearedScheduledNavigationReply) GetFrameID() string {
	return string(a.FrameID)
}

// FrameDetachedReply is the reply for FrameDetached events.
type FrameDetachedReply struct {
	FrameID shared.FrameID `json:"frameId"` // Id of the frame that has been detached.
}

// Unmarshal the byte array into a return value for FrameDetached in the Page domain.
func (a *FrameDetachedReply) UnmarshalJSON(b []byte) error {
	type Copy FrameDetachedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FrameDetachedReply(*c)
	return nil
}

// FrameDetachedReply returns whether or not the FrameID matches the reply value for FrameDetached in the FrameDetached domain.
func (a *FrameDetachedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: FrameDetachedReply", err)
	}
	return a.FrameID == shared.FrameID(frameID)
}

// FrameDetachedReply returns the FrameID for FrameDetached in the FrameDetached domain.
func (a *FrameDetachedReply) GetFrameID() string {
	return string(a.FrameID)
}

// FrameNavigatedReply is the reply for FrameNavigated events.
type FrameNavigatedReply struct {
	Frame Frame `json:"frame"` // Frame object.
}

// Unmarshal the byte array into a return value for FrameNavigated in the Page domain.
func (a *FrameNavigatedReply) UnmarshalJSON(b []byte) error {
	type Copy FrameNavigatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FrameNavigatedReply(*c)
	return nil
}

// FrameNavigatedReply returns whether or not the FrameID matches the reply value for FrameNavigated in the FrameNavigated domain.
func (a *FrameNavigatedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: FrameNavigatedReply", err)
	}
	return a.Frame.ID == shared.FrameID(frameID)
}

// FrameNavigatedReply returns the FrameID for FrameNavigated in the FrameNavigated domain.
func (a *FrameNavigatedReply) GetFrameID() string {
	return string(a.Frame.ID)
}

// FrameResizedReply is the reply for FrameResized events.
type FrameResizedReply struct {
}

// Unmarshal the byte array into a return value for FrameResized in the Page domain.
func (a *FrameResizedReply) UnmarshalJSON(b []byte) error {
	type Copy FrameResizedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FrameResizedReply(*c)
	return nil
}

// FrameResizedReply returns whether or not the FrameID matches the reply value for FrameResized in the FrameResized domain.
func (a *FrameResizedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// FrameResizedReply returns the FrameID for FrameResized in the FrameResized domain.
func (a *FrameResizedReply) GetFrameID() string {
	return ""
}

// FrameScheduledNavigationReply is the reply for FrameScheduledNavigation events.
type FrameScheduledNavigationReply struct {
	FrameID shared.FrameID `json:"frameId"` // Id of the frame that has scheduled a navigation.
	Delay   float64        `json:"delay"`   // Delay (in seconds) until the navigation is scheduled to begin. The navigation is not guaranteed to start.
	// Reason The reason for the navigation.
	//
	// Values: "formSubmissionGet", "formSubmissionPost", "httpHeaderRefresh", "scriptInitiated", "metaTagRefresh", "pageBlockInterstitial", "reload".
	Reason string `json:"reason"`
	URL    string `json:"url"` // The destination URL for the scheduled navigation.
}

// Unmarshal the byte array into a return value for FrameScheduledNavigation in the Page domain.
func (a *FrameScheduledNavigationReply) UnmarshalJSON(b []byte) error {
	type Copy FrameScheduledNavigationReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FrameScheduledNavigationReply(*c)
	return nil
}

// FrameScheduledNavigationReply returns whether or not the FrameID matches the reply value for FrameScheduledNavigation in the FrameScheduledNavigation domain.
func (a *FrameScheduledNavigationReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: FrameScheduledNavigationReply", err)
	}
	return a.FrameID == shared.FrameID(frameID)
}

// FrameScheduledNavigationReply returns the FrameID for FrameScheduledNavigation in the FrameScheduledNavigation domain.
func (a *FrameScheduledNavigationReply) GetFrameID() string {
	return string(a.FrameID)
}

// FrameStartedLoadingReply is the reply for FrameStartedLoading events.
type FrameStartedLoadingReply struct {
	FrameID shared.FrameID `json:"frameId"` // Id of the frame that has started loading.
}

// Unmarshal the byte array into a return value for FrameStartedLoading in the Page domain.
func (a *FrameStartedLoadingReply) UnmarshalJSON(b []byte) error {
	type Copy FrameStartedLoadingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FrameStartedLoadingReply(*c)
	return nil
}

// FrameStartedLoadingReply returns whether or not the FrameID matches the reply value for FrameStartedLoading in the FrameStartedLoading domain.
func (a *FrameStartedLoadingReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: FrameStartedLoadingReply", err)
	}
	return a.FrameID == shared.FrameID(frameID)
}

// FrameStartedLoadingReply returns the FrameID for FrameStartedLoading in the FrameStartedLoading domain.
func (a *FrameStartedLoadingReply) GetFrameID() string {
	return string(a.FrameID)
}

// FrameStoppedLoadingReply is the reply for FrameStoppedLoading events.
type FrameStoppedLoadingReply struct {
	FrameID shared.FrameID `json:"frameId"` // Id of the frame that has stopped loading.
}

// Unmarshal the byte array into a return value for FrameStoppedLoading in the Page domain.
func (a *FrameStoppedLoadingReply) UnmarshalJSON(b []byte) error {
	type Copy FrameStoppedLoadingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FrameStoppedLoadingReply(*c)
	return nil
}

// FrameStoppedLoadingReply returns whether or not the FrameID matches the reply value for FrameStoppedLoading in the FrameStoppedLoading domain.
func (a *FrameStoppedLoadingReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: FrameStoppedLoadingReply", err)
	}
	return a.FrameID == shared.FrameID(frameID)
}

// FrameStoppedLoadingReply returns the FrameID for FrameStoppedLoading in the FrameStoppedLoading domain.
func (a *FrameStoppedLoadingReply) GetFrameID() string {
	return string(a.FrameID)
}

// InterstitialHiddenReply is the reply for InterstitialHidden events.
type InterstitialHiddenReply struct {
}

// Unmarshal the byte array into a return value for InterstitialHidden in the Page domain.
func (a *InterstitialHiddenReply) UnmarshalJSON(b []byte) error {
	type Copy InterstitialHiddenReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = InterstitialHiddenReply(*c)
	return nil
}

// InterstitialHiddenReply returns whether or not the FrameID matches the reply value for InterstitialHidden in the InterstitialHidden domain.
func (a *InterstitialHiddenReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// InterstitialHiddenReply returns the FrameID for InterstitialHidden in the InterstitialHidden domain.
func (a *InterstitialHiddenReply) GetFrameID() string {
	return ""
}

// InterstitialShownReply is the reply for InterstitialShown events.
type InterstitialShownReply struct {
}

// Unmarshal the byte array into a return value for InterstitialShown in the Page domain.
func (a *InterstitialShownReply) UnmarshalJSON(b []byte) error {
	type Copy InterstitialShownReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = InterstitialShownReply(*c)
	return nil
}

// InterstitialShownReply returns whether or not the FrameID matches the reply value for InterstitialShown in the InterstitialShown domain.
func (a *InterstitialShownReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// InterstitialShownReply returns the FrameID for InterstitialShown in the InterstitialShown domain.
func (a *InterstitialShownReply) GetFrameID() string {
	return ""
}

// JavascriptDialogClosedReply is the reply for JavascriptDialogClosed events.
type JavascriptDialogClosedReply struct {
	Result    bool   `json:"result"`    // Whether dialog was confirmed.
	UserInput string `json:"userInput"` // User input in case of prompt.
}

// Unmarshal the byte array into a return value for JavascriptDialogClosed in the Page domain.
func (a *JavascriptDialogClosedReply) UnmarshalJSON(b []byte) error {
	type Copy JavascriptDialogClosedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = JavascriptDialogClosedReply(*c)
	return nil
}

// JavascriptDialogClosedReply returns whether or not the FrameID matches the reply value for JavascriptDialogClosed in the JavascriptDialogClosed domain.
func (a *JavascriptDialogClosedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// JavascriptDialogClosedReply returns the FrameID for JavascriptDialogClosed in the JavascriptDialogClosed domain.
func (a *JavascriptDialogClosedReply) GetFrameID() string {
	return ""
}

// JavascriptDialogOpeningReply is the reply for JavascriptDialogOpening events.
type JavascriptDialogOpeningReply struct {
	URL               string     `json:"url"`                     // Frame url.
	Message           string     `json:"message"`                 // Message that will be displayed by the dialog.
	Type              DialogType `json:"type"`                    // Dialog type.
	HasBrowserHandler bool       `json:"hasBrowserHandler"`       // True iff browser is capable showing or acting on the given dialog. When browser has no dialog handler for given target, calling alert while Page domain is engaged will stall the page execution. Execution can be resumed via calling Page.handleJavaScriptDialog.
	DefaultPrompt     string     `json:"defaultPrompt,omitempty"` // Default dialog prompt.
}

// Unmarshal the byte array into a return value for JavascriptDialogOpening in the Page domain.
func (a *JavascriptDialogOpeningReply) UnmarshalJSON(b []byte) error {
	type Copy JavascriptDialogOpeningReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = JavascriptDialogOpeningReply(*c)
	return nil
}

// JavascriptDialogOpeningReply returns whether or not the FrameID matches the reply value for JavascriptDialogOpening in the JavascriptDialogOpening domain.
func (a *JavascriptDialogOpeningReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// JavascriptDialogOpeningReply returns the FrameID for JavascriptDialogOpening in the JavascriptDialogOpening domain.
func (a *JavascriptDialogOpeningReply) GetFrameID() string {
	return ""
}

// LifecycleEventReply is the reply for LifecycleEvent events.
type LifecycleEventReply struct {
	FrameID   shared.FrameID        `json:"frameId"`   // Id of the frame.
	LoaderID  network.LoaderID      `json:"loaderId"`  // Loader identifier. Empty string if the request is fetched from worker.
	Name      string                `json:"name"`      // No description.
	Timestamp network.MonotonicTime `json:"timestamp"` // No description.
}

// Unmarshal the byte array into a return value for LifecycleEvent in the Page domain.
func (a *LifecycleEventReply) UnmarshalJSON(b []byte) error {
	type Copy LifecycleEventReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = LifecycleEventReply(*c)
	return nil
}

// LifecycleEventReply returns whether or not the FrameID matches the reply value for LifecycleEvent in the LifecycleEvent domain.
func (a *LifecycleEventReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: LifecycleEventReply", err)
	}
	return a.FrameID == shared.FrameID(frameID)
}

// LifecycleEventReply returns the FrameID for LifecycleEvent in the LifecycleEvent domain.
func (a *LifecycleEventReply) GetFrameID() string {
	return string(a.FrameID)
}

// LoadEventFiredReply is the reply for LoadEventFired events.
type LoadEventFiredReply struct {
	Timestamp network.MonotonicTime `json:"timestamp"` // No description.
}

// Unmarshal the byte array into a return value for LoadEventFired in the Page domain.
func (a *LoadEventFiredReply) UnmarshalJSON(b []byte) error {
	type Copy LoadEventFiredReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = LoadEventFiredReply(*c)
	return nil
}

// LoadEventFiredReply returns whether or not the FrameID matches the reply value for LoadEventFired in the LoadEventFired domain.
func (a *LoadEventFiredReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// LoadEventFiredReply returns the FrameID for LoadEventFired in the LoadEventFired domain.
func (a *LoadEventFiredReply) GetFrameID() string {
	return ""
}

// NavigatedWithinDocumentReply is the reply for NavigatedWithinDocument events.
type NavigatedWithinDocumentReply struct {
	FrameID shared.FrameID `json:"frameId"` // Id of the frame.
	URL     string         `json:"url"`     // Frame's new url.
}

// Unmarshal the byte array into a return value for NavigatedWithinDocument in the Page domain.
func (a *NavigatedWithinDocumentReply) UnmarshalJSON(b []byte) error {
	type Copy NavigatedWithinDocumentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NavigatedWithinDocumentReply(*c)
	return nil
}

// NavigatedWithinDocumentReply returns whether or not the FrameID matches the reply value for NavigatedWithinDocument in the NavigatedWithinDocument domain.
func (a *NavigatedWithinDocumentReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: NavigatedWithinDocumentReply", err)
	}
	return a.FrameID == shared.FrameID(frameID)
}

// NavigatedWithinDocumentReply returns the FrameID for NavigatedWithinDocument in the NavigatedWithinDocument domain.
func (a *NavigatedWithinDocumentReply) GetFrameID() string {
	return string(a.FrameID)
}

// ScreencastFrameReply is the reply for ScreencastFrame events.
type ScreencastFrameReply struct {
	Data      []byte                  `json:"data"`      // Base64-encoded compressed image.
	Metadata  ScreencastFrameMetadata `json:"metadata"`  // Screencast frame metadata.
	SessionID int                     `json:"sessionId"` // Frame number.
}

// Unmarshal the byte array into a return value for ScreencastFrame in the Page domain.
func (a *ScreencastFrameReply) UnmarshalJSON(b []byte) error {
	type Copy ScreencastFrameReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ScreencastFrameReply(*c)
	return nil
}

// ScreencastFrameReply returns whether or not the FrameID matches the reply value for ScreencastFrame in the ScreencastFrame domain.
func (a *ScreencastFrameReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// ScreencastFrameReply returns the FrameID for ScreencastFrame in the ScreencastFrame domain.
func (a *ScreencastFrameReply) GetFrameID() string {
	return ""
}

// ScreencastVisibilityChangedReply is the reply for ScreencastVisibilityChanged events.
type ScreencastVisibilityChangedReply struct {
	Visible bool `json:"visible"` // True if the page is visible.
}

// Unmarshal the byte array into a return value for ScreencastVisibilityChanged in the Page domain.
func (a *ScreencastVisibilityChangedReply) UnmarshalJSON(b []byte) error {
	type Copy ScreencastVisibilityChangedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ScreencastVisibilityChangedReply(*c)
	return nil
}

// ScreencastVisibilityChangedReply returns whether or not the FrameID matches the reply value for ScreencastVisibilityChanged in the ScreencastVisibilityChanged domain.
func (a *ScreencastVisibilityChangedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// ScreencastVisibilityChangedReply returns the FrameID for ScreencastVisibilityChanged in the ScreencastVisibilityChanged domain.
func (a *ScreencastVisibilityChangedReply) GetFrameID() string {
	return ""
}

// WindowOpenReply is the reply for WindowOpen events.
type WindowOpenReply struct {
	URL            string   `json:"url"`            // The URL for the new window.
	WindowName     string   `json:"windowName"`     // Window name.
	WindowFeatures []string `json:"windowFeatures"` // An array of enabled window features.
	UserGesture    bool     `json:"userGesture"`    // Whether or not it was triggered by user gesture.
}

// Unmarshal the byte array into a return value for WindowOpen in the Page domain.
func (a *WindowOpenReply) UnmarshalJSON(b []byte) error {
	type Copy WindowOpenReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = WindowOpenReply(*c)
	return nil
}

// WindowOpenReply returns whether or not the FrameID matches the reply value for WindowOpen in the WindowOpen domain.
func (a *WindowOpenReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// WindowOpenReply returns the FrameID for WindowOpen in the WindowOpen domain.
func (a *WindowOpenReply) GetFrameID() string {
	return ""
}

// CompilationCacheProducedReply is the reply for CompilationCacheProduced events.
type CompilationCacheProducedReply struct {
	URL  string `json:"url"`  // No description.
	Data []byte `json:"data"` // Base64-encoded data
}

// Unmarshal the byte array into a return value for CompilationCacheProduced in the Page domain.
func (a *CompilationCacheProducedReply) UnmarshalJSON(b []byte) error {
	type Copy CompilationCacheProducedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CompilationCacheProducedReply(*c)
	return nil
}

// CompilationCacheProducedReply returns whether or not the FrameID matches the reply value for CompilationCacheProduced in the CompilationCacheProduced domain.
func (a *CompilationCacheProducedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// CompilationCacheProducedReply returns the FrameID for CompilationCacheProduced in the CompilationCacheProduced domain.
func (a *CompilationCacheProducedReply) GetFrameID() string {
	return ""
}
