// Code generated by cdpgen. DO NOT EDIT.

package applicationcache

import (
	"encoding/json"
	"log"

	"github.com/4ydx/cdp/protocol"
)

const (
	EventApplicationCacheApplicationCacheStatusUpdated = "ApplicationCache.applicationCacheStatusUpdated"
	EventApplicationCacheNetworkStateUpdated           = "ApplicationCache.networkStateUpdated"
)

var EventConstants = map[string]json.Unmarshaler{
	EventApplicationCacheApplicationCacheStatusUpdated: &StatusUpdatedReply{},
	EventApplicationCacheNetworkStateUpdated:           &NetworkStateUpdatedReply{},
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	return e, ok
}

// StatusUpdatedReply is the reply for ApplicationCacheStatusUpdated events.
type StatusUpdatedReply struct {
	FrameID     shared.FrameID `json:"frameId"`     // Identifier of the frame containing document whose application cache updated status.
	ManifestURL string         `json:"manifestURL"` // Manifest URL.
	Status      int            `json:"status"`      // Updated application cache status.
}

// Unmarshal the byte array into a return value for ApplicationCacheStatusUpdated in the ApplicationCache domain.
func (a *StatusUpdatedReply) UnmarshalJSON(b []byte) error {
	type Copy StatusUpdatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StatusUpdatedReply(*c)
	return nil
}

// StatusUpdatedReply returns whether or not the FrameID matches the reply value for ApplicationCacheStatusUpdated in the ApplicationCacheStatusUpdated domain.
func (a *StatusUpdatedReply) MatchFrameID(frameID string, m []byte) bool {
	v := &StatusUpdatedReply{}
	err := v.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StatusUpdatedReply", err)
	}
	if v.FrameID != shared.FrameID(frameID) {
		return false
	}
	*a = *v
	return true
}

// StatusUpdatedReply returns the FrameID for ApplicationCacheStatusUpdated in the ApplicationCacheStatusUpdated domain.
func (a *StatusUpdatedReply) GetFrameID() string {
	return string(a.FrameID)
}

// NetworkStateUpdatedReply is the reply for NetworkStateUpdated events.
type NetworkStateUpdatedReply struct {
	IsNowOnline bool `json:"isNowOnline"` // No description.
}

// Unmarshal the byte array into a return value for NetworkStateUpdated in the ApplicationCache domain.
func (a *NetworkStateUpdatedReply) UnmarshalJSON(b []byte) error {
	type Copy NetworkStateUpdatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NetworkStateUpdatedReply(*c)
	return nil
}

// NetworkStateUpdatedReply returns whether or not the FrameID matches the reply value for NetworkStateUpdated in the NetworkStateUpdated domain.
func (a *NetworkStateUpdatedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: NetworkStateUpdated", err)
	}
	return true
}

// NetworkStateUpdatedReply returns the FrameID for NetworkStateUpdated in the NetworkStateUpdated domain.
func (a *NetworkStateUpdatedReply) GetFrameID() string {
	return ""
}
