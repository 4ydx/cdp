// Code generated by cdpgen. DO NOT EDIT.

package console

import (
	"encoding/json"
	"log"
)

const (
	CommandConsoleClearMessages = "Console.clearMessages"
	CommandConsoleDisable       = "Console.disable"
	CommandConsoleEnable        = "Console.enable"
)

// ClearMessagesArgs represents the arguments for ClearMessages in the Console domain.
type ClearMessagesArgs struct {
}

// Unmarshal the byte array into a return value for ClearMessages in the Console domain.
func (a *ClearMessagesArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearMessagesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearMessagesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ClearMessages in the Console domain.
func (a *ClearMessagesArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearMessagesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearMessagesReply represents the return values for ClearMessages in the Console domain.
type ClearMessagesReply struct {
}

// ClearMessagesReply returns whether or not the FrameID matches the reply value for ClearMessages in the Console domain.
func (a *ClearMessagesReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ClearMessagesReply", err)
	}
	return true
}

// ClearMessagesReply returns the FrameID value for ClearMessages in the Console domain.
func (a *ClearMessagesReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for ClearMessages in the Console domain.
func (a *ClearMessagesReply) UnmarshalJSON(b []byte) error {
	type Copy ClearMessagesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearMessagesReply(*c)
	return nil
}

// DisableArgs represents the arguments for Disable in the Console domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the Console domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the Console domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the Console domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the Console domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: DisableReply", err)
	}
	return true
}

// DisableReply returns the FrameID value for Disable in the Console domain.
func (a *DisableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Disable in the Console domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// EnableArgs represents the arguments for Enable in the Console domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the Console domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the Console domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the Console domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the Console domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: EnableReply", err)
	}
	return true
}

// EnableReply returns the FrameID value for Enable in the Console domain.
func (a *EnableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Enable in the Console domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}
