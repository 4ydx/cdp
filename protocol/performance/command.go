// Code generated by cdpgen. DO NOT EDIT.

package performance

import (
	"encoding/json"
	"log"
)

const (
	CommandPerformanceDisable       = "Performance.disable"
	CommandPerformanceEnable        = "Performance.enable"
	CommandPerformanceSetTimeDomain = "Performance.setTimeDomain"
	CommandPerformanceGetMetrics    = "Performance.getMetrics"
)

// DisableArgs represents the arguments for Disable in the Performance domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the Performance domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the Performance domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the Performance domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the Performance domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: DisableReply %s", err)
		return false, err
	}
	return true, nil
}

// DisableReply returns the FrameID value for Disable in the Performance domain.
func (a *DisableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Disable in the Performance domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// EnableArgs represents the arguments for Enable in the Performance domain.
type EnableArgs struct {
	// TimeDomain Time domain to use for collecting and reporting duration
	// metrics.
	//
	// Values: "timeTicks", "threadTicks".
	TimeDomain string `json:"timeDomain,omitempty"`
}

// Unmarshal the byte array into a return value for Enable in the Performance domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the Performance domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the Performance domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the Performance domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: EnableReply %s", err)
		return false, err
	}
	return true, nil
}

// EnableReply returns the FrameID value for Enable in the Performance domain.
func (a *EnableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Enable in the Performance domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// SetTimeDomainArgs represents the arguments for SetTimeDomain in the Performance domain.
type SetTimeDomainArgs struct {
	// TimeDomain Time domain
	//
	// Values: "timeTicks", "threadTicks".
	TimeDomain string `json:"timeDomain"`
}

// Unmarshal the byte array into a return value for SetTimeDomain in the Performance domain.
func (a *SetTimeDomainArgs) UnmarshalJSON(b []byte) error {
	type Copy SetTimeDomainArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetTimeDomainArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetTimeDomain in the Performance domain.
func (a *SetTimeDomainArgs) MarshalJSON() ([]byte, error) {
	type Copy SetTimeDomainArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetTimeDomainReply represents the return values for SetTimeDomain in the Performance domain.
type SetTimeDomainReply struct {
}

// SetTimeDomainReply returns whether or not the FrameID matches the reply value for SetTimeDomain in the Performance domain.
func (a *SetTimeDomainReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetTimeDomainReply %s", err)
		return false, err
	}
	return true, nil
}

// SetTimeDomainReply returns the FrameID value for SetTimeDomain in the Performance domain.
func (a *SetTimeDomainReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetTimeDomain in the Performance domain.
func (a *SetTimeDomainReply) UnmarshalJSON(b []byte) error {
	type Copy SetTimeDomainReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetTimeDomainReply(*c)
	return nil
}

// GetMetricsArgs represents the arguments for GetMetrics in the Performance domain.
type GetMetricsArgs struct {
}

// Unmarshal the byte array into a return value for GetMetrics in the Performance domain.
func (a *GetMetricsArgs) UnmarshalJSON(b []byte) error {
	type Copy GetMetricsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetMetricsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetMetrics in the Performance domain.
func (a *GetMetricsArgs) MarshalJSON() ([]byte, error) {
	type Copy GetMetricsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetMetricsReply represents the return values for GetMetrics in the Performance domain.
type GetMetricsReply struct {
	Metrics []Metric `json:"metrics"` // Current values for run-time metrics.
}

// GetMetricsReply returns whether or not the FrameID matches the reply value for GetMetrics in the Performance domain.
func (a *GetMetricsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetMetricsReply %s", err)
		return false, err
	}
	return true, nil
}

// GetMetricsReply returns the FrameID value for GetMetrics in the Performance domain.
func (a *GetMetricsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetMetrics in the Performance domain.
func (a *GetMetricsReply) UnmarshalJSON(b []byte) error {
	type Copy GetMetricsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetMetricsReply(*c)
	return nil
}
