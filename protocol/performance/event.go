// Code generated by cdpgen. DO NOT EDIT.

package performance

import (
	"encoding/json"
	"log"
)

const (
	EventPerformanceMetrics = "Performance.metrics"
)

type Unmarshaler func() json.Unmarshaler

var EventConstants = map[string]Unmarshaler{
	EventPerformanceMetrics: func() json.Unmarshaler { return &MetricsReply{} },
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	if ok {
		return e(), ok
	}
	return nil, ok
}

// MetricsReply is the reply for Metrics events.
type MetricsReply struct {
	Metrics []Metric `json:"metrics"` // Current values of the metrics.
	Title   string   `json:"title"`   // Timestamp title.
}

// Unmarshal the byte array into a return value for Metrics in the Performance domain.
func (a *MetricsReply) UnmarshalJSON(b []byte) error {
	type Copy MetricsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = MetricsReply(*c)
	return nil
}

// MetricsReply returns whether or not the FrameID matches the reply value for Metrics in the Metrics domain.
func (a *MetricsReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: Metrics", err)
	}
	return true
}

// MetricsReply returns the FrameID for Metrics in the Metrics domain.
func (a *MetricsReply) GetFrameID() string {
	return ""
}
