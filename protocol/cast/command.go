// Code generated by cdpgen. DO NOT EDIT.

package cast

import (
	"encoding/json"
	"log"
)

const (
	CommandCastEnable            = "Cast.enable"
	CommandCastDisable           = "Cast.disable"
	CommandCastSetSinkToUse      = "Cast.setSinkToUse"
	CommandCastStartTabMirroring = "Cast.startTabMirroring"
	CommandCastStopCasting       = "Cast.stopCasting"
)

// EnableArgs represents the arguments for Enable in the Cast domain.
type EnableArgs struct {
	PresentationURL string `json:"presentationUrl,omitempty"` // No description.
}

// Unmarshal the byte array into a return value for Enable in the Cast domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the Cast domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the Cast domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the Cast domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: EnableReply %s", err)
		return false, err
	}
	return true, nil
}

// EnableReply returns the FrameID value for Enable in the Cast domain.
func (a *EnableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Enable in the Cast domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// DisableArgs represents the arguments for Disable in the Cast domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the Cast domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the Cast domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the Cast domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the Cast domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: DisableReply %s", err)
		return false, err
	}
	return true, nil
}

// DisableReply returns the FrameID value for Disable in the Cast domain.
func (a *DisableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Disable in the Cast domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// SetSinkToUseArgs represents the arguments for SetSinkToUse in the Cast domain.
type SetSinkToUseArgs struct {
	SinkName string `json:"sinkName"` // No description.
}

// Unmarshal the byte array into a return value for SetSinkToUse in the Cast domain.
func (a *SetSinkToUseArgs) UnmarshalJSON(b []byte) error {
	type Copy SetSinkToUseArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetSinkToUseArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetSinkToUse in the Cast domain.
func (a *SetSinkToUseArgs) MarshalJSON() ([]byte, error) {
	type Copy SetSinkToUseArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetSinkToUseReply represents the return values for SetSinkToUse in the Cast domain.
type SetSinkToUseReply struct {
}

// SetSinkToUseReply returns whether or not the FrameID matches the reply value for SetSinkToUse in the Cast domain.
func (a *SetSinkToUseReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetSinkToUseReply %s", err)
		return false, err
	}
	return true, nil
}

// SetSinkToUseReply returns the FrameID value for SetSinkToUse in the Cast domain.
func (a *SetSinkToUseReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetSinkToUse in the Cast domain.
func (a *SetSinkToUseReply) UnmarshalJSON(b []byte) error {
	type Copy SetSinkToUseReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetSinkToUseReply(*c)
	return nil
}

// StartTabMirroringArgs represents the arguments for StartTabMirroring in the Cast domain.
type StartTabMirroringArgs struct {
	SinkName string `json:"sinkName"` // No description.
}

// Unmarshal the byte array into a return value for StartTabMirroring in the Cast domain.
func (a *StartTabMirroringArgs) UnmarshalJSON(b []byte) error {
	type Copy StartTabMirroringArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartTabMirroringArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartTabMirroring in the Cast domain.
func (a *StartTabMirroringArgs) MarshalJSON() ([]byte, error) {
	type Copy StartTabMirroringArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartTabMirroringReply represents the return values for StartTabMirroring in the Cast domain.
type StartTabMirroringReply struct {
}

// StartTabMirroringReply returns whether or not the FrameID matches the reply value for StartTabMirroring in the Cast domain.
func (a *StartTabMirroringReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StartTabMirroringReply %s", err)
		return false, err
	}
	return true, nil
}

// StartTabMirroringReply returns the FrameID value for StartTabMirroring in the Cast domain.
func (a *StartTabMirroringReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StartTabMirroring in the Cast domain.
func (a *StartTabMirroringReply) UnmarshalJSON(b []byte) error {
	type Copy StartTabMirroringReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartTabMirroringReply(*c)
	return nil
}

// StopCastingArgs represents the arguments for StopCasting in the Cast domain.
type StopCastingArgs struct {
	SinkName string `json:"sinkName"` // No description.
}

// Unmarshal the byte array into a return value for StopCasting in the Cast domain.
func (a *StopCastingArgs) UnmarshalJSON(b []byte) error {
	type Copy StopCastingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopCastingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopCasting in the Cast domain.
func (a *StopCastingArgs) MarshalJSON() ([]byte, error) {
	type Copy StopCastingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopCastingReply represents the return values for StopCasting in the Cast domain.
type StopCastingReply struct {
}

// StopCastingReply returns whether or not the FrameID matches the reply value for StopCasting in the Cast domain.
func (a *StopCastingReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StopCastingReply %s", err)
		return false, err
	}
	return true, nil
}

// StopCastingReply returns the FrameID value for StopCasting in the Cast domain.
func (a *StopCastingReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StopCasting in the Cast domain.
func (a *StopCastingReply) UnmarshalJSON(b []byte) error {
	type Copy StopCastingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopCastingReply(*c)
	return nil
}
