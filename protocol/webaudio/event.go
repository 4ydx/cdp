// Code generated by cdpgen. DO NOT EDIT.

package webaudio

import (
	"encoding/json"
	"log"
)

const (
	EventWebAudioContextCreated               = "WebAudio.contextCreated"
	EventWebAudioContextWillBeDestroyed       = "WebAudio.contextWillBeDestroyed"
	EventWebAudioContextChanged               = "WebAudio.contextChanged"
	EventWebAudioAudioListenerCreated         = "WebAudio.audioListenerCreated"
	EventWebAudioAudioListenerWillBeDestroyed = "WebAudio.audioListenerWillBeDestroyed"
	EventWebAudioAudioNodeCreated             = "WebAudio.audioNodeCreated"
	EventWebAudioAudioNodeWillBeDestroyed     = "WebAudio.audioNodeWillBeDestroyed"
	EventWebAudioAudioParamCreated            = "WebAudio.audioParamCreated"
	EventWebAudioAudioParamWillBeDestroyed    = "WebAudio.audioParamWillBeDestroyed"
	EventWebAudioNodesConnected               = "WebAudio.nodesConnected"
	EventWebAudioNodesDisconnected            = "WebAudio.nodesDisconnected"
	EventWebAudioNodeParamConnected           = "WebAudio.nodeParamConnected"
	EventWebAudioNodeParamDisconnected        = "WebAudio.nodeParamDisconnected"
)

type Unmarshaler func() json.Unmarshaler

var EventConstants = map[string]Unmarshaler{
	EventWebAudioContextCreated:               func() json.Unmarshaler { return &ContextCreatedReply{} },
	EventWebAudioContextWillBeDestroyed:       func() json.Unmarshaler { return &ContextWillBeDestroyedReply{} },
	EventWebAudioContextChanged:               func() json.Unmarshaler { return &ContextChangedReply{} },
	EventWebAudioAudioListenerCreated:         func() json.Unmarshaler { return &AudioListenerCreatedReply{} },
	EventWebAudioAudioListenerWillBeDestroyed: func() json.Unmarshaler { return &AudioListenerWillBeDestroyedReply{} },
	EventWebAudioAudioNodeCreated:             func() json.Unmarshaler { return &AudioNodeCreatedReply{} },
	EventWebAudioAudioNodeWillBeDestroyed:     func() json.Unmarshaler { return &AudioNodeWillBeDestroyedReply{} },
	EventWebAudioAudioParamCreated:            func() json.Unmarshaler { return &AudioParamCreatedReply{} },
	EventWebAudioAudioParamWillBeDestroyed:    func() json.Unmarshaler { return &AudioParamWillBeDestroyedReply{} },
	EventWebAudioNodesConnected:               func() json.Unmarshaler { return &NodesConnectedReply{} },
	EventWebAudioNodesDisconnected:            func() json.Unmarshaler { return &NodesDisconnectedReply{} },
	EventWebAudioNodeParamConnected:           func() json.Unmarshaler { return &NodeParamConnectedReply{} },
	EventWebAudioNodeParamDisconnected:        func() json.Unmarshaler { return &NodeParamDisconnectedReply{} },
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	if ok {
		return e(), ok
	}
	return nil, ok
}

// ContextCreatedReply is the reply for ContextCreated events.
type ContextCreatedReply struct {
	Context BaseAudioContext `json:"context"` // No description.
}

// Unmarshal the byte array into a return value for ContextCreated in the WebAudio domain.
func (a *ContextCreatedReply) UnmarshalJSON(b []byte) error {
	type Copy ContextCreatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ContextCreatedReply(*c)
	return nil
}

// ContextCreatedReply returns whether or not the FrameID matches the reply value for ContextCreated in the WebAudio domain.
func (a *ContextCreatedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ContextCreatedReply %s", err)
		return false, err
	}
	return true, nil
}

// ContextCreatedReply returns the FrameID for ContextCreated in the WebAudio domain.
func (a *ContextCreatedReply) GetFrameID() string {
	return ""
}

// ContextWillBeDestroyedReply is the reply for ContextWillBeDestroyed events.
type ContextWillBeDestroyedReply struct {
	ContextID GraphObjectID `json:"contextId"` // No description.
}

// Unmarshal the byte array into a return value for ContextWillBeDestroyed in the WebAudio domain.
func (a *ContextWillBeDestroyedReply) UnmarshalJSON(b []byte) error {
	type Copy ContextWillBeDestroyedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ContextWillBeDestroyedReply(*c)
	return nil
}

// ContextWillBeDestroyedReply returns whether or not the FrameID matches the reply value for ContextWillBeDestroyed in the WebAudio domain.
func (a *ContextWillBeDestroyedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ContextWillBeDestroyedReply %s", err)
		return false, err
	}
	return true, nil
}

// ContextWillBeDestroyedReply returns the FrameID for ContextWillBeDestroyed in the WebAudio domain.
func (a *ContextWillBeDestroyedReply) GetFrameID() string {
	return ""
}

// ContextChangedReply is the reply for ContextChanged events.
type ContextChangedReply struct {
	Context BaseAudioContext `json:"context"` // No description.
}

// Unmarshal the byte array into a return value for ContextChanged in the WebAudio domain.
func (a *ContextChangedReply) UnmarshalJSON(b []byte) error {
	type Copy ContextChangedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ContextChangedReply(*c)
	return nil
}

// ContextChangedReply returns whether or not the FrameID matches the reply value for ContextChanged in the WebAudio domain.
func (a *ContextChangedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ContextChangedReply %s", err)
		return false, err
	}
	return true, nil
}

// ContextChangedReply returns the FrameID for ContextChanged in the WebAudio domain.
func (a *ContextChangedReply) GetFrameID() string {
	return ""
}

// AudioListenerCreatedReply is the reply for AudioListenerCreated events.
type AudioListenerCreatedReply struct {
	Listener AudioListener `json:"listener"` // No description.
}

// Unmarshal the byte array into a return value for AudioListenerCreated in the WebAudio domain.
func (a *AudioListenerCreatedReply) UnmarshalJSON(b []byte) error {
	type Copy AudioListenerCreatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AudioListenerCreatedReply(*c)
	return nil
}

// AudioListenerCreatedReply returns whether or not the FrameID matches the reply value for AudioListenerCreated in the WebAudio domain.
func (a *AudioListenerCreatedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: AudioListenerCreatedReply %s", err)
		return false, err
	}
	return true, nil
}

// AudioListenerCreatedReply returns the FrameID for AudioListenerCreated in the WebAudio domain.
func (a *AudioListenerCreatedReply) GetFrameID() string {
	return ""
}

// AudioListenerWillBeDestroyedReply is the reply for AudioListenerWillBeDestroyed events.
type AudioListenerWillBeDestroyedReply struct {
	ContextID  GraphObjectID `json:"contextId"`  // No description.
	ListenerID GraphObjectID `json:"listenerId"` // No description.
}

// Unmarshal the byte array into a return value for AudioListenerWillBeDestroyed in the WebAudio domain.
func (a *AudioListenerWillBeDestroyedReply) UnmarshalJSON(b []byte) error {
	type Copy AudioListenerWillBeDestroyedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AudioListenerWillBeDestroyedReply(*c)
	return nil
}

// AudioListenerWillBeDestroyedReply returns whether or not the FrameID matches the reply value for AudioListenerWillBeDestroyed in the WebAudio domain.
func (a *AudioListenerWillBeDestroyedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: AudioListenerWillBeDestroyedReply %s", err)
		return false, err
	}
	return true, nil
}

// AudioListenerWillBeDestroyedReply returns the FrameID for AudioListenerWillBeDestroyed in the WebAudio domain.
func (a *AudioListenerWillBeDestroyedReply) GetFrameID() string {
	return ""
}

// AudioNodeCreatedReply is the reply for AudioNodeCreated events.
type AudioNodeCreatedReply struct {
	Node AudioNode `json:"node"` // No description.
}

// Unmarshal the byte array into a return value for AudioNodeCreated in the WebAudio domain.
func (a *AudioNodeCreatedReply) UnmarshalJSON(b []byte) error {
	type Copy AudioNodeCreatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AudioNodeCreatedReply(*c)
	return nil
}

// AudioNodeCreatedReply returns whether or not the FrameID matches the reply value for AudioNodeCreated in the WebAudio domain.
func (a *AudioNodeCreatedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: AudioNodeCreatedReply %s", err)
		return false, err
	}
	return true, nil
}

// AudioNodeCreatedReply returns the FrameID for AudioNodeCreated in the WebAudio domain.
func (a *AudioNodeCreatedReply) GetFrameID() string {
	return ""
}

// AudioNodeWillBeDestroyedReply is the reply for AudioNodeWillBeDestroyed events.
type AudioNodeWillBeDestroyedReply struct {
	ContextID GraphObjectID `json:"contextId"` // No description.
	NodeID    GraphObjectID `json:"nodeId"`    // No description.
}

// Unmarshal the byte array into a return value for AudioNodeWillBeDestroyed in the WebAudio domain.
func (a *AudioNodeWillBeDestroyedReply) UnmarshalJSON(b []byte) error {
	type Copy AudioNodeWillBeDestroyedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AudioNodeWillBeDestroyedReply(*c)
	return nil
}

// AudioNodeWillBeDestroyedReply returns whether or not the FrameID matches the reply value for AudioNodeWillBeDestroyed in the WebAudio domain.
func (a *AudioNodeWillBeDestroyedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: AudioNodeWillBeDestroyedReply %s", err)
		return false, err
	}
	return true, nil
}

// AudioNodeWillBeDestroyedReply returns the FrameID for AudioNodeWillBeDestroyed in the WebAudio domain.
func (a *AudioNodeWillBeDestroyedReply) GetFrameID() string {
	return ""
}

// AudioParamCreatedReply is the reply for AudioParamCreated events.
type AudioParamCreatedReply struct {
	Param AudioParam `json:"param"` // No description.
}

// Unmarshal the byte array into a return value for AudioParamCreated in the WebAudio domain.
func (a *AudioParamCreatedReply) UnmarshalJSON(b []byte) error {
	type Copy AudioParamCreatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AudioParamCreatedReply(*c)
	return nil
}

// AudioParamCreatedReply returns whether or not the FrameID matches the reply value for AudioParamCreated in the WebAudio domain.
func (a *AudioParamCreatedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: AudioParamCreatedReply %s", err)
		return false, err
	}
	return true, nil
}

// AudioParamCreatedReply returns the FrameID for AudioParamCreated in the WebAudio domain.
func (a *AudioParamCreatedReply) GetFrameID() string {
	return ""
}

// AudioParamWillBeDestroyedReply is the reply for AudioParamWillBeDestroyed events.
type AudioParamWillBeDestroyedReply struct {
	ContextID GraphObjectID `json:"contextId"` // No description.
	NodeID    GraphObjectID `json:"nodeId"`    // No description.
	ParamID   GraphObjectID `json:"paramId"`   // No description.
}

// Unmarshal the byte array into a return value for AudioParamWillBeDestroyed in the WebAudio domain.
func (a *AudioParamWillBeDestroyedReply) UnmarshalJSON(b []byte) error {
	type Copy AudioParamWillBeDestroyedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AudioParamWillBeDestroyedReply(*c)
	return nil
}

// AudioParamWillBeDestroyedReply returns whether or not the FrameID matches the reply value for AudioParamWillBeDestroyed in the WebAudio domain.
func (a *AudioParamWillBeDestroyedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: AudioParamWillBeDestroyedReply %s", err)
		return false, err
	}
	return true, nil
}

// AudioParamWillBeDestroyedReply returns the FrameID for AudioParamWillBeDestroyed in the WebAudio domain.
func (a *AudioParamWillBeDestroyedReply) GetFrameID() string {
	return ""
}

// NodesConnectedReply is the reply for NodesConnected events.
type NodesConnectedReply struct {
	ContextID             GraphObjectID `json:"contextId"`                       // No description.
	SourceID              GraphObjectID `json:"sourceId"`                        // No description.
	DestinationID         GraphObjectID `json:"destinationId"`                   // No description.
	SourceOutputIndex     float64       `json:"sourceOutputIndex,omitempty"`     // No description.
	DestinationInputIndex float64       `json:"destinationInputIndex,omitempty"` // No description.
}

// Unmarshal the byte array into a return value for NodesConnected in the WebAudio domain.
func (a *NodesConnectedReply) UnmarshalJSON(b []byte) error {
	type Copy NodesConnectedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NodesConnectedReply(*c)
	return nil
}

// NodesConnectedReply returns whether or not the FrameID matches the reply value for NodesConnected in the WebAudio domain.
func (a *NodesConnectedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: NodesConnectedReply %s", err)
		return false, err
	}
	return true, nil
}

// NodesConnectedReply returns the FrameID for NodesConnected in the WebAudio domain.
func (a *NodesConnectedReply) GetFrameID() string {
	return ""
}

// NodesDisconnectedReply is the reply for NodesDisconnected events.
type NodesDisconnectedReply struct {
	ContextID             GraphObjectID `json:"contextId"`                       // No description.
	SourceID              GraphObjectID `json:"sourceId"`                        // No description.
	DestinationID         GraphObjectID `json:"destinationId"`                   // No description.
	SourceOutputIndex     float64       `json:"sourceOutputIndex,omitempty"`     // No description.
	DestinationInputIndex float64       `json:"destinationInputIndex,omitempty"` // No description.
}

// Unmarshal the byte array into a return value for NodesDisconnected in the WebAudio domain.
func (a *NodesDisconnectedReply) UnmarshalJSON(b []byte) error {
	type Copy NodesDisconnectedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NodesDisconnectedReply(*c)
	return nil
}

// NodesDisconnectedReply returns whether or not the FrameID matches the reply value for NodesDisconnected in the WebAudio domain.
func (a *NodesDisconnectedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: NodesDisconnectedReply %s", err)
		return false, err
	}
	return true, nil
}

// NodesDisconnectedReply returns the FrameID for NodesDisconnected in the WebAudio domain.
func (a *NodesDisconnectedReply) GetFrameID() string {
	return ""
}

// NodeParamConnectedReply is the reply for NodeParamConnected events.
type NodeParamConnectedReply struct {
	ContextID         GraphObjectID `json:"contextId"`                   // No description.
	SourceID          GraphObjectID `json:"sourceId"`                    // No description.
	DestinationID     GraphObjectID `json:"destinationId"`               // No description.
	SourceOutputIndex float64       `json:"sourceOutputIndex,omitempty"` // No description.
}

// Unmarshal the byte array into a return value for NodeParamConnected in the WebAudio domain.
func (a *NodeParamConnectedReply) UnmarshalJSON(b []byte) error {
	type Copy NodeParamConnectedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NodeParamConnectedReply(*c)
	return nil
}

// NodeParamConnectedReply returns whether or not the FrameID matches the reply value for NodeParamConnected in the WebAudio domain.
func (a *NodeParamConnectedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: NodeParamConnectedReply %s", err)
		return false, err
	}
	return true, nil
}

// NodeParamConnectedReply returns the FrameID for NodeParamConnected in the WebAudio domain.
func (a *NodeParamConnectedReply) GetFrameID() string {
	return ""
}

// NodeParamDisconnectedReply is the reply for NodeParamDisconnected events.
type NodeParamDisconnectedReply struct {
	ContextID         GraphObjectID `json:"contextId"`                   // No description.
	SourceID          GraphObjectID `json:"sourceId"`                    // No description.
	DestinationID     GraphObjectID `json:"destinationId"`               // No description.
	SourceOutputIndex float64       `json:"sourceOutputIndex,omitempty"` // No description.
}

// Unmarshal the byte array into a return value for NodeParamDisconnected in the WebAudio domain.
func (a *NodeParamDisconnectedReply) UnmarshalJSON(b []byte) error {
	type Copy NodeParamDisconnectedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NodeParamDisconnectedReply(*c)
	return nil
}

// NodeParamDisconnectedReply returns whether or not the FrameID matches the reply value for NodeParamDisconnected in the WebAudio domain.
func (a *NodeParamDisconnectedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: NodeParamDisconnectedReply %s", err)
		return false, err
	}
	return true, nil
}

// NodeParamDisconnectedReply returns the FrameID for NodeParamDisconnected in the WebAudio domain.
func (a *NodeParamDisconnectedReply) GetFrameID() string {
	return ""
}
