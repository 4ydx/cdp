// Code generated by cdpgen. DO NOT EDIT.

package webaudio

import (
	"encoding/json"
	"log"
)

const (
	CommandWebAudioEnable          = "WebAudio.enable"
	CommandWebAudioDisable         = "WebAudio.disable"
	CommandWebAudioGetRealtimeData = "WebAudio.getRealtimeData"
)

// EnableArgs represents the arguments for Enable in the WebAudio domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the WebAudio domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the WebAudio domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the WebAudio domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the WebAudio domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: EnableReply %s", err)
		return false, err
	}
	return true, nil
}

// EnableReply returns the FrameID value for Enable in the WebAudio domain.
func (a *EnableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Enable in the WebAudio domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// DisableArgs represents the arguments for Disable in the WebAudio domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the WebAudio domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the WebAudio domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the WebAudio domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the WebAudio domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: DisableReply %s", err)
		return false, err
	}
	return true, nil
}

// DisableReply returns the FrameID value for Disable in the WebAudio domain.
func (a *DisableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Disable in the WebAudio domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// GetRealtimeDataArgs represents the arguments for GetRealtimeData in the WebAudio domain.
type GetRealtimeDataArgs struct {
	ContextID GraphObjectID `json:"contextId"` // No description.
}

// Unmarshal the byte array into a return value for GetRealtimeData in the WebAudio domain.
func (a *GetRealtimeDataArgs) UnmarshalJSON(b []byte) error {
	type Copy GetRealtimeDataArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetRealtimeDataArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetRealtimeData in the WebAudio domain.
func (a *GetRealtimeDataArgs) MarshalJSON() ([]byte, error) {
	type Copy GetRealtimeDataArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetRealtimeDataReply represents the return values for GetRealtimeData in the WebAudio domain.
type GetRealtimeDataReply struct {
	RealtimeData ContextRealtimeData `json:"realtimeData"` // No description.
}

// GetRealtimeDataReply returns whether or not the FrameID matches the reply value for GetRealtimeData in the WebAudio domain.
func (a *GetRealtimeDataReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetRealtimeDataReply %s", err)
		return false, err
	}
	return true, nil
}

// GetRealtimeDataReply returns the FrameID value for GetRealtimeData in the WebAudio domain.
func (a *GetRealtimeDataReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetRealtimeData in the WebAudio domain.
func (a *GetRealtimeDataReply) UnmarshalJSON(b []byte) error {
	type Copy GetRealtimeDataReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetRealtimeDataReply(*c)
	return nil
}
