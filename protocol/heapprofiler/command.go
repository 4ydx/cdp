// Code generated by cdpgen. DO NOT EDIT.

package heapprofiler

import (
	"encoding/json"
	"log"

	shared "github.com/4ydx/cdp/protocol"
	"github.com/4ydx/cdp/protocol/runtime"
)

const (
	CommandHeapProfilerAddInspectedHeapObject   = "HeapProfiler.addInspectedHeapObject"
	CommandHeapProfilerCollectGarbage           = "HeapProfiler.collectGarbage"
	CommandHeapProfilerDisable                  = "HeapProfiler.disable"
	CommandHeapProfilerEnable                   = "HeapProfiler.enable"
	CommandHeapProfilerGetHeapObjectId          = "HeapProfiler.getHeapObjectId"
	CommandHeapProfilerGetObjectByHeapObjectId  = "HeapProfiler.getObjectByHeapObjectId"
	CommandHeapProfilerGetSamplingProfile       = "HeapProfiler.getSamplingProfile"
	CommandHeapProfilerStartSampling            = "HeapProfiler.startSampling"
	CommandHeapProfilerStartTrackingHeapObjects = "HeapProfiler.startTrackingHeapObjects"
	CommandHeapProfilerStopSampling             = "HeapProfiler.stopSampling"
	CommandHeapProfilerStopTrackingHeapObjects  = "HeapProfiler.stopTrackingHeapObjects"
	CommandHeapProfilerTakeHeapSnapshot         = "HeapProfiler.takeHeapSnapshot"
)

// AddInspectedHeapObjectArgs represents the arguments for AddInspectedHeapObject in the HeapProfiler domain.
type AddInspectedHeapObjectArgs struct {
	HeapObjectID HeapSnapshotObjectID `json:"heapObjectId"` // Heap snapshot object id to be accessible by means of $x command line API.
}

// Unmarshal the byte array into a return value for AddInspectedHeapObject in the HeapProfiler domain.
func (a *AddInspectedHeapObjectArgs) UnmarshalJSON(b []byte) error {
	type Copy AddInspectedHeapObjectArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddInspectedHeapObjectArgs(*c)
	return nil
}

// Marshall the byte array into a return value for AddInspectedHeapObject in the HeapProfiler domain.
func (a *AddInspectedHeapObjectArgs) MarshalJSON() ([]byte, error) {
	type Copy AddInspectedHeapObjectArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// AddInspectedHeapObjectReply represents the return values for AddInspectedHeapObject in the HeapProfiler domain.
type AddInspectedHeapObjectReply struct {
}

// AddInspectedHeapObjectReply returns whether or not the FrameID matches the reply value for AddInspectedHeapObject in the HeapProfiler domain.
func (a *AddInspectedHeapObjectReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: AddInspectedHeapObjectReply %s", err)
		return false, err
	}
	return true, nil
}

// AddInspectedHeapObjectReply returns the FrameID value for AddInspectedHeapObject in the HeapProfiler domain.
func (a *AddInspectedHeapObjectReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for AddInspectedHeapObject in the HeapProfiler domain.
func (a *AddInspectedHeapObjectReply) UnmarshalJSON(b []byte) error {
	type Copy AddInspectedHeapObjectReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddInspectedHeapObjectReply(*c)
	return nil
}

// CollectGarbageArgs represents the arguments for CollectGarbage in the HeapProfiler domain.
type CollectGarbageArgs struct {
}

// Unmarshal the byte array into a return value for CollectGarbage in the HeapProfiler domain.
func (a *CollectGarbageArgs) UnmarshalJSON(b []byte) error {
	type Copy CollectGarbageArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CollectGarbageArgs(*c)
	return nil
}

// Marshall the byte array into a return value for CollectGarbage in the HeapProfiler domain.
func (a *CollectGarbageArgs) MarshalJSON() ([]byte, error) {
	type Copy CollectGarbageArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CollectGarbageReply represents the return values for CollectGarbage in the HeapProfiler domain.
type CollectGarbageReply struct {
}

// CollectGarbageReply returns whether or not the FrameID matches the reply value for CollectGarbage in the HeapProfiler domain.
func (a *CollectGarbageReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: CollectGarbageReply %s", err)
		return false, err
	}
	return true, nil
}

// CollectGarbageReply returns the FrameID value for CollectGarbage in the HeapProfiler domain.
func (a *CollectGarbageReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for CollectGarbage in the HeapProfiler domain.
func (a *CollectGarbageReply) UnmarshalJSON(b []byte) error {
	type Copy CollectGarbageReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CollectGarbageReply(*c)
	return nil
}

// DisableArgs represents the arguments for Disable in the HeapProfiler domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the HeapProfiler domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the HeapProfiler domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the HeapProfiler domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the HeapProfiler domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: DisableReply %s", err)
		return false, err
	}
	return true, nil
}

// DisableReply returns the FrameID value for Disable in the HeapProfiler domain.
func (a *DisableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Disable in the HeapProfiler domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// EnableArgs represents the arguments for Enable in the HeapProfiler domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the HeapProfiler domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the HeapProfiler domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the HeapProfiler domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the HeapProfiler domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: EnableReply %s", err)
		return false, err
	}
	return true, nil
}

// EnableReply returns the FrameID value for Enable in the HeapProfiler domain.
func (a *EnableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Enable in the HeapProfiler domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// GetHeapObjectIDArgs represents the arguments for GetHeapObjectID in the HeapProfiler domain.
type GetHeapObjectIDArgs struct {
	ObjectID shared.RemoteObjectID `json:"objectId"` // Identifier of the object to get heap object id for.
}

// Unmarshal the byte array into a return value for GetHeapObjectID in the HeapProfiler domain.
func (a *GetHeapObjectIDArgs) UnmarshalJSON(b []byte) error {
	type Copy GetHeapObjectIDArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetHeapObjectIDArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetHeapObjectID in the HeapProfiler domain.
func (a *GetHeapObjectIDArgs) MarshalJSON() ([]byte, error) {
	type Copy GetHeapObjectIDArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetHeapObjectIDReply represents the return values for GetHeapObjectID in the HeapProfiler domain.
type GetHeapObjectIDReply struct {
	HeapSnapshotObjectID HeapSnapshotObjectID `json:"heapSnapshotObjectId"` // Id of the heap snapshot object corresponding to the passed remote object id.
}

// GetHeapObjectIDReply returns whether or not the FrameID matches the reply value for GetHeapObjectID in the HeapProfiler domain.
func (a *GetHeapObjectIDReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetHeapObjectIDReply %s", err)
		return false, err
	}
	return true, nil
}

// GetHeapObjectIDReply returns the FrameID value for GetHeapObjectID in the HeapProfiler domain.
func (a *GetHeapObjectIDReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetHeapObjectID in the HeapProfiler domain.
func (a *GetHeapObjectIDReply) UnmarshalJSON(b []byte) error {
	type Copy GetHeapObjectIDReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetHeapObjectIDReply(*c)
	return nil
}

// GetObjectByHeapObjectIDArgs represents the arguments for GetObjectByHeapObjectID in the HeapProfiler domain.
type GetObjectByHeapObjectIDArgs struct {
	ObjectID    HeapSnapshotObjectID `json:"objectId"`              // No description.
	ObjectGroup string               `json:"objectGroup,omitempty"` // Symbolic group name that can be used to release multiple objects.
}

// Unmarshal the byte array into a return value for GetObjectByHeapObjectID in the HeapProfiler domain.
func (a *GetObjectByHeapObjectIDArgs) UnmarshalJSON(b []byte) error {
	type Copy GetObjectByHeapObjectIDArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetObjectByHeapObjectIDArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetObjectByHeapObjectID in the HeapProfiler domain.
func (a *GetObjectByHeapObjectIDArgs) MarshalJSON() ([]byte, error) {
	type Copy GetObjectByHeapObjectIDArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetObjectByHeapObjectIDReply represents the return values for GetObjectByHeapObjectID in the HeapProfiler domain.
type GetObjectByHeapObjectIDReply struct {
	Result runtime.RemoteObject `json:"result"` // Evaluation result.
}

// GetObjectByHeapObjectIDReply returns whether or not the FrameID matches the reply value for GetObjectByHeapObjectID in the HeapProfiler domain.
func (a *GetObjectByHeapObjectIDReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetObjectByHeapObjectIDReply %s", err)
		return false, err
	}
	return true, nil
}

// GetObjectByHeapObjectIDReply returns the FrameID value for GetObjectByHeapObjectID in the HeapProfiler domain.
func (a *GetObjectByHeapObjectIDReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetObjectByHeapObjectID in the HeapProfiler domain.
func (a *GetObjectByHeapObjectIDReply) UnmarshalJSON(b []byte) error {
	type Copy GetObjectByHeapObjectIDReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetObjectByHeapObjectIDReply(*c)
	return nil
}

// GetSamplingProfileArgs represents the arguments for GetSamplingProfile in the HeapProfiler domain.
type GetSamplingProfileArgs struct {
}

// Unmarshal the byte array into a return value for GetSamplingProfile in the HeapProfiler domain.
func (a *GetSamplingProfileArgs) UnmarshalJSON(b []byte) error {
	type Copy GetSamplingProfileArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetSamplingProfileArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetSamplingProfile in the HeapProfiler domain.
func (a *GetSamplingProfileArgs) MarshalJSON() ([]byte, error) {
	type Copy GetSamplingProfileArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetSamplingProfileReply represents the return values for GetSamplingProfile in the HeapProfiler domain.
type GetSamplingProfileReply struct {
	Profile SamplingHeapProfile `json:"profile"` // Return the sampling profile being collected.
}

// GetSamplingProfileReply returns whether or not the FrameID matches the reply value for GetSamplingProfile in the HeapProfiler domain.
func (a *GetSamplingProfileReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetSamplingProfileReply %s", err)
		return false, err
	}
	return true, nil
}

// GetSamplingProfileReply returns the FrameID value for GetSamplingProfile in the HeapProfiler domain.
func (a *GetSamplingProfileReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetSamplingProfile in the HeapProfiler domain.
func (a *GetSamplingProfileReply) UnmarshalJSON(b []byte) error {
	type Copy GetSamplingProfileReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetSamplingProfileReply(*c)
	return nil
}

// StartSamplingArgs represents the arguments for StartSampling in the HeapProfiler domain.
type StartSamplingArgs struct {
	SamplingInterval float64 `json:"samplingInterval,omitempty"` // Average sample interval in bytes. Poisson distribution is used for the intervals. The default value is 32768 bytes.
}

// Unmarshal the byte array into a return value for StartSampling in the HeapProfiler domain.
func (a *StartSamplingArgs) UnmarshalJSON(b []byte) error {
	type Copy StartSamplingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartSamplingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartSampling in the HeapProfiler domain.
func (a *StartSamplingArgs) MarshalJSON() ([]byte, error) {
	type Copy StartSamplingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartSamplingReply represents the return values for StartSampling in the HeapProfiler domain.
type StartSamplingReply struct {
}

// StartSamplingReply returns whether or not the FrameID matches the reply value for StartSampling in the HeapProfiler domain.
func (a *StartSamplingReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StartSamplingReply %s", err)
		return false, err
	}
	return true, nil
}

// StartSamplingReply returns the FrameID value for StartSampling in the HeapProfiler domain.
func (a *StartSamplingReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StartSampling in the HeapProfiler domain.
func (a *StartSamplingReply) UnmarshalJSON(b []byte) error {
	type Copy StartSamplingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartSamplingReply(*c)
	return nil
}

// StartTrackingHeapObjectsArgs represents the arguments for StartTrackingHeapObjects in the HeapProfiler domain.
type StartTrackingHeapObjectsArgs struct {
	TrackAllocations bool `json:"trackAllocations,omitempty"` // No description.
}

// Unmarshal the byte array into a return value for StartTrackingHeapObjects in the HeapProfiler domain.
func (a *StartTrackingHeapObjectsArgs) UnmarshalJSON(b []byte) error {
	type Copy StartTrackingHeapObjectsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartTrackingHeapObjectsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartTrackingHeapObjects in the HeapProfiler domain.
func (a *StartTrackingHeapObjectsArgs) MarshalJSON() ([]byte, error) {
	type Copy StartTrackingHeapObjectsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartTrackingHeapObjectsReply represents the return values for StartTrackingHeapObjects in the HeapProfiler domain.
type StartTrackingHeapObjectsReply struct {
}

// StartTrackingHeapObjectsReply returns whether or not the FrameID matches the reply value for StartTrackingHeapObjects in the HeapProfiler domain.
func (a *StartTrackingHeapObjectsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StartTrackingHeapObjectsReply %s", err)
		return false, err
	}
	return true, nil
}

// StartTrackingHeapObjectsReply returns the FrameID value for StartTrackingHeapObjects in the HeapProfiler domain.
func (a *StartTrackingHeapObjectsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StartTrackingHeapObjects in the HeapProfiler domain.
func (a *StartTrackingHeapObjectsReply) UnmarshalJSON(b []byte) error {
	type Copy StartTrackingHeapObjectsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartTrackingHeapObjectsReply(*c)
	return nil
}

// StopSamplingArgs represents the arguments for StopSampling in the HeapProfiler domain.
type StopSamplingArgs struct {
}

// Unmarshal the byte array into a return value for StopSampling in the HeapProfiler domain.
func (a *StopSamplingArgs) UnmarshalJSON(b []byte) error {
	type Copy StopSamplingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopSamplingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopSampling in the HeapProfiler domain.
func (a *StopSamplingArgs) MarshalJSON() ([]byte, error) {
	type Copy StopSamplingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopSamplingReply represents the return values for StopSampling in the HeapProfiler domain.
type StopSamplingReply struct {
	Profile SamplingHeapProfile `json:"profile"` // Recorded sampling heap profile.
}

// StopSamplingReply returns whether or not the FrameID matches the reply value for StopSampling in the HeapProfiler domain.
func (a *StopSamplingReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StopSamplingReply %s", err)
		return false, err
	}
	return true, nil
}

// StopSamplingReply returns the FrameID value for StopSampling in the HeapProfiler domain.
func (a *StopSamplingReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StopSampling in the HeapProfiler domain.
func (a *StopSamplingReply) UnmarshalJSON(b []byte) error {
	type Copy StopSamplingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopSamplingReply(*c)
	return nil
}

// StopTrackingHeapObjectsArgs represents the arguments for StopTrackingHeapObjects in the HeapProfiler domain.
type StopTrackingHeapObjectsArgs struct {
	ReportProgress            bool `json:"reportProgress,omitempty"`            // If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken when the tracking is stopped.
	TreatGlobalObjectsAsRoots bool `json:"treatGlobalObjectsAsRoots,omitempty"` // No description.
}

// Unmarshal the byte array into a return value for StopTrackingHeapObjects in the HeapProfiler domain.
func (a *StopTrackingHeapObjectsArgs) UnmarshalJSON(b []byte) error {
	type Copy StopTrackingHeapObjectsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopTrackingHeapObjectsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopTrackingHeapObjects in the HeapProfiler domain.
func (a *StopTrackingHeapObjectsArgs) MarshalJSON() ([]byte, error) {
	type Copy StopTrackingHeapObjectsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopTrackingHeapObjectsReply represents the return values for StopTrackingHeapObjects in the HeapProfiler domain.
type StopTrackingHeapObjectsReply struct {
}

// StopTrackingHeapObjectsReply returns whether or not the FrameID matches the reply value for StopTrackingHeapObjects in the HeapProfiler domain.
func (a *StopTrackingHeapObjectsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StopTrackingHeapObjectsReply %s", err)
		return false, err
	}
	return true, nil
}

// StopTrackingHeapObjectsReply returns the FrameID value for StopTrackingHeapObjects in the HeapProfiler domain.
func (a *StopTrackingHeapObjectsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StopTrackingHeapObjects in the HeapProfiler domain.
func (a *StopTrackingHeapObjectsReply) UnmarshalJSON(b []byte) error {
	type Copy StopTrackingHeapObjectsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopTrackingHeapObjectsReply(*c)
	return nil
}

// TakeHeapSnapshotArgs represents the arguments for TakeHeapSnapshot in the HeapProfiler domain.
type TakeHeapSnapshotArgs struct {
	ReportProgress            bool `json:"reportProgress,omitempty"`            // If true 'reportHeapSnapshotProgress' events will be generated while snapshot is being taken.
	TreatGlobalObjectsAsRoots bool `json:"treatGlobalObjectsAsRoots,omitempty"` // If true, a raw snapshot without artificial roots will be generated
}

// Unmarshal the byte array into a return value for TakeHeapSnapshot in the HeapProfiler domain.
func (a *TakeHeapSnapshotArgs) UnmarshalJSON(b []byte) error {
	type Copy TakeHeapSnapshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TakeHeapSnapshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for TakeHeapSnapshot in the HeapProfiler domain.
func (a *TakeHeapSnapshotArgs) MarshalJSON() ([]byte, error) {
	type Copy TakeHeapSnapshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// TakeHeapSnapshotReply represents the return values for TakeHeapSnapshot in the HeapProfiler domain.
type TakeHeapSnapshotReply struct {
}

// TakeHeapSnapshotReply returns whether or not the FrameID matches the reply value for TakeHeapSnapshot in the HeapProfiler domain.
func (a *TakeHeapSnapshotReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: TakeHeapSnapshotReply %s", err)
		return false, err
	}
	return true, nil
}

// TakeHeapSnapshotReply returns the FrameID value for TakeHeapSnapshot in the HeapProfiler domain.
func (a *TakeHeapSnapshotReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for TakeHeapSnapshot in the HeapProfiler domain.
func (a *TakeHeapSnapshotReply) UnmarshalJSON(b []byte) error {
	type Copy TakeHeapSnapshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = TakeHeapSnapshotReply(*c)
	return nil
}
