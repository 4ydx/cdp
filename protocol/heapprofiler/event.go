// Code generated by cdpgen. DO NOT EDIT.

package heapprofiler

import (
	"encoding/json"
	"log"
)

const (
	EventHeapProfilerAddHeapSnapshotChunk       = "HeapProfiler.addHeapSnapshotChunk"
	EventHeapProfilerHeapStatsUpdate            = "HeapProfiler.heapStatsUpdate"
	EventHeapProfilerLastSeenObjectId           = "HeapProfiler.lastSeenObjectId"
	EventHeapProfilerReportHeapSnapshotProgress = "HeapProfiler.reportHeapSnapshotProgress"
	EventHeapProfilerResetProfiles              = "HeapProfiler.resetProfiles"
)

var EventConstants = map[string]json.Unmarshaler{
	EventHeapProfilerAddHeapSnapshotChunk:       &AddHeapSnapshotChunkReply{},
	EventHeapProfilerHeapStatsUpdate:            &HeapStatsUpdateReply{},
	EventHeapProfilerLastSeenObjectId:           &LastSeenObjectIDReply{},
	EventHeapProfilerReportHeapSnapshotProgress: &ReportHeapSnapshotProgressReply{},
	EventHeapProfilerResetProfiles:              &ResetProfilesReply{},
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	return e, ok
}

// AddHeapSnapshotChunkReply is the reply for AddHeapSnapshotChunk events.
type AddHeapSnapshotChunkReply struct {
	Chunk string `json:"chunk"` // No description.
}

// Unmarshal the byte array into a return value for AddHeapSnapshotChunk in the HeapProfiler domain.
func (a *AddHeapSnapshotChunkReply) UnmarshalJSON(b []byte) error {
	type Copy AddHeapSnapshotChunkReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddHeapSnapshotChunkReply(*c)
	return nil
}

// AddHeapSnapshotChunkReply returns whether or not the FrameID matches the reply value for AddHeapSnapshotChunk in the AddHeapSnapshotChunk domain.
func (a *AddHeapSnapshotChunkReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// AddHeapSnapshotChunkReply returns the FrameID for AddHeapSnapshotChunk in the AddHeapSnapshotChunk domain.
func (a *AddHeapSnapshotChunkReply) GetFrameID() string {
	return ""
}

// HeapStatsUpdateReply is the reply for HeapStatsUpdate events.
type HeapStatsUpdateReply struct {
	StatsUpdate []int `json:"statsUpdate"` // An array of triplets. Each triplet describes a fragment. The first integer is the fragment index, the second integer is a total count of objects for the fragment, the third integer is a total size of the objects for the fragment.
}

// Unmarshal the byte array into a return value for HeapStatsUpdate in the HeapProfiler domain.
func (a *HeapStatsUpdateReply) UnmarshalJSON(b []byte) error {
	type Copy HeapStatsUpdateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HeapStatsUpdateReply(*c)
	return nil
}

// HeapStatsUpdateReply returns whether or not the FrameID matches the reply value for HeapStatsUpdate in the HeapStatsUpdate domain.
func (a *HeapStatsUpdateReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// HeapStatsUpdateReply returns the FrameID for HeapStatsUpdate in the HeapStatsUpdate domain.
func (a *HeapStatsUpdateReply) GetFrameID() string {
	return ""
}

// LastSeenObjectIDReply is the reply for LastSeenObjectID events.
type LastSeenObjectIDReply struct {
	LastSeenObjectID int     `json:"lastSeenObjectId"` // No description.
	Timestamp        float64 `json:"timestamp"`        // No description.
}

// Unmarshal the byte array into a return value for LastSeenObjectID in the HeapProfiler domain.
func (a *LastSeenObjectIDReply) UnmarshalJSON(b []byte) error {
	type Copy LastSeenObjectIDReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = LastSeenObjectIDReply(*c)
	return nil
}

// LastSeenObjectIDReply returns whether or not the FrameID matches the reply value for LastSeenObjectID in the LastSeenObjectID domain.
func (a *LastSeenObjectIDReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// LastSeenObjectIDReply returns the FrameID for LastSeenObjectID in the LastSeenObjectID domain.
func (a *LastSeenObjectIDReply) GetFrameID() string {
	return ""
}

// ReportHeapSnapshotProgressReply is the reply for ReportHeapSnapshotProgress events.
type ReportHeapSnapshotProgressReply struct {
	Done     int  `json:"done"`               // No description.
	Total    int  `json:"total"`              // No description.
	Finished bool `json:"finished,omitempty"` // No description.
}

// Unmarshal the byte array into a return value for ReportHeapSnapshotProgress in the HeapProfiler domain.
func (a *ReportHeapSnapshotProgressReply) UnmarshalJSON(b []byte) error {
	type Copy ReportHeapSnapshotProgressReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReportHeapSnapshotProgressReply(*c)
	return nil
}

// ReportHeapSnapshotProgressReply returns whether or not the FrameID matches the reply value for ReportHeapSnapshotProgress in the ReportHeapSnapshotProgress domain.
func (a *ReportHeapSnapshotProgressReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// ReportHeapSnapshotProgressReply returns the FrameID for ReportHeapSnapshotProgress in the ReportHeapSnapshotProgress domain.
func (a *ReportHeapSnapshotProgressReply) GetFrameID() string {
	return ""
}

// ResetProfilesReply is the reply for ResetProfiles events.
type ResetProfilesReply struct {
}

// Unmarshal the byte array into a return value for ResetProfiles in the HeapProfiler domain.
func (a *ResetProfilesReply) UnmarshalJSON(b []byte) error {
	type Copy ResetProfilesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResetProfilesReply(*c)
	return nil
}

// ResetProfilesReply returns whether or not the FrameID matches the reply value for ResetProfiles in the ResetProfiles domain.
func (a *ResetProfilesReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// ResetProfilesReply returns the FrameID for ResetProfiles in the ResetProfiles domain.
func (a *ResetProfilesReply) GetFrameID() string {
	return ""
}
