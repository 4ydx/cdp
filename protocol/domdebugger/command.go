// Code generated by cdpgen. DO NOT EDIT.

package domdebugger

import (
	"encoding/json"
	"log"

	"github.com/4ydx/cdp/protocol"
	"github.com/4ydx/cdp/protocol/dom"
)

const (
	CommandDOMDebuggerGetEventListeners               = "DOMDebugger.getEventListeners"
	CommandDOMDebuggerRemoveDOMBreakpoint             = "DOMDebugger.removeDOMBreakpoint"
	CommandDOMDebuggerRemoveEventListenerBreakpoint   = "DOMDebugger.removeEventListenerBreakpoint"
	CommandDOMDebuggerRemoveInstrumentationBreakpoint = "DOMDebugger.removeInstrumentationBreakpoint"
	CommandDOMDebuggerRemoveXHRBreakpoint             = "DOMDebugger.removeXHRBreakpoint"
	CommandDOMDebuggerSetDOMBreakpoint                = "DOMDebugger.setDOMBreakpoint"
	CommandDOMDebuggerSetEventListenerBreakpoint      = "DOMDebugger.setEventListenerBreakpoint"
	CommandDOMDebuggerSetInstrumentationBreakpoint    = "DOMDebugger.setInstrumentationBreakpoint"
	CommandDOMDebuggerSetXHRBreakpoint                = "DOMDebugger.setXHRBreakpoint"
)

// GetEventListenersArgs represents the arguments for GetEventListeners in the DOMDebugger domain.
type GetEventListenersArgs struct {
	ObjectID shared.RemoteObjectID `json:"objectId"`         // Identifier of the object to return listeners for.
	Depth    int                   `json:"depth,omitempty"`  // The maximum depth at which Node children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce   bool                  `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false). Reports listeners for all contexts if pierce is enabled.
}

// Unmarshal the byte array into a return value for GetEventListeners in the DOMDebugger domain.
func (a *GetEventListenersArgs) UnmarshalJSON(b []byte) error {
	type Copy GetEventListenersArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetEventListenersArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetEventListeners in the DOMDebugger domain.
func (a *GetEventListenersArgs) MarshalJSON() ([]byte, error) {
	type Copy GetEventListenersArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetEventListenersReply represents the return values for GetEventListeners in the DOMDebugger domain.
type GetEventListenersReply struct {
	Listeners []EventListener `json:"listeners"` // Array of relevant listeners.
}

// GetEventListenersReply returns whether or not the FrameID matches the reply value for GetEventListeners in the DOMDebugger domain.
func (a *GetEventListenersReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetEventListenersReply %s", err)
		return false, err
	}
	return true, nil
}

// GetEventListenersReply returns the FrameID value for GetEventListeners in the DOMDebugger domain.
func (a *GetEventListenersReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetEventListeners in the DOMDebugger domain.
func (a *GetEventListenersReply) UnmarshalJSON(b []byte) error {
	type Copy GetEventListenersReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetEventListenersReply(*c)
	return nil
}

// RemoveDOMBreakpointArgs represents the arguments for RemoveDOMBreakpoint in the DOMDebugger domain.
type RemoveDOMBreakpointArgs struct {
	NodeID dom.NodeID        `json:"nodeId"` // Identifier of the node to remove breakpoint from.
	Type   DOMBreakpointType `json:"type"`   // Type of the breakpoint to remove.
}

// Unmarshal the byte array into a return value for RemoveDOMBreakpoint in the DOMDebugger domain.
func (a *RemoveDOMBreakpointArgs) UnmarshalJSON(b []byte) error {
	type Copy RemoveDOMBreakpointArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveDOMBreakpointArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RemoveDOMBreakpoint in the DOMDebugger domain.
func (a *RemoveDOMBreakpointArgs) MarshalJSON() ([]byte, error) {
	type Copy RemoveDOMBreakpointArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RemoveDOMBreakpointReply represents the return values for RemoveDOMBreakpoint in the DOMDebugger domain.
type RemoveDOMBreakpointReply struct {
}

// RemoveDOMBreakpointReply returns whether or not the FrameID matches the reply value for RemoveDOMBreakpoint in the DOMDebugger domain.
func (a *RemoveDOMBreakpointReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: RemoveDOMBreakpointReply %s", err)
		return false, err
	}
	return true, nil
}

// RemoveDOMBreakpointReply returns the FrameID value for RemoveDOMBreakpoint in the DOMDebugger domain.
func (a *RemoveDOMBreakpointReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for RemoveDOMBreakpoint in the DOMDebugger domain.
func (a *RemoveDOMBreakpointReply) UnmarshalJSON(b []byte) error {
	type Copy RemoveDOMBreakpointReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveDOMBreakpointReply(*c)
	return nil
}

// RemoveEventListenerBreakpointArgs represents the arguments for RemoveEventListenerBreakpoint in the DOMDebugger domain.
type RemoveEventListenerBreakpointArgs struct {
	EventName string `json:"eventName"` // Event name.
	// TargetName EventTarget interface name.
	//
	// Note: This property is experimental.
	TargetName string `json:"targetName,omitempty"`
}

// Unmarshal the byte array into a return value for RemoveEventListenerBreakpoint in the DOMDebugger domain.
func (a *RemoveEventListenerBreakpointArgs) UnmarshalJSON(b []byte) error {
	type Copy RemoveEventListenerBreakpointArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveEventListenerBreakpointArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RemoveEventListenerBreakpoint in the DOMDebugger domain.
func (a *RemoveEventListenerBreakpointArgs) MarshalJSON() ([]byte, error) {
	type Copy RemoveEventListenerBreakpointArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RemoveEventListenerBreakpointReply represents the return values for RemoveEventListenerBreakpoint in the DOMDebugger domain.
type RemoveEventListenerBreakpointReply struct {
}

// RemoveEventListenerBreakpointReply returns whether or not the FrameID matches the reply value for RemoveEventListenerBreakpoint in the DOMDebugger domain.
func (a *RemoveEventListenerBreakpointReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: RemoveEventListenerBreakpointReply %s", err)
		return false, err
	}
	return true, nil
}

// RemoveEventListenerBreakpointReply returns the FrameID value for RemoveEventListenerBreakpoint in the DOMDebugger domain.
func (a *RemoveEventListenerBreakpointReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for RemoveEventListenerBreakpoint in the DOMDebugger domain.
func (a *RemoveEventListenerBreakpointReply) UnmarshalJSON(b []byte) error {
	type Copy RemoveEventListenerBreakpointReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveEventListenerBreakpointReply(*c)
	return nil
}

// RemoveInstrumentationBreakpointArgs represents the arguments for RemoveInstrumentationBreakpoint in the DOMDebugger domain.
type RemoveInstrumentationBreakpointArgs struct {
	EventName string `json:"eventName"` // Instrumentation name to stop on.
}

// Unmarshal the byte array into a return value for RemoveInstrumentationBreakpoint in the DOMDebugger domain.
func (a *RemoveInstrumentationBreakpointArgs) UnmarshalJSON(b []byte) error {
	type Copy RemoveInstrumentationBreakpointArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveInstrumentationBreakpointArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RemoveInstrumentationBreakpoint in the DOMDebugger domain.
func (a *RemoveInstrumentationBreakpointArgs) MarshalJSON() ([]byte, error) {
	type Copy RemoveInstrumentationBreakpointArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RemoveInstrumentationBreakpointReply represents the return values for RemoveInstrumentationBreakpoint in the DOMDebugger domain.
type RemoveInstrumentationBreakpointReply struct {
}

// RemoveInstrumentationBreakpointReply returns whether or not the FrameID matches the reply value for RemoveInstrumentationBreakpoint in the DOMDebugger domain.
func (a *RemoveInstrumentationBreakpointReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: RemoveInstrumentationBreakpointReply %s", err)
		return false, err
	}
	return true, nil
}

// RemoveInstrumentationBreakpointReply returns the FrameID value for RemoveInstrumentationBreakpoint in the DOMDebugger domain.
func (a *RemoveInstrumentationBreakpointReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for RemoveInstrumentationBreakpoint in the DOMDebugger domain.
func (a *RemoveInstrumentationBreakpointReply) UnmarshalJSON(b []byte) error {
	type Copy RemoveInstrumentationBreakpointReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveInstrumentationBreakpointReply(*c)
	return nil
}

// RemoveXHRBreakpointArgs represents the arguments for RemoveXHRBreakpoint in the DOMDebugger domain.
type RemoveXHRBreakpointArgs struct {
	URL string `json:"url"` // Resource URL substring.
}

// Unmarshal the byte array into a return value for RemoveXHRBreakpoint in the DOMDebugger domain.
func (a *RemoveXHRBreakpointArgs) UnmarshalJSON(b []byte) error {
	type Copy RemoveXHRBreakpointArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveXHRBreakpointArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RemoveXHRBreakpoint in the DOMDebugger domain.
func (a *RemoveXHRBreakpointArgs) MarshalJSON() ([]byte, error) {
	type Copy RemoveXHRBreakpointArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RemoveXHRBreakpointReply represents the return values for RemoveXHRBreakpoint in the DOMDebugger domain.
type RemoveXHRBreakpointReply struct {
}

// RemoveXHRBreakpointReply returns whether or not the FrameID matches the reply value for RemoveXHRBreakpoint in the DOMDebugger domain.
func (a *RemoveXHRBreakpointReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: RemoveXHRBreakpointReply %s", err)
		return false, err
	}
	return true, nil
}

// RemoveXHRBreakpointReply returns the FrameID value for RemoveXHRBreakpoint in the DOMDebugger domain.
func (a *RemoveXHRBreakpointReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for RemoveXHRBreakpoint in the DOMDebugger domain.
func (a *RemoveXHRBreakpointReply) UnmarshalJSON(b []byte) error {
	type Copy RemoveXHRBreakpointReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveXHRBreakpointReply(*c)
	return nil
}

// SetDOMBreakpointArgs represents the arguments for SetDOMBreakpoint in the DOMDebugger domain.
type SetDOMBreakpointArgs struct {
	NodeID dom.NodeID        `json:"nodeId"` // Identifier of the node to set breakpoint on.
	Type   DOMBreakpointType `json:"type"`   // Type of the operation to stop upon.
}

// Unmarshal the byte array into a return value for SetDOMBreakpoint in the DOMDebugger domain.
func (a *SetDOMBreakpointArgs) UnmarshalJSON(b []byte) error {
	type Copy SetDOMBreakpointArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDOMBreakpointArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetDOMBreakpoint in the DOMDebugger domain.
func (a *SetDOMBreakpointArgs) MarshalJSON() ([]byte, error) {
	type Copy SetDOMBreakpointArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetDOMBreakpointReply represents the return values for SetDOMBreakpoint in the DOMDebugger domain.
type SetDOMBreakpointReply struct {
}

// SetDOMBreakpointReply returns whether or not the FrameID matches the reply value for SetDOMBreakpoint in the DOMDebugger domain.
func (a *SetDOMBreakpointReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetDOMBreakpointReply %s", err)
		return false, err
	}
	return true, nil
}

// SetDOMBreakpointReply returns the FrameID value for SetDOMBreakpoint in the DOMDebugger domain.
func (a *SetDOMBreakpointReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetDOMBreakpoint in the DOMDebugger domain.
func (a *SetDOMBreakpointReply) UnmarshalJSON(b []byte) error {
	type Copy SetDOMBreakpointReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDOMBreakpointReply(*c)
	return nil
}

// SetEventListenerBreakpointArgs represents the arguments for SetEventListenerBreakpoint in the DOMDebugger domain.
type SetEventListenerBreakpointArgs struct {
	EventName string `json:"eventName"` // DOM Event name to stop on (any DOM event will do).
	// TargetName EventTarget interface name to stop on. If equal to `"*"`
	// or not provided, will stop on any EventTarget.
	//
	// Note: This property is experimental.
	TargetName string `json:"targetName,omitempty"`
}

// Unmarshal the byte array into a return value for SetEventListenerBreakpoint in the DOMDebugger domain.
func (a *SetEventListenerBreakpointArgs) UnmarshalJSON(b []byte) error {
	type Copy SetEventListenerBreakpointArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetEventListenerBreakpointArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetEventListenerBreakpoint in the DOMDebugger domain.
func (a *SetEventListenerBreakpointArgs) MarshalJSON() ([]byte, error) {
	type Copy SetEventListenerBreakpointArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetEventListenerBreakpointReply represents the return values for SetEventListenerBreakpoint in the DOMDebugger domain.
type SetEventListenerBreakpointReply struct {
}

// SetEventListenerBreakpointReply returns whether or not the FrameID matches the reply value for SetEventListenerBreakpoint in the DOMDebugger domain.
func (a *SetEventListenerBreakpointReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetEventListenerBreakpointReply %s", err)
		return false, err
	}
	return true, nil
}

// SetEventListenerBreakpointReply returns the FrameID value for SetEventListenerBreakpoint in the DOMDebugger domain.
func (a *SetEventListenerBreakpointReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetEventListenerBreakpoint in the DOMDebugger domain.
func (a *SetEventListenerBreakpointReply) UnmarshalJSON(b []byte) error {
	type Copy SetEventListenerBreakpointReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetEventListenerBreakpointReply(*c)
	return nil
}

// SetInstrumentationBreakpointArgs represents the arguments for SetInstrumentationBreakpoint in the DOMDebugger domain.
type SetInstrumentationBreakpointArgs struct {
	EventName string `json:"eventName"` // Instrumentation name to stop on.
}

// Unmarshal the byte array into a return value for SetInstrumentationBreakpoint in the DOMDebugger domain.
func (a *SetInstrumentationBreakpointArgs) UnmarshalJSON(b []byte) error {
	type Copy SetInstrumentationBreakpointArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetInstrumentationBreakpointArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetInstrumentationBreakpoint in the DOMDebugger domain.
func (a *SetInstrumentationBreakpointArgs) MarshalJSON() ([]byte, error) {
	type Copy SetInstrumentationBreakpointArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetInstrumentationBreakpointReply represents the return values for SetInstrumentationBreakpoint in the DOMDebugger domain.
type SetInstrumentationBreakpointReply struct {
}

// SetInstrumentationBreakpointReply returns whether or not the FrameID matches the reply value for SetInstrumentationBreakpoint in the DOMDebugger domain.
func (a *SetInstrumentationBreakpointReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetInstrumentationBreakpointReply %s", err)
		return false, err
	}
	return true, nil
}

// SetInstrumentationBreakpointReply returns the FrameID value for SetInstrumentationBreakpoint in the DOMDebugger domain.
func (a *SetInstrumentationBreakpointReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetInstrumentationBreakpoint in the DOMDebugger domain.
func (a *SetInstrumentationBreakpointReply) UnmarshalJSON(b []byte) error {
	type Copy SetInstrumentationBreakpointReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetInstrumentationBreakpointReply(*c)
	return nil
}

// SetXHRBreakpointArgs represents the arguments for SetXHRBreakpoint in the DOMDebugger domain.
type SetXHRBreakpointArgs struct {
	URL string `json:"url"` // Resource URL substring. All XHRs having this substring in the URL will get stopped upon.
}

// Unmarshal the byte array into a return value for SetXHRBreakpoint in the DOMDebugger domain.
func (a *SetXHRBreakpointArgs) UnmarshalJSON(b []byte) error {
	type Copy SetXHRBreakpointArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetXHRBreakpointArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetXHRBreakpoint in the DOMDebugger domain.
func (a *SetXHRBreakpointArgs) MarshalJSON() ([]byte, error) {
	type Copy SetXHRBreakpointArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetXHRBreakpointReply represents the return values for SetXHRBreakpoint in the DOMDebugger domain.
type SetXHRBreakpointReply struct {
}

// SetXHRBreakpointReply returns whether or not the FrameID matches the reply value for SetXHRBreakpoint in the DOMDebugger domain.
func (a *SetXHRBreakpointReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetXHRBreakpointReply %s", err)
		return false, err
	}
	return true, nil
}

// SetXHRBreakpointReply returns the FrameID value for SetXHRBreakpoint in the DOMDebugger domain.
func (a *SetXHRBreakpointReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetXHRBreakpoint in the DOMDebugger domain.
func (a *SetXHRBreakpointReply) UnmarshalJSON(b []byte) error {
	type Copy SetXHRBreakpointReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetXHRBreakpointReply(*c)
	return nil
}
