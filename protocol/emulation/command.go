// Code generated by cdpgen. DO NOT EDIT.

package emulation

import (
	"encoding/json"
	"log"

	"github.com/4ydx/cdp/protocol/dom"
	"github.com/4ydx/cdp/protocol/network"
	"github.com/4ydx/cdp/protocol/page"
)

const (
	CommandEmulationCanEmulate                        = "Emulation.canEmulate"
	CommandEmulationClearDeviceMetricsOverride        = "Emulation.clearDeviceMetricsOverride"
	CommandEmulationClearGeolocationOverride          = "Emulation.clearGeolocationOverride"
	CommandEmulationResetPageScaleFactor              = "Emulation.resetPageScaleFactor"
	CommandEmulationSetCPUThrottlingRate              = "Emulation.setCPUThrottlingRate"
	CommandEmulationSetDefaultBackgroundColorOverride = "Emulation.setDefaultBackgroundColorOverride"
	CommandEmulationSetDeviceMetricsOverride          = "Emulation.setDeviceMetricsOverride"
	CommandEmulationSetScrollbarsHidden               = "Emulation.setScrollbarsHidden"
	CommandEmulationSetDocumentCookieDisabled         = "Emulation.setDocumentCookieDisabled"
	CommandEmulationSetEmitTouchEventsForMouse        = "Emulation.setEmitTouchEventsForMouse"
	CommandEmulationSetEmulatedMedia                  = "Emulation.setEmulatedMedia"
	CommandEmulationSetGeolocationOverride            = "Emulation.setGeolocationOverride"
	CommandEmulationSetNavigatorOverrides             = "Emulation.setNavigatorOverrides"
	CommandEmulationSetPageScaleFactor                = "Emulation.setPageScaleFactor"
	CommandEmulationSetScriptExecutionDisabled        = "Emulation.setScriptExecutionDisabled"
	CommandEmulationSetTouchEmulationEnabled          = "Emulation.setTouchEmulationEnabled"
	CommandEmulationSetVirtualTimePolicy              = "Emulation.setVirtualTimePolicy"
	CommandEmulationSetVisibleSize                    = "Emulation.setVisibleSize"
	CommandEmulationSetUserAgentOverride              = "Emulation.setUserAgentOverride"
)

// CanEmulateArgs represents the arguments for CanEmulate in the Emulation domain.
type CanEmulateArgs struct {
}

// Unmarshal the byte array into a return value for CanEmulate in the Emulation domain.
func (a *CanEmulateArgs) UnmarshalJSON(b []byte) error {
	type Copy CanEmulateArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CanEmulateArgs(*c)
	return nil
}

// Marshall the byte array into a return value for CanEmulate in the Emulation domain.
func (a *CanEmulateArgs) MarshalJSON() ([]byte, error) {
	type Copy CanEmulateArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CanEmulateReply represents the return values for CanEmulate in the Emulation domain.
type CanEmulateReply struct {
	Result bool `json:"result"` // True if emulation is supported.
}

// CanEmulateReply returns whether or not the FrameID matches the reply value for CanEmulate in the Emulation domain.
func (a *CanEmulateReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: CanEmulateReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for CanEmulate in the Emulation domain.
func (a *CanEmulateReply) UnmarshalJSON(b []byte) error {
	type Copy CanEmulateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CanEmulateReply(*c)
	return nil
}

// ClearDeviceMetricsOverrideArgs represents the arguments for ClearDeviceMetricsOverride in the Emulation domain.
type ClearDeviceMetricsOverrideArgs struct {
}

// Unmarshal the byte array into a return value for ClearDeviceMetricsOverride in the Emulation domain.
func (a *ClearDeviceMetricsOverrideArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearDeviceMetricsOverrideArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearDeviceMetricsOverrideArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ClearDeviceMetricsOverride in the Emulation domain.
func (a *ClearDeviceMetricsOverrideArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearDeviceMetricsOverrideArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearDeviceMetricsOverrideReply represents the return values for ClearDeviceMetricsOverride in the Emulation domain.
type ClearDeviceMetricsOverrideReply struct {
}

// ClearDeviceMetricsOverrideReply returns whether or not the FrameID matches the reply value for ClearDeviceMetricsOverride in the Emulation domain.
func (a *ClearDeviceMetricsOverrideReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ClearDeviceMetricsOverrideReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for ClearDeviceMetricsOverride in the Emulation domain.
func (a *ClearDeviceMetricsOverrideReply) UnmarshalJSON(b []byte) error {
	type Copy ClearDeviceMetricsOverrideReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearDeviceMetricsOverrideReply(*c)
	return nil
}

// ClearGeolocationOverrideArgs represents the arguments for ClearGeolocationOverride in the Emulation domain.
type ClearGeolocationOverrideArgs struct {
}

// Unmarshal the byte array into a return value for ClearGeolocationOverride in the Emulation domain.
func (a *ClearGeolocationOverrideArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearGeolocationOverrideArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearGeolocationOverrideArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ClearGeolocationOverride in the Emulation domain.
func (a *ClearGeolocationOverrideArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearGeolocationOverrideArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearGeolocationOverrideReply represents the return values for ClearGeolocationOverride in the Emulation domain.
type ClearGeolocationOverrideReply struct {
}

// ClearGeolocationOverrideReply returns whether or not the FrameID matches the reply value for ClearGeolocationOverride in the Emulation domain.
func (a *ClearGeolocationOverrideReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ClearGeolocationOverrideReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for ClearGeolocationOverride in the Emulation domain.
func (a *ClearGeolocationOverrideReply) UnmarshalJSON(b []byte) error {
	type Copy ClearGeolocationOverrideReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearGeolocationOverrideReply(*c)
	return nil
}

// ResetPageScaleFactorArgs represents the arguments for ResetPageScaleFactor in the Emulation domain.
type ResetPageScaleFactorArgs struct {
}

// Unmarshal the byte array into a return value for ResetPageScaleFactor in the Emulation domain.
func (a *ResetPageScaleFactorArgs) UnmarshalJSON(b []byte) error {
	type Copy ResetPageScaleFactorArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResetPageScaleFactorArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ResetPageScaleFactor in the Emulation domain.
func (a *ResetPageScaleFactorArgs) MarshalJSON() ([]byte, error) {
	type Copy ResetPageScaleFactorArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ResetPageScaleFactorReply represents the return values for ResetPageScaleFactor in the Emulation domain.
type ResetPageScaleFactorReply struct {
}

// ResetPageScaleFactorReply returns whether or not the FrameID matches the reply value for ResetPageScaleFactor in the Emulation domain.
func (a *ResetPageScaleFactorReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ResetPageScaleFactorReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for ResetPageScaleFactor in the Emulation domain.
func (a *ResetPageScaleFactorReply) UnmarshalJSON(b []byte) error {
	type Copy ResetPageScaleFactorReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResetPageScaleFactorReply(*c)
	return nil
}

// SetCPUThrottlingRateArgs represents the arguments for SetCPUThrottlingRate in the Emulation domain.
type SetCPUThrottlingRateArgs struct {
	Rate float64 `json:"rate"` // Throttling rate as a slowdown factor (1 is no throttle, 2 is 2x slowdown, etc).
}

// Unmarshal the byte array into a return value for SetCPUThrottlingRate in the Emulation domain.
func (a *SetCPUThrottlingRateArgs) UnmarshalJSON(b []byte) error {
	type Copy SetCPUThrottlingRateArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetCPUThrottlingRateArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetCPUThrottlingRate in the Emulation domain.
func (a *SetCPUThrottlingRateArgs) MarshalJSON() ([]byte, error) {
	type Copy SetCPUThrottlingRateArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetCPUThrottlingRateReply represents the return values for SetCPUThrottlingRate in the Emulation domain.
type SetCPUThrottlingRateReply struct {
}

// SetCPUThrottlingRateReply returns whether or not the FrameID matches the reply value for SetCPUThrottlingRate in the Emulation domain.
func (a *SetCPUThrottlingRateReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetCPUThrottlingRateReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetCPUThrottlingRate in the Emulation domain.
func (a *SetCPUThrottlingRateReply) UnmarshalJSON(b []byte) error {
	type Copy SetCPUThrottlingRateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetCPUThrottlingRateReply(*c)
	return nil
}

// SetDefaultBackgroundColorOverrideArgs represents the arguments for SetDefaultBackgroundColorOverride in the Emulation domain.
type SetDefaultBackgroundColorOverrideArgs struct {
	Color dom.RGBA `json:"color,omitempty"` // RGBA of the default background color. If not specified, any existing override will be cleared.
}

// Unmarshal the byte array into a return value for SetDefaultBackgroundColorOverride in the Emulation domain.
func (a *SetDefaultBackgroundColorOverrideArgs) UnmarshalJSON(b []byte) error {
	type Copy SetDefaultBackgroundColorOverrideArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDefaultBackgroundColorOverrideArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetDefaultBackgroundColorOverride in the Emulation domain.
func (a *SetDefaultBackgroundColorOverrideArgs) MarshalJSON() ([]byte, error) {
	type Copy SetDefaultBackgroundColorOverrideArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetDefaultBackgroundColorOverrideReply represents the return values for SetDefaultBackgroundColorOverride in the Emulation domain.
type SetDefaultBackgroundColorOverrideReply struct {
}

// SetDefaultBackgroundColorOverrideReply returns whether or not the FrameID matches the reply value for SetDefaultBackgroundColorOverride in the Emulation domain.
func (a *SetDefaultBackgroundColorOverrideReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetDefaultBackgroundColorOverrideReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetDefaultBackgroundColorOverride in the Emulation domain.
func (a *SetDefaultBackgroundColorOverrideReply) UnmarshalJSON(b []byte) error {
	type Copy SetDefaultBackgroundColorOverrideReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDefaultBackgroundColorOverrideReply(*c)
	return nil
}

// SetDeviceMetricsOverrideArgs represents the arguments for SetDeviceMetricsOverride in the Emulation domain.
type SetDeviceMetricsOverrideArgs struct {
	Width             int     `json:"width"`             // Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	Height            int     `json:"height"`            // Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override.
	DeviceScaleFactor float64 `json:"deviceScaleFactor"` // Overriding device scale factor value. 0 disables the override.
	Mobile            bool    `json:"mobile"`            // Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more.
	// Scale Scale to apply to resulting view image.
	//
	// Note: This property is experimental.
	Scale float64 `json:"scale,omitempty"`
	// ScreenWidth Overriding screen width value in pixels (minimum 0,
	// maximum 10000000).
	//
	// Note: This property is experimental.
	ScreenWidth int `json:"screenWidth,omitempty"`
	// ScreenHeight Overriding screen height value in pixels (minimum 0,
	// maximum 10000000).
	//
	// Note: This property is experimental.
	ScreenHeight int `json:"screenHeight,omitempty"`
	// PositionX Overriding view X position on screen in pixels (minimum
	// 0, maximum 10000000).
	//
	// Note: This property is experimental.
	PositionX int `json:"positionX,omitempty"`
	// PositionY Overriding view Y position on screen in pixels (minimum
	// 0, maximum 10000000).
	//
	// Note: This property is experimental.
	PositionY int `json:"positionY,omitempty"`
	// DontSetVisibleSize Do not set visible view size, rely upon explicit
	// setVisibleSize call.
	//
	// Note: This property is experimental.
	DontSetVisibleSize bool              `json:"dontSetVisibleSize,omitempty"`
	ScreenOrientation  ScreenOrientation `json:"screenOrientation,omitempty"` // Screen orientation override.
	// Viewport If set, the visible area of the page will be overridden to
	// this viewport. This viewport change is not observed by the page,
	// e.g. viewport-relative elements do not change positions.
	//
	// Note: This property is experimental.
	Viewport page.Viewport `json:"viewport,omitempty"`
}

// Unmarshal the byte array into a return value for SetDeviceMetricsOverride in the Emulation domain.
func (a *SetDeviceMetricsOverrideArgs) UnmarshalJSON(b []byte) error {
	type Copy SetDeviceMetricsOverrideArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDeviceMetricsOverrideArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetDeviceMetricsOverride in the Emulation domain.
func (a *SetDeviceMetricsOverrideArgs) MarshalJSON() ([]byte, error) {
	type Copy SetDeviceMetricsOverrideArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetDeviceMetricsOverrideReply represents the return values for SetDeviceMetricsOverride in the Emulation domain.
type SetDeviceMetricsOverrideReply struct {
}

// SetDeviceMetricsOverrideReply returns whether or not the FrameID matches the reply value for SetDeviceMetricsOverride in the Emulation domain.
func (a *SetDeviceMetricsOverrideReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetDeviceMetricsOverrideReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetDeviceMetricsOverride in the Emulation domain.
func (a *SetDeviceMetricsOverrideReply) UnmarshalJSON(b []byte) error {
	type Copy SetDeviceMetricsOverrideReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDeviceMetricsOverrideReply(*c)
	return nil
}

// SetScrollbarsHiddenArgs represents the arguments for SetScrollbarsHidden in the Emulation domain.
type SetScrollbarsHiddenArgs struct {
	Hidden bool `json:"hidden"` // Whether scrollbars should be always hidden.
}

// Unmarshal the byte array into a return value for SetScrollbarsHidden in the Emulation domain.
func (a *SetScrollbarsHiddenArgs) UnmarshalJSON(b []byte) error {
	type Copy SetScrollbarsHiddenArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetScrollbarsHiddenArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetScrollbarsHidden in the Emulation domain.
func (a *SetScrollbarsHiddenArgs) MarshalJSON() ([]byte, error) {
	type Copy SetScrollbarsHiddenArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetScrollbarsHiddenReply represents the return values for SetScrollbarsHidden in the Emulation domain.
type SetScrollbarsHiddenReply struct {
}

// SetScrollbarsHiddenReply returns whether or not the FrameID matches the reply value for SetScrollbarsHidden in the Emulation domain.
func (a *SetScrollbarsHiddenReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetScrollbarsHiddenReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetScrollbarsHidden in the Emulation domain.
func (a *SetScrollbarsHiddenReply) UnmarshalJSON(b []byte) error {
	type Copy SetScrollbarsHiddenReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetScrollbarsHiddenReply(*c)
	return nil
}

// SetDocumentCookieDisabledArgs represents the arguments for SetDocumentCookieDisabled in the Emulation domain.
type SetDocumentCookieDisabledArgs struct {
	Disabled bool `json:"disabled"` // Whether document.coookie API should be disabled.
}

// Unmarshal the byte array into a return value for SetDocumentCookieDisabled in the Emulation domain.
func (a *SetDocumentCookieDisabledArgs) UnmarshalJSON(b []byte) error {
	type Copy SetDocumentCookieDisabledArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDocumentCookieDisabledArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetDocumentCookieDisabled in the Emulation domain.
func (a *SetDocumentCookieDisabledArgs) MarshalJSON() ([]byte, error) {
	type Copy SetDocumentCookieDisabledArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetDocumentCookieDisabledReply represents the return values for SetDocumentCookieDisabled in the Emulation domain.
type SetDocumentCookieDisabledReply struct {
}

// SetDocumentCookieDisabledReply returns whether or not the FrameID matches the reply value for SetDocumentCookieDisabled in the Emulation domain.
func (a *SetDocumentCookieDisabledReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetDocumentCookieDisabledReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetDocumentCookieDisabled in the Emulation domain.
func (a *SetDocumentCookieDisabledReply) UnmarshalJSON(b []byte) error {
	type Copy SetDocumentCookieDisabledReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetDocumentCookieDisabledReply(*c)
	return nil
}

// SetEmitTouchEventsForMouseArgs represents the arguments for SetEmitTouchEventsForMouse in the Emulation domain.
type SetEmitTouchEventsForMouseArgs struct {
	Enabled bool `json:"enabled"` // Whether touch emulation based on mouse input should be enabled.
	// Configuration Touch/gesture events configuration. Default: current
	// platform.
	//
	// Values: "mobile", "desktop".
	Configuration string `json:"configuration,omitempty"`
}

// Unmarshal the byte array into a return value for SetEmitTouchEventsForMouse in the Emulation domain.
func (a *SetEmitTouchEventsForMouseArgs) UnmarshalJSON(b []byte) error {
	type Copy SetEmitTouchEventsForMouseArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetEmitTouchEventsForMouseArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetEmitTouchEventsForMouse in the Emulation domain.
func (a *SetEmitTouchEventsForMouseArgs) MarshalJSON() ([]byte, error) {
	type Copy SetEmitTouchEventsForMouseArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetEmitTouchEventsForMouseReply represents the return values for SetEmitTouchEventsForMouse in the Emulation domain.
type SetEmitTouchEventsForMouseReply struct {
}

// SetEmitTouchEventsForMouseReply returns whether or not the FrameID matches the reply value for SetEmitTouchEventsForMouse in the Emulation domain.
func (a *SetEmitTouchEventsForMouseReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetEmitTouchEventsForMouseReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetEmitTouchEventsForMouse in the Emulation domain.
func (a *SetEmitTouchEventsForMouseReply) UnmarshalJSON(b []byte) error {
	type Copy SetEmitTouchEventsForMouseReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetEmitTouchEventsForMouseReply(*c)
	return nil
}

// SetEmulatedMediaArgs represents the arguments for SetEmulatedMedia in the Emulation domain.
type SetEmulatedMediaArgs struct {
	Media string `json:"media"` // Media type to emulate. Empty string disables the override.
}

// Unmarshal the byte array into a return value for SetEmulatedMedia in the Emulation domain.
func (a *SetEmulatedMediaArgs) UnmarshalJSON(b []byte) error {
	type Copy SetEmulatedMediaArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetEmulatedMediaArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetEmulatedMedia in the Emulation domain.
func (a *SetEmulatedMediaArgs) MarshalJSON() ([]byte, error) {
	type Copy SetEmulatedMediaArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetEmulatedMediaReply represents the return values for SetEmulatedMedia in the Emulation domain.
type SetEmulatedMediaReply struct {
}

// SetEmulatedMediaReply returns whether or not the FrameID matches the reply value for SetEmulatedMedia in the Emulation domain.
func (a *SetEmulatedMediaReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetEmulatedMediaReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetEmulatedMedia in the Emulation domain.
func (a *SetEmulatedMediaReply) UnmarshalJSON(b []byte) error {
	type Copy SetEmulatedMediaReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetEmulatedMediaReply(*c)
	return nil
}

// SetGeolocationOverrideArgs represents the arguments for SetGeolocationOverride in the Emulation domain.
type SetGeolocationOverrideArgs struct {
	Latitude  float64 `json:"latitude,omitempty"`  // Mock latitude
	Longitude float64 `json:"longitude,omitempty"` // Mock longitude
	Accuracy  float64 `json:"accuracy,omitempty"`  // Mock accuracy
}

// Unmarshal the byte array into a return value for SetGeolocationOverride in the Emulation domain.
func (a *SetGeolocationOverrideArgs) UnmarshalJSON(b []byte) error {
	type Copy SetGeolocationOverrideArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetGeolocationOverrideArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetGeolocationOverride in the Emulation domain.
func (a *SetGeolocationOverrideArgs) MarshalJSON() ([]byte, error) {
	type Copy SetGeolocationOverrideArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetGeolocationOverrideReply represents the return values for SetGeolocationOverride in the Emulation domain.
type SetGeolocationOverrideReply struct {
}

// SetGeolocationOverrideReply returns whether or not the FrameID matches the reply value for SetGeolocationOverride in the Emulation domain.
func (a *SetGeolocationOverrideReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetGeolocationOverrideReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetGeolocationOverride in the Emulation domain.
func (a *SetGeolocationOverrideReply) UnmarshalJSON(b []byte) error {
	type Copy SetGeolocationOverrideReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetGeolocationOverrideReply(*c)
	return nil
}

// SetNavigatorOverridesArgs represents the arguments for SetNavigatorOverrides in the Emulation domain.
type SetNavigatorOverridesArgs struct {
	Platform string `json:"platform"` // The platform navigator.platform should return.
}

// Unmarshal the byte array into a return value for SetNavigatorOverrides in the Emulation domain.
func (a *SetNavigatorOverridesArgs) UnmarshalJSON(b []byte) error {
	type Copy SetNavigatorOverridesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetNavigatorOverridesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetNavigatorOverrides in the Emulation domain.
func (a *SetNavigatorOverridesArgs) MarshalJSON() ([]byte, error) {
	type Copy SetNavigatorOverridesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetNavigatorOverridesReply represents the return values for SetNavigatorOverrides in the Emulation domain.
type SetNavigatorOverridesReply struct {
}

// SetNavigatorOverridesReply returns whether or not the FrameID matches the reply value for SetNavigatorOverrides in the Emulation domain.
func (a *SetNavigatorOverridesReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetNavigatorOverridesReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetNavigatorOverrides in the Emulation domain.
func (a *SetNavigatorOverridesReply) UnmarshalJSON(b []byte) error {
	type Copy SetNavigatorOverridesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetNavigatorOverridesReply(*c)
	return nil
}

// SetPageScaleFactorArgs represents the arguments for SetPageScaleFactor in the Emulation domain.
type SetPageScaleFactorArgs struct {
	PageScaleFactor float64 `json:"pageScaleFactor"` // Page scale factor.
}

// Unmarshal the byte array into a return value for SetPageScaleFactor in the Emulation domain.
func (a *SetPageScaleFactorArgs) UnmarshalJSON(b []byte) error {
	type Copy SetPageScaleFactorArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetPageScaleFactorArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetPageScaleFactor in the Emulation domain.
func (a *SetPageScaleFactorArgs) MarshalJSON() ([]byte, error) {
	type Copy SetPageScaleFactorArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetPageScaleFactorReply represents the return values for SetPageScaleFactor in the Emulation domain.
type SetPageScaleFactorReply struct {
}

// SetPageScaleFactorReply returns whether or not the FrameID matches the reply value for SetPageScaleFactor in the Emulation domain.
func (a *SetPageScaleFactorReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetPageScaleFactorReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetPageScaleFactor in the Emulation domain.
func (a *SetPageScaleFactorReply) UnmarshalJSON(b []byte) error {
	type Copy SetPageScaleFactorReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetPageScaleFactorReply(*c)
	return nil
}

// SetScriptExecutionDisabledArgs represents the arguments for SetScriptExecutionDisabled in the Emulation domain.
type SetScriptExecutionDisabledArgs struct {
	Value bool `json:"value"` // Whether script execution should be disabled in the page.
}

// Unmarshal the byte array into a return value for SetScriptExecutionDisabled in the Emulation domain.
func (a *SetScriptExecutionDisabledArgs) UnmarshalJSON(b []byte) error {
	type Copy SetScriptExecutionDisabledArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetScriptExecutionDisabledArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetScriptExecutionDisabled in the Emulation domain.
func (a *SetScriptExecutionDisabledArgs) MarshalJSON() ([]byte, error) {
	type Copy SetScriptExecutionDisabledArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetScriptExecutionDisabledReply represents the return values for SetScriptExecutionDisabled in the Emulation domain.
type SetScriptExecutionDisabledReply struct {
}

// SetScriptExecutionDisabledReply returns whether or not the FrameID matches the reply value for SetScriptExecutionDisabled in the Emulation domain.
func (a *SetScriptExecutionDisabledReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetScriptExecutionDisabledReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetScriptExecutionDisabled in the Emulation domain.
func (a *SetScriptExecutionDisabledReply) UnmarshalJSON(b []byte) error {
	type Copy SetScriptExecutionDisabledReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetScriptExecutionDisabledReply(*c)
	return nil
}

// SetTouchEmulationEnabledArgs represents the arguments for SetTouchEmulationEnabled in the Emulation domain.
type SetTouchEmulationEnabledArgs struct {
	Enabled        bool `json:"enabled"`                  // Whether the touch event emulation should be enabled.
	MaxTouchPoints int  `json:"maxTouchPoints,omitempty"` // Maximum touch points supported. Defaults to one.
}

// Unmarshal the byte array into a return value for SetTouchEmulationEnabled in the Emulation domain.
func (a *SetTouchEmulationEnabledArgs) UnmarshalJSON(b []byte) error {
	type Copy SetTouchEmulationEnabledArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetTouchEmulationEnabledArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetTouchEmulationEnabled in the Emulation domain.
func (a *SetTouchEmulationEnabledArgs) MarshalJSON() ([]byte, error) {
	type Copy SetTouchEmulationEnabledArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetTouchEmulationEnabledReply represents the return values for SetTouchEmulationEnabled in the Emulation domain.
type SetTouchEmulationEnabledReply struct {
}

// SetTouchEmulationEnabledReply returns whether or not the FrameID matches the reply value for SetTouchEmulationEnabled in the Emulation domain.
func (a *SetTouchEmulationEnabledReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetTouchEmulationEnabledReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetTouchEmulationEnabled in the Emulation domain.
func (a *SetTouchEmulationEnabledReply) UnmarshalJSON(b []byte) error {
	type Copy SetTouchEmulationEnabledReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetTouchEmulationEnabledReply(*c)
	return nil
}

// SetVirtualTimePolicyArgs represents the arguments for SetVirtualTimePolicy in the Emulation domain.
type SetVirtualTimePolicyArgs struct {
	Policy                            VirtualTimePolicy      `json:"policy"`                                      // No description.
	Budget                            float64                `json:"budget,omitempty"`                            // If set, after this many virtual milliseconds have elapsed virtual time will be paused and a virtualTimeBudgetExpired event is sent.
	MaxVirtualTimeTaskStarvationCount int                    `json:"maxVirtualTimeTaskStarvationCount,omitempty"` // If set this specifies the maximum number of tasks that can be run before virtual is forced forwards to prevent deadlock.
	WaitForNavigation                 bool                   `json:"waitForNavigation,omitempty"`                 // If set the virtual time policy change should be deferred until any frame starts navigating. Note any previous deferred policy change is superseded.
	InitialVirtualTime                network.TimeSinceEpoch `json:"initialVirtualTime,omitempty"`                // If set, base::Time::Now will be overridden to initially return this value.
}

// Unmarshal the byte array into a return value for SetVirtualTimePolicy in the Emulation domain.
func (a *SetVirtualTimePolicyArgs) UnmarshalJSON(b []byte) error {
	type Copy SetVirtualTimePolicyArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetVirtualTimePolicyArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetVirtualTimePolicy in the Emulation domain.
func (a *SetVirtualTimePolicyArgs) MarshalJSON() ([]byte, error) {
	type Copy SetVirtualTimePolicyArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetVirtualTimePolicyReply represents the return values for SetVirtualTimePolicy in the Emulation domain.
type SetVirtualTimePolicyReply struct {
	VirtualTimeTicksBase float64 `json:"virtualTimeTicksBase"` // Absolute timestamp at which virtual time was first enabled (up time in milliseconds).
}

// SetVirtualTimePolicyReply returns whether or not the FrameID matches the reply value for SetVirtualTimePolicy in the Emulation domain.
func (a *SetVirtualTimePolicyReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetVirtualTimePolicyReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetVirtualTimePolicy in the Emulation domain.
func (a *SetVirtualTimePolicyReply) UnmarshalJSON(b []byte) error {
	type Copy SetVirtualTimePolicyReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetVirtualTimePolicyReply(*c)
	return nil
}

// SetVisibleSizeArgs represents the arguments for SetVisibleSize in the Emulation domain.
type SetVisibleSizeArgs struct {
	Width  int `json:"width"`  // Frame width (DIP).
	Height int `json:"height"` // Frame height (DIP).
}

// Unmarshal the byte array into a return value for SetVisibleSize in the Emulation domain.
func (a *SetVisibleSizeArgs) UnmarshalJSON(b []byte) error {
	type Copy SetVisibleSizeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetVisibleSizeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetVisibleSize in the Emulation domain.
func (a *SetVisibleSizeArgs) MarshalJSON() ([]byte, error) {
	type Copy SetVisibleSizeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetVisibleSizeReply represents the return values for SetVisibleSize in the Emulation domain.
type SetVisibleSizeReply struct {
}

// SetVisibleSizeReply returns whether or not the FrameID matches the reply value for SetVisibleSize in the Emulation domain.
func (a *SetVisibleSizeReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetVisibleSizeReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetVisibleSize in the Emulation domain.
func (a *SetVisibleSizeReply) UnmarshalJSON(b []byte) error {
	type Copy SetVisibleSizeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetVisibleSizeReply(*c)
	return nil
}

// SetUserAgentOverrideArgs represents the arguments for SetUserAgentOverride in the Emulation domain.
type SetUserAgentOverrideArgs struct {
	UserAgent      string `json:"userAgent"`                // User agent to use.
	AcceptLanguage string `json:"acceptLanguage,omitempty"` // Browser langugage to emulate.
	Platform       string `json:"platform,omitempty"`       // The platform navigator.platform should return.
}

// Unmarshal the byte array into a return value for SetUserAgentOverride in the Emulation domain.
func (a *SetUserAgentOverrideArgs) UnmarshalJSON(b []byte) error {
	type Copy SetUserAgentOverrideArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetUserAgentOverrideArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetUserAgentOverride in the Emulation domain.
func (a *SetUserAgentOverrideArgs) MarshalJSON() ([]byte, error) {
	type Copy SetUserAgentOverrideArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetUserAgentOverrideReply represents the return values for SetUserAgentOverride in the Emulation domain.
type SetUserAgentOverrideReply struct {
}

// SetUserAgentOverrideReply returns whether or not the FrameID matches the reply value for SetUserAgentOverride in the Emulation domain.
func (a *SetUserAgentOverrideReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SetUserAgentOverrideReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SetUserAgentOverride in the Emulation domain.
func (a *SetUserAgentOverrideReply) UnmarshalJSON(b []byte) error {
	type Copy SetUserAgentOverrideReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetUserAgentOverrideReply(*c)
	return nil
}
