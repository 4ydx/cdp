// Code generated by cdpgen. DO NOT EDIT.

package emulation

import (
	"encoding/json"
)

const EventEmulationVirtualTimeAdvanced = "Emulation.virtualTimeAdvanced"

// VirtualTimeAdvancedReply is the reply for VirtualTimeAdvanced events.
type VirtualTimeAdvancedReply struct {
	VirtualTimeElapsed float64 `json:"virtualTimeElapsed"` // The amount of virtual time that has elapsed in milliseconds since virtual time was first enabled.
}

// Unmarshal the byte array into a return value for VirtualTimeAdvanced in the Emulation domain.
func (a *VirtualTimeAdvancedReply) UnmarshalJSON(b []byte) error {
	type Copy VirtualTimeAdvancedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = VirtualTimeAdvancedReply(*c)
	return nil
}

const EventEmulationVirtualTimeBudgetExpired = "Emulation.virtualTimeBudgetExpired"

// VirtualTimeBudgetExpiredReply is the reply for VirtualTimeBudgetExpired events.
type VirtualTimeBudgetExpiredReply struct {
}

// Unmarshal the byte array into a return value for VirtualTimeBudgetExpired in the Emulation domain.
func (a *VirtualTimeBudgetExpiredReply) UnmarshalJSON(b []byte) error {
	type Copy VirtualTimeBudgetExpiredReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = VirtualTimeBudgetExpiredReply(*c)
	return nil
}

const EventEmulationVirtualTimePaused = "Emulation.virtualTimePaused"

// VirtualTimePausedReply is the reply for VirtualTimePaused events.
type VirtualTimePausedReply struct {
	VirtualTimeElapsed float64 `json:"virtualTimeElapsed"` // The amount of virtual time that has elapsed in milliseconds since virtual time was first enabled.
}

// Unmarshal the byte array into a return value for VirtualTimePaused in the Emulation domain.
func (a *VirtualTimePausedReply) UnmarshalJSON(b []byte) error {
	type Copy VirtualTimePausedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = VirtualTimePausedReply(*c)
	return nil
}
