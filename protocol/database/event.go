// Code generated by cdpgen. DO NOT EDIT.

package database

import (
	"encoding/json"
	"log"
)

const (
	EventDatabaseAddDatabase = "Database.addDatabase"
)

type Unmarshaler func() json.Unmarshaler

var EventConstants = map[string]Unmarshaler{
	EventDatabaseAddDatabase: func() json.Unmarshaler { return &AddDatabaseReply{} },
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	if ok {
		return e(), ok
	}
	return nil, ok
}

// AddDatabaseReply is the reply for AddDatabase events.
type AddDatabaseReply struct {
	Database Database `json:"database"` // No description.
}

// Unmarshal the byte array into a return value for AddDatabase in the Database domain.
func (a *AddDatabaseReply) UnmarshalJSON(b []byte) error {
	type Copy AddDatabaseReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AddDatabaseReply(*c)
	return nil
}

// AddDatabaseReply returns whether or not the FrameID matches the reply value for AddDatabase in the Database domain.
func (a *AddDatabaseReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: AddDatabaseReply %s", err)
		return false, err
	}
	return true, nil
}

// AddDatabaseReply returns the FrameID for AddDatabase in the Database domain.
func (a *AddDatabaseReply) GetFrameID() string {
	return ""
}
