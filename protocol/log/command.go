// Code generated by cdpgen. DO NOT EDIT.

package log

import (
	"encoding/json"
	"log"
)

const (
	CommandLogClear                 = "Log.clear"
	CommandLogDisable               = "Log.disable"
	CommandLogEnable                = "Log.enable"
	CommandLogStartViolationsReport = "Log.startViolationsReport"
	CommandLogStopViolationsReport  = "Log.stopViolationsReport"
)

// ClearArgs represents the arguments for Clear in the Log domain.
type ClearArgs struct {
}

// Unmarshal the byte array into a return value for Clear in the Log domain.
func (a *ClearArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Clear in the Log domain.
func (a *ClearArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearReply represents the return values for Clear in the Log domain.
type ClearReply struct {
}

// ClearReply returns whether or not the FrameID matches the reply value for Clear in the Log domain.
func (a *ClearReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ClearReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Clear in the Log domain.
func (a *ClearReply) UnmarshalJSON(b []byte) error {
	type Copy ClearReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearReply(*c)
	return nil
}

// DisableArgs represents the arguments for Disable in the Log domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the Log domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the Log domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the Log domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the Log domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: DisableReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Disable in the Log domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// EnableArgs represents the arguments for Enable in the Log domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the Log domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the Log domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the Log domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the Log domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: EnableReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Enable in the Log domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// StartViolationsReportArgs represents the arguments for StartViolationsReport in the Log domain.
type StartViolationsReportArgs struct {
	Config []ViolationSetting `json:"config"` // Configuration for violations.
}

// Unmarshal the byte array into a return value for StartViolationsReport in the Log domain.
func (a *StartViolationsReportArgs) UnmarshalJSON(b []byte) error {
	type Copy StartViolationsReportArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartViolationsReportArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartViolationsReport in the Log domain.
func (a *StartViolationsReportArgs) MarshalJSON() ([]byte, error) {
	type Copy StartViolationsReportArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartViolationsReportReply represents the return values for StartViolationsReport in the Log domain.
type StartViolationsReportReply struct {
}

// StartViolationsReportReply returns whether or not the FrameID matches the reply value for StartViolationsReport in the Log domain.
func (a *StartViolationsReportReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StartViolationsReportReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for StartViolationsReport in the Log domain.
func (a *StartViolationsReportReply) UnmarshalJSON(b []byte) error {
	type Copy StartViolationsReportReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartViolationsReportReply(*c)
	return nil
}

// StopViolationsReportArgs represents the arguments for StopViolationsReport in the Log domain.
type StopViolationsReportArgs struct {
}

// Unmarshal the byte array into a return value for StopViolationsReport in the Log domain.
func (a *StopViolationsReportArgs) UnmarshalJSON(b []byte) error {
	type Copy StopViolationsReportArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopViolationsReportArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopViolationsReport in the Log domain.
func (a *StopViolationsReportArgs) MarshalJSON() ([]byte, error) {
	type Copy StopViolationsReportArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopViolationsReportReply represents the return values for StopViolationsReport in the Log domain.
type StopViolationsReportReply struct {
}

// StopViolationsReportReply returns whether or not the FrameID matches the reply value for StopViolationsReport in the Log domain.
func (a *StopViolationsReportReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: StopViolationsReportReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for StopViolationsReport in the Log domain.
func (a *StopViolationsReportReply) UnmarshalJSON(b []byte) error {
	type Copy StopViolationsReportReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopViolationsReportReply(*c)
	return nil
}
