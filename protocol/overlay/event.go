// Code generated by cdpgen. DO NOT EDIT.

package overlay

import (
	"encoding/json"
	"log"

	"github.com/4ydx/cdp/protocol/dom"
	"github.com/4ydx/cdp/protocol/page"
)

const (
	EventOverlayInspectNodeRequested   = "Overlay.inspectNodeRequested"
	EventOverlayNodeHighlightRequested = "Overlay.nodeHighlightRequested"
	EventOverlayScreenshotRequested    = "Overlay.screenshotRequested"
	EventOverlayInspectModeCanceled    = "Overlay.inspectModeCanceled"
)

type Unmarshaler func() json.Unmarshaler

var EventConstants = map[string]Unmarshaler{
	EventOverlayInspectNodeRequested:   func() json.Unmarshaler { return &InspectNodeRequestedReply{} },
	EventOverlayNodeHighlightRequested: func() json.Unmarshaler { return &NodeHighlightRequestedReply{} },
	EventOverlayScreenshotRequested:    func() json.Unmarshaler { return &ScreenshotRequestedReply{} },
	EventOverlayInspectModeCanceled:    func() json.Unmarshaler { return &InspectModeCanceledReply{} },
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	if ok {
		return e(), ok
	}
	return nil, ok
}

// InspectNodeRequestedReply is the reply for InspectNodeRequested events.
type InspectNodeRequestedReply struct {
	BackendNodeID dom.BackendNodeID `json:"backendNodeId"` // Id of the node to inspect.
}

// Unmarshal the byte array into a return value for InspectNodeRequested in the Overlay domain.
func (a *InspectNodeRequestedReply) UnmarshalJSON(b []byte) error {
	type Copy InspectNodeRequestedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = InspectNodeRequestedReply(*c)
	return nil
}

// InspectNodeRequestedReply returns whether or not the FrameID matches the reply value for InspectNodeRequested in the Overlay domain.
func (a *InspectNodeRequestedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: InspectNodeRequestedReply %s", err)
		return false, err
	}
	return true, nil
}

// InspectNodeRequestedReply returns the FrameID for InspectNodeRequested in the Overlay domain.
func (a *InspectNodeRequestedReply) GetFrameID() string {
	return ""
}

// NodeHighlightRequestedReply is the reply for NodeHighlightRequested events.
type NodeHighlightRequestedReply struct {
	NodeID dom.NodeID `json:"nodeId"` // No description.
}

// Unmarshal the byte array into a return value for NodeHighlightRequested in the Overlay domain.
func (a *NodeHighlightRequestedReply) UnmarshalJSON(b []byte) error {
	type Copy NodeHighlightRequestedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = NodeHighlightRequestedReply(*c)
	return nil
}

// NodeHighlightRequestedReply returns whether or not the FrameID matches the reply value for NodeHighlightRequested in the Overlay domain.
func (a *NodeHighlightRequestedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: NodeHighlightRequestedReply %s", err)
		return false, err
	}
	return true, nil
}

// NodeHighlightRequestedReply returns the FrameID for NodeHighlightRequested in the Overlay domain.
func (a *NodeHighlightRequestedReply) GetFrameID() string {
	return ""
}

// ScreenshotRequestedReply is the reply for ScreenshotRequested events.
type ScreenshotRequestedReply struct {
	Viewport page.Viewport `json:"viewport"` // Viewport to capture, in device independent pixels (dip).
}

// Unmarshal the byte array into a return value for ScreenshotRequested in the Overlay domain.
func (a *ScreenshotRequestedReply) UnmarshalJSON(b []byte) error {
	type Copy ScreenshotRequestedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ScreenshotRequestedReply(*c)
	return nil
}

// ScreenshotRequestedReply returns whether or not the FrameID matches the reply value for ScreenshotRequested in the Overlay domain.
func (a *ScreenshotRequestedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ScreenshotRequestedReply %s", err)
		return false, err
	}
	return true, nil
}

// ScreenshotRequestedReply returns the FrameID for ScreenshotRequested in the Overlay domain.
func (a *ScreenshotRequestedReply) GetFrameID() string {
	return ""
}

// InspectModeCanceledReply is the reply for InspectModeCanceled events.
type InspectModeCanceledReply struct {
}

// Unmarshal the byte array into a return value for InspectModeCanceled in the Overlay domain.
func (a *InspectModeCanceledReply) UnmarshalJSON(b []byte) error {
	type Copy InspectModeCanceledReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = InspectModeCanceledReply(*c)
	return nil
}

// InspectModeCanceledReply returns whether or not the FrameID matches the reply value for InspectModeCanceled in the Overlay domain.
func (a *InspectModeCanceledReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: InspectModeCanceledReply %s", err)
		return false, err
	}
	return true, nil
}

// InspectModeCanceledReply returns the FrameID for InspectModeCanceled in the Overlay domain.
func (a *InspectModeCanceledReply) GetFrameID() string {
	return ""
}
