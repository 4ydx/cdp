// Code generated by cdpgen. DO NOT EDIT.

package overlay

import (
	"encoding/json"
	"log"

	shared "github.com/4ydx/cdp/protocol"
	"github.com/4ydx/cdp/protocol/dom"
)

const (
	CommandOverlayDisable                      = "Overlay.disable"
	CommandOverlayEnable                       = "Overlay.enable"
	CommandOverlayGetHighlightObjectForTest    = "Overlay.getHighlightObjectForTest"
	CommandOverlayHideHighlight                = "Overlay.hideHighlight"
	CommandOverlayHighlightFrame               = "Overlay.highlightFrame"
	CommandOverlayHighlightNode                = "Overlay.highlightNode"
	CommandOverlayHighlightQuad                = "Overlay.highlightQuad"
	CommandOverlayHighlightRect                = "Overlay.highlightRect"
	CommandOverlaySetInspectMode               = "Overlay.setInspectMode"
	CommandOverlaySetShowAdHighlights          = "Overlay.setShowAdHighlights"
	CommandOverlaySetPausedInDebuggerMessage   = "Overlay.setPausedInDebuggerMessage"
	CommandOverlaySetShowDebugBorders          = "Overlay.setShowDebugBorders"
	CommandOverlaySetShowFPSCounter            = "Overlay.setShowFPSCounter"
	CommandOverlaySetShowPaintRects            = "Overlay.setShowPaintRects"
	CommandOverlaySetShowLayoutShiftRegions    = "Overlay.setShowLayoutShiftRegions"
	CommandOverlaySetShowScrollBottleneckRects = "Overlay.setShowScrollBottleneckRects"
	CommandOverlaySetShowHitTestBorders        = "Overlay.setShowHitTestBorders"
	CommandOverlaySetShowViewportSizeOnResize  = "Overlay.setShowViewportSizeOnResize"
)

// DisableArgs represents the arguments for Disable in the Overlay domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the Overlay domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the Overlay domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the Overlay domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the Overlay domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: DisableReply %s", err)
		return false, err
	}
	return true, nil
}

// DisableReply returns the FrameID value for Disable in the Overlay domain.
func (a *DisableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Disable in the Overlay domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// EnableArgs represents the arguments for Enable in the Overlay domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the Overlay domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the Overlay domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the Overlay domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the Overlay domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: EnableReply %s", err)
		return false, err
	}
	return true, nil
}

// EnableReply returns the FrameID value for Enable in the Overlay domain.
func (a *EnableReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for Enable in the Overlay domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// GetHighlightObjectForTestArgs represents the arguments for GetHighlightObjectForTest in the Overlay domain.
type GetHighlightObjectForTestArgs struct {
	NodeID          dom.NodeID `json:"nodeId"`                    // Id of the node to get highlight object for.
	IncludeDistance bool       `json:"includeDistance,omitempty"` // Whether to include distance info.
	IncludeStyle    bool       `json:"includeStyle,omitempty"`    // Whether to include style info.
}

// Unmarshal the byte array into a return value for GetHighlightObjectForTest in the Overlay domain.
func (a *GetHighlightObjectForTestArgs) UnmarshalJSON(b []byte) error {
	type Copy GetHighlightObjectForTestArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetHighlightObjectForTestArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetHighlightObjectForTest in the Overlay domain.
func (a *GetHighlightObjectForTestArgs) MarshalJSON() ([]byte, error) {
	type Copy GetHighlightObjectForTestArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetHighlightObjectForTestReply represents the return values for GetHighlightObjectForTest in the Overlay domain.
type GetHighlightObjectForTestReply struct {
	Highlight json.RawMessage `json:"highlight"` // Highlight data for the node.
}

// GetHighlightObjectForTestReply returns whether or not the FrameID matches the reply value for GetHighlightObjectForTest in the Overlay domain.
func (a *GetHighlightObjectForTestReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: GetHighlightObjectForTestReply %s", err)
		return false, err
	}
	return true, nil
}

// GetHighlightObjectForTestReply returns the FrameID value for GetHighlightObjectForTest in the Overlay domain.
func (a *GetHighlightObjectForTestReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for GetHighlightObjectForTest in the Overlay domain.
func (a *GetHighlightObjectForTestReply) UnmarshalJSON(b []byte) error {
	type Copy GetHighlightObjectForTestReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetHighlightObjectForTestReply(*c)
	return nil
}

// HideHighlightArgs represents the arguments for HideHighlight in the Overlay domain.
type HideHighlightArgs struct {
}

// Unmarshal the byte array into a return value for HideHighlight in the Overlay domain.
func (a *HideHighlightArgs) UnmarshalJSON(b []byte) error {
	type Copy HideHighlightArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HideHighlightArgs(*c)
	return nil
}

// Marshall the byte array into a return value for HideHighlight in the Overlay domain.
func (a *HideHighlightArgs) MarshalJSON() ([]byte, error) {
	type Copy HideHighlightArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// HideHighlightReply represents the return values for HideHighlight in the Overlay domain.
type HideHighlightReply struct {
}

// HideHighlightReply returns whether or not the FrameID matches the reply value for HideHighlight in the Overlay domain.
func (a *HideHighlightReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: HideHighlightReply %s", err)
		return false, err
	}
	return true, nil
}

// HideHighlightReply returns the FrameID value for HideHighlight in the Overlay domain.
func (a *HideHighlightReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for HideHighlight in the Overlay domain.
func (a *HideHighlightReply) UnmarshalJSON(b []byte) error {
	type Copy HideHighlightReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HideHighlightReply(*c)
	return nil
}

// HighlightFrameArgs represents the arguments for HighlightFrame in the Overlay domain.
type HighlightFrameArgs struct {
	FrameID             shared.FrameID `json:"frameId"`                       // Identifier of the frame to highlight.
	ContentColor        *dom.RGBA      `json:"contentColor,omitempty"`        // The content box highlight fill color (default: transparent).
	ContentOutlineColor *dom.RGBA      `json:"contentOutlineColor,omitempty"` // The content box highlight outline color (default: transparent).
}

// Unmarshal the byte array into a return value for HighlightFrame in the Overlay domain.
func (a *HighlightFrameArgs) UnmarshalJSON(b []byte) error {
	type Copy HighlightFrameArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HighlightFrameArgs(*c)
	return nil
}

// Marshall the byte array into a return value for HighlightFrame in the Overlay domain.
func (a *HighlightFrameArgs) MarshalJSON() ([]byte, error) {
	type Copy HighlightFrameArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// HighlightFrameReply represents the return values for HighlightFrame in the Overlay domain.
type HighlightFrameReply struct {
}

// HighlightFrameReply returns whether or not the FrameID matches the reply value for HighlightFrame in the Overlay domain.
func (a *HighlightFrameReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: HighlightFrameReply %s", err)
		return false, err
	}
	return true, nil
}

// HighlightFrameReply returns the FrameID value for HighlightFrame in the Overlay domain.
func (a *HighlightFrameReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for HighlightFrame in the Overlay domain.
func (a *HighlightFrameReply) UnmarshalJSON(b []byte) error {
	type Copy HighlightFrameReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HighlightFrameReply(*c)
	return nil
}

// HighlightNodeArgs represents the arguments for HighlightNode in the Overlay domain.
type HighlightNodeArgs struct {
	HighlightConfig HighlightConfig       `json:"highlightConfig"`         // A descriptor for the highlight appearance.
	NodeID          dom.NodeID            `json:"nodeId,omitempty"`        // Identifier of the node to highlight.
	BackendNodeID   dom.BackendNodeID     `json:"backendNodeId,omitempty"` // Identifier of the backend node to highlight.
	ObjectID        shared.RemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node to be highlighted.
	Selector        string                `json:"selector,omitempty"`      // Selectors to highlight relevant nodes.
}

// Unmarshal the byte array into a return value for HighlightNode in the Overlay domain.
func (a *HighlightNodeArgs) UnmarshalJSON(b []byte) error {
	type Copy HighlightNodeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HighlightNodeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for HighlightNode in the Overlay domain.
func (a *HighlightNodeArgs) MarshalJSON() ([]byte, error) {
	type Copy HighlightNodeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// HighlightNodeReply represents the return values for HighlightNode in the Overlay domain.
type HighlightNodeReply struct {
}

// HighlightNodeReply returns whether or not the FrameID matches the reply value for HighlightNode in the Overlay domain.
func (a *HighlightNodeReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: HighlightNodeReply %s", err)
		return false, err
	}
	return true, nil
}

// HighlightNodeReply returns the FrameID value for HighlightNode in the Overlay domain.
func (a *HighlightNodeReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for HighlightNode in the Overlay domain.
func (a *HighlightNodeReply) UnmarshalJSON(b []byte) error {
	type Copy HighlightNodeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HighlightNodeReply(*c)
	return nil
}

// HighlightQuadArgs represents the arguments for HighlightQuad in the Overlay domain.
type HighlightQuadArgs struct {
	Quad         dom.Quad  `json:"quad"`                   // Quad to highlight
	Color        *dom.RGBA `json:"color,omitempty"`        // The highlight fill color (default: transparent).
	OutlineColor *dom.RGBA `json:"outlineColor,omitempty"` // The highlight outline color (default: transparent).
}

// Unmarshal the byte array into a return value for HighlightQuad in the Overlay domain.
func (a *HighlightQuadArgs) UnmarshalJSON(b []byte) error {
	type Copy HighlightQuadArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HighlightQuadArgs(*c)
	return nil
}

// Marshall the byte array into a return value for HighlightQuad in the Overlay domain.
func (a *HighlightQuadArgs) MarshalJSON() ([]byte, error) {
	type Copy HighlightQuadArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// HighlightQuadReply represents the return values for HighlightQuad in the Overlay domain.
type HighlightQuadReply struct {
}

// HighlightQuadReply returns whether or not the FrameID matches the reply value for HighlightQuad in the Overlay domain.
func (a *HighlightQuadReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: HighlightQuadReply %s", err)
		return false, err
	}
	return true, nil
}

// HighlightQuadReply returns the FrameID value for HighlightQuad in the Overlay domain.
func (a *HighlightQuadReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for HighlightQuad in the Overlay domain.
func (a *HighlightQuadReply) UnmarshalJSON(b []byte) error {
	type Copy HighlightQuadReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HighlightQuadReply(*c)
	return nil
}

// HighlightRectArgs represents the arguments for HighlightRect in the Overlay domain.
type HighlightRectArgs struct {
	X            int       `json:"x"`                      // X coordinate
	Y            int       `json:"y"`                      // Y coordinate
	Width        int       `json:"width"`                  // Rectangle width
	Height       int       `json:"height"`                 // Rectangle height
	Color        *dom.RGBA `json:"color,omitempty"`        // The highlight fill color (default: transparent).
	OutlineColor *dom.RGBA `json:"outlineColor,omitempty"` // The highlight outline color (default: transparent).
}

// Unmarshal the byte array into a return value for HighlightRect in the Overlay domain.
func (a *HighlightRectArgs) UnmarshalJSON(b []byte) error {
	type Copy HighlightRectArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HighlightRectArgs(*c)
	return nil
}

// Marshall the byte array into a return value for HighlightRect in the Overlay domain.
func (a *HighlightRectArgs) MarshalJSON() ([]byte, error) {
	type Copy HighlightRectArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// HighlightRectReply represents the return values for HighlightRect in the Overlay domain.
type HighlightRectReply struct {
}

// HighlightRectReply returns whether or not the FrameID matches the reply value for HighlightRect in the Overlay domain.
func (a *HighlightRectReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: HighlightRectReply %s", err)
		return false, err
	}
	return true, nil
}

// HighlightRectReply returns the FrameID value for HighlightRect in the Overlay domain.
func (a *HighlightRectReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for HighlightRect in the Overlay domain.
func (a *HighlightRectReply) UnmarshalJSON(b []byte) error {
	type Copy HighlightRectReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = HighlightRectReply(*c)
	return nil
}

// SetInspectModeArgs represents the arguments for SetInspectMode in the Overlay domain.
type SetInspectModeArgs struct {
	Mode            InspectMode      `json:"mode"`                      // Set an inspection mode.
	HighlightConfig *HighlightConfig `json:"highlightConfig,omitempty"` // A descriptor for the highlight appearance of hovered-over nodes. May be omitted if `enabled == false`.
}

// Unmarshal the byte array into a return value for SetInspectMode in the Overlay domain.
func (a *SetInspectModeArgs) UnmarshalJSON(b []byte) error {
	type Copy SetInspectModeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetInspectModeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetInspectMode in the Overlay domain.
func (a *SetInspectModeArgs) MarshalJSON() ([]byte, error) {
	type Copy SetInspectModeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetInspectModeReply represents the return values for SetInspectMode in the Overlay domain.
type SetInspectModeReply struct {
}

// SetInspectModeReply returns whether or not the FrameID matches the reply value for SetInspectMode in the Overlay domain.
func (a *SetInspectModeReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetInspectModeReply %s", err)
		return false, err
	}
	return true, nil
}

// SetInspectModeReply returns the FrameID value for SetInspectMode in the Overlay domain.
func (a *SetInspectModeReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetInspectMode in the Overlay domain.
func (a *SetInspectModeReply) UnmarshalJSON(b []byte) error {
	type Copy SetInspectModeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetInspectModeReply(*c)
	return nil
}

// SetShowAdHighlightsArgs represents the arguments for SetShowAdHighlights in the Overlay domain.
type SetShowAdHighlightsArgs struct {
	Show bool `json:"show"` // True for showing ad highlights
}

// Unmarshal the byte array into a return value for SetShowAdHighlights in the Overlay domain.
func (a *SetShowAdHighlightsArgs) UnmarshalJSON(b []byte) error {
	type Copy SetShowAdHighlightsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowAdHighlightsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetShowAdHighlights in the Overlay domain.
func (a *SetShowAdHighlightsArgs) MarshalJSON() ([]byte, error) {
	type Copy SetShowAdHighlightsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetShowAdHighlightsReply represents the return values for SetShowAdHighlights in the Overlay domain.
type SetShowAdHighlightsReply struct {
}

// SetShowAdHighlightsReply returns whether or not the FrameID matches the reply value for SetShowAdHighlights in the Overlay domain.
func (a *SetShowAdHighlightsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetShowAdHighlightsReply %s", err)
		return false, err
	}
	return true, nil
}

// SetShowAdHighlightsReply returns the FrameID value for SetShowAdHighlights in the Overlay domain.
func (a *SetShowAdHighlightsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetShowAdHighlights in the Overlay domain.
func (a *SetShowAdHighlightsReply) UnmarshalJSON(b []byte) error {
	type Copy SetShowAdHighlightsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowAdHighlightsReply(*c)
	return nil
}

// SetPausedInDebuggerMessageArgs represents the arguments for SetPausedInDebuggerMessage in the Overlay domain.
type SetPausedInDebuggerMessageArgs struct {
	Message string `json:"message,omitempty"` // The message to display, also triggers resume and step over controls.
}

// Unmarshal the byte array into a return value for SetPausedInDebuggerMessage in the Overlay domain.
func (a *SetPausedInDebuggerMessageArgs) UnmarshalJSON(b []byte) error {
	type Copy SetPausedInDebuggerMessageArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetPausedInDebuggerMessageArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetPausedInDebuggerMessage in the Overlay domain.
func (a *SetPausedInDebuggerMessageArgs) MarshalJSON() ([]byte, error) {
	type Copy SetPausedInDebuggerMessageArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetPausedInDebuggerMessageReply represents the return values for SetPausedInDebuggerMessage in the Overlay domain.
type SetPausedInDebuggerMessageReply struct {
}

// SetPausedInDebuggerMessageReply returns whether or not the FrameID matches the reply value for SetPausedInDebuggerMessage in the Overlay domain.
func (a *SetPausedInDebuggerMessageReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetPausedInDebuggerMessageReply %s", err)
		return false, err
	}
	return true, nil
}

// SetPausedInDebuggerMessageReply returns the FrameID value for SetPausedInDebuggerMessage in the Overlay domain.
func (a *SetPausedInDebuggerMessageReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetPausedInDebuggerMessage in the Overlay domain.
func (a *SetPausedInDebuggerMessageReply) UnmarshalJSON(b []byte) error {
	type Copy SetPausedInDebuggerMessageReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetPausedInDebuggerMessageReply(*c)
	return nil
}

// SetShowDebugBordersArgs represents the arguments for SetShowDebugBorders in the Overlay domain.
type SetShowDebugBordersArgs struct {
	Show bool `json:"show"` // True for showing debug borders
}

// Unmarshal the byte array into a return value for SetShowDebugBorders in the Overlay domain.
func (a *SetShowDebugBordersArgs) UnmarshalJSON(b []byte) error {
	type Copy SetShowDebugBordersArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowDebugBordersArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetShowDebugBorders in the Overlay domain.
func (a *SetShowDebugBordersArgs) MarshalJSON() ([]byte, error) {
	type Copy SetShowDebugBordersArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetShowDebugBordersReply represents the return values for SetShowDebugBorders in the Overlay domain.
type SetShowDebugBordersReply struct {
}

// SetShowDebugBordersReply returns whether or not the FrameID matches the reply value for SetShowDebugBorders in the Overlay domain.
func (a *SetShowDebugBordersReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetShowDebugBordersReply %s", err)
		return false, err
	}
	return true, nil
}

// SetShowDebugBordersReply returns the FrameID value for SetShowDebugBorders in the Overlay domain.
func (a *SetShowDebugBordersReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetShowDebugBorders in the Overlay domain.
func (a *SetShowDebugBordersReply) UnmarshalJSON(b []byte) error {
	type Copy SetShowDebugBordersReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowDebugBordersReply(*c)
	return nil
}

// SetShowFPSCounterArgs represents the arguments for SetShowFPSCounter in the Overlay domain.
type SetShowFPSCounterArgs struct {
	Show bool `json:"show"` // True for showing the FPS counter
}

// Unmarshal the byte array into a return value for SetShowFPSCounter in the Overlay domain.
func (a *SetShowFPSCounterArgs) UnmarshalJSON(b []byte) error {
	type Copy SetShowFPSCounterArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowFPSCounterArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetShowFPSCounter in the Overlay domain.
func (a *SetShowFPSCounterArgs) MarshalJSON() ([]byte, error) {
	type Copy SetShowFPSCounterArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetShowFPSCounterReply represents the return values for SetShowFPSCounter in the Overlay domain.
type SetShowFPSCounterReply struct {
}

// SetShowFPSCounterReply returns whether or not the FrameID matches the reply value for SetShowFPSCounter in the Overlay domain.
func (a *SetShowFPSCounterReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetShowFPSCounterReply %s", err)
		return false, err
	}
	return true, nil
}

// SetShowFPSCounterReply returns the FrameID value for SetShowFPSCounter in the Overlay domain.
func (a *SetShowFPSCounterReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetShowFPSCounter in the Overlay domain.
func (a *SetShowFPSCounterReply) UnmarshalJSON(b []byte) error {
	type Copy SetShowFPSCounterReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowFPSCounterReply(*c)
	return nil
}

// SetShowPaintRectsArgs represents the arguments for SetShowPaintRects in the Overlay domain.
type SetShowPaintRectsArgs struct {
	Result bool `json:"result"` // True for showing paint rectangles
}

// Unmarshal the byte array into a return value for SetShowPaintRects in the Overlay domain.
func (a *SetShowPaintRectsArgs) UnmarshalJSON(b []byte) error {
	type Copy SetShowPaintRectsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowPaintRectsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetShowPaintRects in the Overlay domain.
func (a *SetShowPaintRectsArgs) MarshalJSON() ([]byte, error) {
	type Copy SetShowPaintRectsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetShowPaintRectsReply represents the return values for SetShowPaintRects in the Overlay domain.
type SetShowPaintRectsReply struct {
}

// SetShowPaintRectsReply returns whether or not the FrameID matches the reply value for SetShowPaintRects in the Overlay domain.
func (a *SetShowPaintRectsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetShowPaintRectsReply %s", err)
		return false, err
	}
	return true, nil
}

// SetShowPaintRectsReply returns the FrameID value for SetShowPaintRects in the Overlay domain.
func (a *SetShowPaintRectsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetShowPaintRects in the Overlay domain.
func (a *SetShowPaintRectsReply) UnmarshalJSON(b []byte) error {
	type Copy SetShowPaintRectsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowPaintRectsReply(*c)
	return nil
}

// SetShowLayoutShiftRegionsArgs represents the arguments for SetShowLayoutShiftRegions in the Overlay domain.
type SetShowLayoutShiftRegionsArgs struct {
	Result bool `json:"result"` // True for showing layout shift regions
}

// Unmarshal the byte array into a return value for SetShowLayoutShiftRegions in the Overlay domain.
func (a *SetShowLayoutShiftRegionsArgs) UnmarshalJSON(b []byte) error {
	type Copy SetShowLayoutShiftRegionsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowLayoutShiftRegionsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetShowLayoutShiftRegions in the Overlay domain.
func (a *SetShowLayoutShiftRegionsArgs) MarshalJSON() ([]byte, error) {
	type Copy SetShowLayoutShiftRegionsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetShowLayoutShiftRegionsReply represents the return values for SetShowLayoutShiftRegions in the Overlay domain.
type SetShowLayoutShiftRegionsReply struct {
}

// SetShowLayoutShiftRegionsReply returns whether or not the FrameID matches the reply value for SetShowLayoutShiftRegions in the Overlay domain.
func (a *SetShowLayoutShiftRegionsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetShowLayoutShiftRegionsReply %s", err)
		return false, err
	}
	return true, nil
}

// SetShowLayoutShiftRegionsReply returns the FrameID value for SetShowLayoutShiftRegions in the Overlay domain.
func (a *SetShowLayoutShiftRegionsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetShowLayoutShiftRegions in the Overlay domain.
func (a *SetShowLayoutShiftRegionsReply) UnmarshalJSON(b []byte) error {
	type Copy SetShowLayoutShiftRegionsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowLayoutShiftRegionsReply(*c)
	return nil
}

// SetShowScrollBottleneckRectsArgs represents the arguments for SetShowScrollBottleneckRects in the Overlay domain.
type SetShowScrollBottleneckRectsArgs struct {
	Show bool `json:"show"` // True for showing scroll bottleneck rects
}

// Unmarshal the byte array into a return value for SetShowScrollBottleneckRects in the Overlay domain.
func (a *SetShowScrollBottleneckRectsArgs) UnmarshalJSON(b []byte) error {
	type Copy SetShowScrollBottleneckRectsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowScrollBottleneckRectsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetShowScrollBottleneckRects in the Overlay domain.
func (a *SetShowScrollBottleneckRectsArgs) MarshalJSON() ([]byte, error) {
	type Copy SetShowScrollBottleneckRectsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetShowScrollBottleneckRectsReply represents the return values for SetShowScrollBottleneckRects in the Overlay domain.
type SetShowScrollBottleneckRectsReply struct {
}

// SetShowScrollBottleneckRectsReply returns whether or not the FrameID matches the reply value for SetShowScrollBottleneckRects in the Overlay domain.
func (a *SetShowScrollBottleneckRectsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetShowScrollBottleneckRectsReply %s", err)
		return false, err
	}
	return true, nil
}

// SetShowScrollBottleneckRectsReply returns the FrameID value for SetShowScrollBottleneckRects in the Overlay domain.
func (a *SetShowScrollBottleneckRectsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetShowScrollBottleneckRects in the Overlay domain.
func (a *SetShowScrollBottleneckRectsReply) UnmarshalJSON(b []byte) error {
	type Copy SetShowScrollBottleneckRectsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowScrollBottleneckRectsReply(*c)
	return nil
}

// SetShowHitTestBordersArgs represents the arguments for SetShowHitTestBorders in the Overlay domain.
type SetShowHitTestBordersArgs struct {
	Show bool `json:"show"` // True for showing hit-test borders
}

// Unmarshal the byte array into a return value for SetShowHitTestBorders in the Overlay domain.
func (a *SetShowHitTestBordersArgs) UnmarshalJSON(b []byte) error {
	type Copy SetShowHitTestBordersArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowHitTestBordersArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetShowHitTestBorders in the Overlay domain.
func (a *SetShowHitTestBordersArgs) MarshalJSON() ([]byte, error) {
	type Copy SetShowHitTestBordersArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetShowHitTestBordersReply represents the return values for SetShowHitTestBorders in the Overlay domain.
type SetShowHitTestBordersReply struct {
}

// SetShowHitTestBordersReply returns whether or not the FrameID matches the reply value for SetShowHitTestBorders in the Overlay domain.
func (a *SetShowHitTestBordersReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetShowHitTestBordersReply %s", err)
		return false, err
	}
	return true, nil
}

// SetShowHitTestBordersReply returns the FrameID value for SetShowHitTestBorders in the Overlay domain.
func (a *SetShowHitTestBordersReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetShowHitTestBorders in the Overlay domain.
func (a *SetShowHitTestBordersReply) UnmarshalJSON(b []byte) error {
	type Copy SetShowHitTestBordersReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowHitTestBordersReply(*c)
	return nil
}

// SetShowViewportSizeOnResizeArgs represents the arguments for SetShowViewportSizeOnResize in the Overlay domain.
type SetShowViewportSizeOnResizeArgs struct {
	Show bool `json:"show"` // Whether to paint size or not.
}

// Unmarshal the byte array into a return value for SetShowViewportSizeOnResize in the Overlay domain.
func (a *SetShowViewportSizeOnResizeArgs) UnmarshalJSON(b []byte) error {
	type Copy SetShowViewportSizeOnResizeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowViewportSizeOnResizeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetShowViewportSizeOnResize in the Overlay domain.
func (a *SetShowViewportSizeOnResizeArgs) MarshalJSON() ([]byte, error) {
	type Copy SetShowViewportSizeOnResizeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetShowViewportSizeOnResizeReply represents the return values for SetShowViewportSizeOnResize in the Overlay domain.
type SetShowViewportSizeOnResizeReply struct {
}

// SetShowViewportSizeOnResizeReply returns whether or not the FrameID matches the reply value for SetShowViewportSizeOnResize in the Overlay domain.
func (a *SetShowViewportSizeOnResizeReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetShowViewportSizeOnResizeReply %s", err)
		return false, err
	}
	return true, nil
}

// SetShowViewportSizeOnResizeReply returns the FrameID value for SetShowViewportSizeOnResize in the Overlay domain.
func (a *SetShowViewportSizeOnResizeReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetShowViewportSizeOnResize in the Overlay domain.
func (a *SetShowViewportSizeOnResizeReply) UnmarshalJSON(b []byte) error {
	type Copy SetShowViewportSizeOnResizeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetShowViewportSizeOnResizeReply(*c)
	return nil
}
