// Code generated by cdpgen. DO NOT EDIT.

package media

import (
	"encoding/json"
	"log"
)

const (
	EventMediaPlayerPropertiesChanged = "Media.playerPropertiesChanged"
	EventMediaPlayerEventsAdded       = "Media.playerEventsAdded"
	EventMediaPlayersCreated          = "Media.playersCreated"
)

type Unmarshaler func() json.Unmarshaler

var EventConstants = map[string]Unmarshaler{
	EventMediaPlayerPropertiesChanged: func() json.Unmarshaler { return &PlayerPropertiesChangedReply{} },
	EventMediaPlayerEventsAdded:       func() json.Unmarshaler { return &PlayerEventsAddedReply{} },
	EventMediaPlayersCreated:          func() json.Unmarshaler { return &PlayersCreatedReply{} },
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	if ok {
		return e(), ok
	}
	return nil, ok
}

// PlayerPropertiesChangedReply is the reply for PlayerPropertiesChanged events.
type PlayerPropertiesChangedReply struct {
	PlayerID   PlayerID         `json:"playerId"`   // No description.
	Properties []PlayerProperty `json:"properties"` // No description.
}

// Unmarshal the byte array into a return value for PlayerPropertiesChanged in the Media domain.
func (a *PlayerPropertiesChangedReply) UnmarshalJSON(b []byte) error {
	type Copy PlayerPropertiesChangedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PlayerPropertiesChangedReply(*c)
	return nil
}

// PlayerPropertiesChangedReply returns whether or not the FrameID matches the reply value for PlayerPropertiesChanged in the Media domain.
func (a *PlayerPropertiesChangedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: PlayerPropertiesChangedReply %s", err)
		return false, err
	}
	return true, nil
}

// PlayerPropertiesChangedReply returns the FrameID for PlayerPropertiesChanged in the Media domain.
func (a *PlayerPropertiesChangedReply) GetFrameID() string {
	return ""
}

// PlayerEventsAddedReply is the reply for PlayerEventsAdded events.
type PlayerEventsAddedReply struct {
	PlayerID PlayerID      `json:"playerId"` // No description.
	Events   []PlayerEvent `json:"events"`   // No description.
}

// Unmarshal the byte array into a return value for PlayerEventsAdded in the Media domain.
func (a *PlayerEventsAddedReply) UnmarshalJSON(b []byte) error {
	type Copy PlayerEventsAddedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PlayerEventsAddedReply(*c)
	return nil
}

// PlayerEventsAddedReply returns whether or not the FrameID matches the reply value for PlayerEventsAdded in the Media domain.
func (a *PlayerEventsAddedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: PlayerEventsAddedReply %s", err)
		return false, err
	}
	return true, nil
}

// PlayerEventsAddedReply returns the FrameID for PlayerEventsAdded in the Media domain.
func (a *PlayerEventsAddedReply) GetFrameID() string {
	return ""
}

// PlayersCreatedReply is the reply for PlayersCreated events.
type PlayersCreatedReply struct {
	Players []PlayerID `json:"players"` // No description.
}

// Unmarshal the byte array into a return value for PlayersCreated in the Media domain.
func (a *PlayersCreatedReply) UnmarshalJSON(b []byte) error {
	type Copy PlayersCreatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PlayersCreatedReply(*c)
	return nil
}

// PlayersCreatedReply returns whether or not the FrameID matches the reply value for PlayersCreated in the Media domain.
func (a *PlayersCreatedReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: PlayersCreatedReply %s", err)
		return false, err
	}
	return true, nil
}

// PlayersCreatedReply returns the FrameID for PlayersCreated in the Media domain.
func (a *PlayersCreatedReply) GetFrameID() string {
	return ""
}
