// Code generated by cdpgen. DO NOT EDIT.

package backgroundservice

import (
	"encoding/json"
	"log"
)

const (
	CommandBackgroundServiceStartObserving = "BackgroundService.startObserving"
	CommandBackgroundServiceStopObserving  = "BackgroundService.stopObserving"
	CommandBackgroundServiceSetRecording   = "BackgroundService.setRecording"
	CommandBackgroundServiceClearEvents    = "BackgroundService.clearEvents"
)

// StartObservingArgs represents the arguments for StartObserving in the BackgroundService domain.
type StartObservingArgs struct {
	Service ServiceName `json:"service"` // No description.
}

// Unmarshal the byte array into a return value for StartObserving in the BackgroundService domain.
func (a *StartObservingArgs) UnmarshalJSON(b []byte) error {
	type Copy StartObservingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartObservingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StartObserving in the BackgroundService domain.
func (a *StartObservingArgs) MarshalJSON() ([]byte, error) {
	type Copy StartObservingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StartObservingReply represents the return values for StartObserving in the BackgroundService domain.
type StartObservingReply struct {
}

// StartObservingReply returns whether or not the FrameID matches the reply value for StartObserving in the BackgroundService domain.
func (a *StartObservingReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StartObservingReply %s", err)
		return false, err
	}
	return true, nil
}

// StartObservingReply returns the FrameID value for StartObserving in the BackgroundService domain.
func (a *StartObservingReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StartObserving in the BackgroundService domain.
func (a *StartObservingReply) UnmarshalJSON(b []byte) error {
	type Copy StartObservingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StartObservingReply(*c)
	return nil
}

// StopObservingArgs represents the arguments for StopObserving in the BackgroundService domain.
type StopObservingArgs struct {
	Service ServiceName `json:"service"` // No description.
}

// Unmarshal the byte array into a return value for StopObserving in the BackgroundService domain.
func (a *StopObservingArgs) UnmarshalJSON(b []byte) error {
	type Copy StopObservingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopObservingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for StopObserving in the BackgroundService domain.
func (a *StopObservingArgs) MarshalJSON() ([]byte, error) {
	type Copy StopObservingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// StopObservingReply represents the return values for StopObserving in the BackgroundService domain.
type StopObservingReply struct {
}

// StopObservingReply returns whether or not the FrameID matches the reply value for StopObserving in the BackgroundService domain.
func (a *StopObservingReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: StopObservingReply %s", err)
		return false, err
	}
	return true, nil
}

// StopObservingReply returns the FrameID value for StopObserving in the BackgroundService domain.
func (a *StopObservingReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for StopObserving in the BackgroundService domain.
func (a *StopObservingReply) UnmarshalJSON(b []byte) error {
	type Copy StopObservingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = StopObservingReply(*c)
	return nil
}

// SetRecordingArgs represents the arguments for SetRecording in the BackgroundService domain.
type SetRecordingArgs struct {
	ShouldRecord bool        `json:"shouldRecord"` // No description.
	Service      ServiceName `json:"service"`      // No description.
}

// Unmarshal the byte array into a return value for SetRecording in the BackgroundService domain.
func (a *SetRecordingArgs) UnmarshalJSON(b []byte) error {
	type Copy SetRecordingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetRecordingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetRecording in the BackgroundService domain.
func (a *SetRecordingArgs) MarshalJSON() ([]byte, error) {
	type Copy SetRecordingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetRecordingReply represents the return values for SetRecording in the BackgroundService domain.
type SetRecordingReply struct {
}

// SetRecordingReply returns whether or not the FrameID matches the reply value for SetRecording in the BackgroundService domain.
func (a *SetRecordingReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: SetRecordingReply %s", err)
		return false, err
	}
	return true, nil
}

// SetRecordingReply returns the FrameID value for SetRecording in the BackgroundService domain.
func (a *SetRecordingReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for SetRecording in the BackgroundService domain.
func (a *SetRecordingReply) UnmarshalJSON(b []byte) error {
	type Copy SetRecordingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetRecordingReply(*c)
	return nil
}

// ClearEventsArgs represents the arguments for ClearEvents in the BackgroundService domain.
type ClearEventsArgs struct {
	Service ServiceName `json:"service"` // No description.
}

// Unmarshal the byte array into a return value for ClearEvents in the BackgroundService domain.
func (a *ClearEventsArgs) UnmarshalJSON(b []byte) error {
	type Copy ClearEventsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearEventsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ClearEvents in the BackgroundService domain.
func (a *ClearEventsArgs) MarshalJSON() ([]byte, error) {
	type Copy ClearEventsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ClearEventsReply represents the return values for ClearEvents in the BackgroundService domain.
type ClearEventsReply struct {
}

// ClearEventsReply returns whether or not the FrameID matches the reply value for ClearEvents in the BackgroundService domain.
func (a *ClearEventsReply) MatchFrameID(frameID string, m []byte) (bool, error) {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Printf("unmarshal error: ClearEventsReply %s", err)
		return false, err
	}
	return true, nil
}

// ClearEventsReply returns the FrameID value for ClearEvents in the BackgroundService domain.
func (a *ClearEventsReply) GetFrameID() string {
	return ""
}

// Unmarshal the byte array into a return value for ClearEvents in the BackgroundService domain.
func (a *ClearEventsReply) UnmarshalJSON(b []byte) error {
	type Copy ClearEventsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ClearEventsReply(*c)
	return nil
}
