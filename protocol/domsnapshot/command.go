// Code generated by cdpgen. DO NOT EDIT.

package domsnapshot

import (
	"encoding/json"
	"log"
)

const (
	CommandDOMSnapshotDisable         = "DOMSnapshot.disable"
	CommandDOMSnapshotEnable          = "DOMSnapshot.enable"
	CommandDOMSnapshotGetSnapshot     = "DOMSnapshot.getSnapshot"
	CommandDOMSnapshotCaptureSnapshot = "DOMSnapshot.captureSnapshot"
)

// DisableArgs represents the arguments for Disable in the DOMSnapshot domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the DOMSnapshot domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the DOMSnapshot domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the DOMSnapshot domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the DOMSnapshot domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: DisableReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Disable in the DOMSnapshot domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

// EnableArgs represents the arguments for Enable in the DOMSnapshot domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the DOMSnapshot domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the DOMSnapshot domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the DOMSnapshot domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the DOMSnapshot domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: EnableReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Enable in the DOMSnapshot domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

// GetSnapshotArgs represents the arguments for GetSnapshot in the DOMSnapshot domain.
type GetSnapshotArgs struct {
	ComputedStyleWhitelist     []string `json:"computedStyleWhitelist"`               // Whitelist of computed styles to return.
	IncludeEventListeners      bool     `json:"includeEventListeners,omitempty"`      // Whether or not to retrieve details of DOM listeners (default false).
	IncludePaintOrder          bool     `json:"includePaintOrder,omitempty"`          // Whether to determine and include the paint order index of LayoutTreeNodes (default false).
	IncludeUserAgentShadowTree bool     `json:"includeUserAgentShadowTree,omitempty"` // Whether to include UA shadow tree in the snapshot (default false).
}

// Unmarshal the byte array into a return value for GetSnapshot in the DOMSnapshot domain.
func (a *GetSnapshotArgs) UnmarshalJSON(b []byte) error {
	type Copy GetSnapshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetSnapshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetSnapshot in the DOMSnapshot domain.
func (a *GetSnapshotArgs) MarshalJSON() ([]byte, error) {
	type Copy GetSnapshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetSnapshotReply represents the return values for GetSnapshot in the DOMSnapshot domain.
type GetSnapshotReply struct {
	DOMNodes        []DOMNode        `json:"domNodes"`        // The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.
	LayoutTreeNodes []LayoutTreeNode `json:"layoutTreeNodes"` // The nodes in the layout tree.
	ComputedStyles  []ComputedStyle  `json:"computedStyles"`  // Whitelisted ComputedStyle properties for each node in the layout tree.
}

// GetSnapshotReply returns whether or not the FrameID matches the reply value for GetSnapshot in the DOMSnapshot domain.
func (a *GetSnapshotReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: GetSnapshotReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for GetSnapshot in the DOMSnapshot domain.
func (a *GetSnapshotReply) UnmarshalJSON(b []byte) error {
	type Copy GetSnapshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetSnapshotReply(*c)
	return nil
}

// CaptureSnapshotArgs represents the arguments for CaptureSnapshot in the DOMSnapshot domain.
type CaptureSnapshotArgs struct {
	ComputedStyles []string `json:"computedStyles"` // Whitelist of computed styles to return.
}

// Unmarshal the byte array into a return value for CaptureSnapshot in the DOMSnapshot domain.
func (a *CaptureSnapshotArgs) UnmarshalJSON(b []byte) error {
	type Copy CaptureSnapshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CaptureSnapshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for CaptureSnapshot in the DOMSnapshot domain.
func (a *CaptureSnapshotArgs) MarshalJSON() ([]byte, error) {
	type Copy CaptureSnapshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CaptureSnapshotReply represents the return values for CaptureSnapshot in the DOMSnapshot domain.
type CaptureSnapshotReply struct {
	Nodes   DOMTreeSnapshot    `json:"nodes"`   // The nodes in the DOM tree. The DOMNode at index 0 corresponds to the root document.
	Layout  LayoutTreeSnapshot `json:"layout"`  // The nodes in the layout tree.
	Strings []string           `json:"strings"` // Shared string table that all string properties refer to with indexes.
}

// CaptureSnapshotReply returns whether or not the FrameID matches the reply value for CaptureSnapshot in the DOMSnapshot domain.
func (a *CaptureSnapshotReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: CaptureSnapshotReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for CaptureSnapshot in the DOMSnapshot domain.
func (a *CaptureSnapshotReply) UnmarshalJSON(b []byte) error {
	type Copy CaptureSnapshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CaptureSnapshotReply(*c)
	return nil
}
