// Code generated by cdpgen. DO NOT EDIT.

package target

import (
	"encoding/json"
	"log"
)

const (
	EventTargetAttachedToTarget          = "Target.attachedToTarget"
	EventTargetDetachedFromTarget        = "Target.detachedFromTarget"
	EventTargetReceivedMessageFromTarget = "Target.receivedMessageFromTarget"
	EventTargetTargetCreated             = "Target.targetCreated"
	EventTargetTargetDestroyed           = "Target.targetDestroyed"
	EventTargetTargetCrashed             = "Target.targetCrashed"
	EventTargetTargetInfoChanged         = "Target.targetInfoChanged"
)

var EventConstants = map[string]json.Unmarshaler{
	EventTargetAttachedToTarget:          &AttachedToTargetReply{},
	EventTargetDetachedFromTarget:        &DetachedFromTargetReply{},
	EventTargetReceivedMessageFromTarget: &ReceivedMessageFromTargetReply{},
	EventTargetTargetCreated:             &CreatedReply{},
	EventTargetTargetDestroyed:           &DestroyedReply{},
	EventTargetTargetCrashed:             &CrashedReply{},
	EventTargetTargetInfoChanged:         &InfoChangedReply{},
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	return e, ok
}

// AttachedToTargetReply is the reply for AttachedToTarget events.
type AttachedToTargetReply struct {
	SessionID          SessionID `json:"sessionId"`          // Identifier assigned to the session used to send/receive messages.
	TargetInfo         Info      `json:"targetInfo"`         // No description.
	WaitingForDebugger bool      `json:"waitingForDebugger"` // No description.
}

// Unmarshal the byte array into a return value for AttachedToTarget in the Target domain.
func (a *AttachedToTargetReply) UnmarshalJSON(b []byte) error {
	type Copy AttachedToTargetReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AttachedToTargetReply(*c)
	return nil
}

// AttachedToTargetReply returns whether or not the FrameID matches the reply value for AttachedToTarget in the AttachedToTarget domain.
func (a *AttachedToTargetReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// AttachedToTargetReply returns the FrameID for AttachedToTarget in the AttachedToTarget domain.
func (a *AttachedToTargetReply) GetFrameID() string {
	return ""
}

// DetachedFromTargetReply is the reply for DetachedFromTarget events.
type DetachedFromTargetReply struct {
	SessionID SessionID `json:"sessionId"` // Detached session identifier.
	// TargetID is deprecated.
	//
	// Deprecated: Deprecated.
	TargetID ID `json:"targetId,omitempty"`
}

// Unmarshal the byte array into a return value for DetachedFromTarget in the Target domain.
func (a *DetachedFromTargetReply) UnmarshalJSON(b []byte) error {
	type Copy DetachedFromTargetReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DetachedFromTargetReply(*c)
	return nil
}

// DetachedFromTargetReply returns whether or not the FrameID matches the reply value for DetachedFromTarget in the DetachedFromTarget domain.
func (a *DetachedFromTargetReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// DetachedFromTargetReply returns the FrameID for DetachedFromTarget in the DetachedFromTarget domain.
func (a *DetachedFromTargetReply) GetFrameID() string {
	return ""
}

// ReceivedMessageFromTargetReply is the reply for ReceivedMessageFromTarget events.
type ReceivedMessageFromTargetReply struct {
	SessionID SessionID `json:"sessionId"` // Identifier of a session which sends a message.
	Message   string    `json:"message"`   // No description.
	// TargetID is deprecated.
	//
	// Deprecated: Deprecated.
	TargetID ID `json:"targetId,omitempty"`
}

// Unmarshal the byte array into a return value for ReceivedMessageFromTarget in the Target domain.
func (a *ReceivedMessageFromTargetReply) UnmarshalJSON(b []byte) error {
	type Copy ReceivedMessageFromTargetReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReceivedMessageFromTargetReply(*c)
	return nil
}

// ReceivedMessageFromTargetReply returns whether or not the FrameID matches the reply value for ReceivedMessageFromTarget in the ReceivedMessageFromTarget domain.
func (a *ReceivedMessageFromTargetReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// ReceivedMessageFromTargetReply returns the FrameID for ReceivedMessageFromTarget in the ReceivedMessageFromTarget domain.
func (a *ReceivedMessageFromTargetReply) GetFrameID() string {
	return ""
}

// CreatedReply is the reply for TargetCreated events.
type CreatedReply struct {
	TargetInfo Info `json:"targetInfo"` // No description.
}

// Unmarshal the byte array into a return value for TargetCreated in the Target domain.
func (a *CreatedReply) UnmarshalJSON(b []byte) error {
	type Copy CreatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CreatedReply(*c)
	return nil
}

// CreatedReply returns whether or not the FrameID matches the reply value for TargetCreated in the TargetCreated domain.
func (a *CreatedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// CreatedReply returns the FrameID for TargetCreated in the TargetCreated domain.
func (a *CreatedReply) GetFrameID() string {
	return ""
}

// DestroyedReply is the reply for TargetDestroyed events.
type DestroyedReply struct {
	TargetID ID `json:"targetId"` // No description.
}

// Unmarshal the byte array into a return value for TargetDestroyed in the Target domain.
func (a *DestroyedReply) UnmarshalJSON(b []byte) error {
	type Copy DestroyedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DestroyedReply(*c)
	return nil
}

// DestroyedReply returns whether or not the FrameID matches the reply value for TargetDestroyed in the TargetDestroyed domain.
func (a *DestroyedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// DestroyedReply returns the FrameID for TargetDestroyed in the TargetDestroyed domain.
func (a *DestroyedReply) GetFrameID() string {
	return ""
}

// CrashedReply is the reply for TargetCrashed events.
type CrashedReply struct {
	TargetID  ID     `json:"targetId"`  // No description.
	Status    string `json:"status"`    // Termination status type.
	ErrorCode int    `json:"errorCode"` // Termination error code.
}

// Unmarshal the byte array into a return value for TargetCrashed in the Target domain.
func (a *CrashedReply) UnmarshalJSON(b []byte) error {
	type Copy CrashedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CrashedReply(*c)
	return nil
}

// CrashedReply returns whether or not the FrameID matches the reply value for TargetCrashed in the TargetCrashed domain.
func (a *CrashedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// CrashedReply returns the FrameID for TargetCrashed in the TargetCrashed domain.
func (a *CrashedReply) GetFrameID() string {
	return ""
}

// InfoChangedReply is the reply for TargetInfoChanged events.
type InfoChangedReply struct {
	TargetInfo Info `json:"targetInfo"` // No description.
}

// Unmarshal the byte array into a return value for TargetInfoChanged in the Target domain.
func (a *InfoChangedReply) UnmarshalJSON(b []byte) error {
	type Copy InfoChangedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = InfoChangedReply(*c)
	return nil
}

// InfoChangedReply returns whether or not the FrameID matches the reply value for TargetInfoChanged in the TargetInfoChanged domain.
func (a *InfoChangedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: %!s(MISSING)", err)
	}
	return true
}

// InfoChangedReply returns the FrameID for TargetInfoChanged in the TargetInfoChanged domain.
func (a *InfoChangedReply) GetFrameID() string {
	return ""
}
