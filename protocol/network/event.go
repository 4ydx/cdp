// Code generated by cdpgen. DO NOT EDIT.

package network

import (
	"encoding/json"

	"github.com/4ydx/cdp/protocol"
)

const EventNetworkDataReceived = "Network.dataReceived"

// DataReceivedReply is the reply for DataReceived events.
type DataReceivedReply struct {
	RequestID         RequestID     `json:"requestId"`         // Request identifier.
	Timestamp         MonotonicTime `json:"timestamp"`         // Timestamp.
	DataLength        int           `json:"dataLength"`        // Data chunk length.
	EncodedDataLength int           `json:"encodedDataLength"` // Actual bytes received (might be less than dataLength for compressed encodings).
}

// Unmarshal the byte array into a return value for DataReceived in the Network domain.
func (a *DataReceivedReply) UnmarshalJSON(b []byte) error {
	type Copy DataReceivedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DataReceivedReply(*c)
	return nil
}

const EventNetworkEventSourceMessageReceived = "Network.eventSourceMessageReceived"

// EventSourceMessageReceivedReply is the reply for EventSourceMessageReceived events.
type EventSourceMessageReceivedReply struct {
	RequestID RequestID     `json:"requestId"` // Request identifier.
	Timestamp MonotonicTime `json:"timestamp"` // Timestamp.
	EventName string        `json:"eventName"` // Message type.
	EventID   string        `json:"eventId"`   // Message identifier.
	Data      string        `json:"data"`      // Message content.
}

// Unmarshal the byte array into a return value for EventSourceMessageReceived in the Network domain.
func (a *EventSourceMessageReceivedReply) UnmarshalJSON(b []byte) error {
	type Copy EventSourceMessageReceivedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EventSourceMessageReceivedReply(*c)
	return nil
}

const EventNetworkLoadingFailed = "Network.loadingFailed"

// LoadingFailedReply is the reply for LoadingFailed events.
type LoadingFailedReply struct {
	RequestID     RequestID           `json:"requestId"`               // Request identifier.
	Timestamp     MonotonicTime       `json:"timestamp"`               // Timestamp.
	Type          shared.ResourceType `json:"type"`                    // Resource type.
	ErrorText     string              `json:"errorText"`               // User friendly error message.
	Canceled      bool                `json:"canceled,omitempty"`      // True if loading was canceled.
	BlockedReason BlockedReason       `json:"blockedReason,omitempty"` // The reason why loading was blocked, if any.
}

// Unmarshal the byte array into a return value for LoadingFailed in the Network domain.
func (a *LoadingFailedReply) UnmarshalJSON(b []byte) error {
	type Copy LoadingFailedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = LoadingFailedReply(*c)
	return nil
}

const EventNetworkLoadingFinished = "Network.loadingFinished"

// LoadingFinishedReply is the reply for LoadingFinished events.
type LoadingFinishedReply struct {
	RequestID                RequestID     `json:"requestId"`                          // Request identifier.
	Timestamp                MonotonicTime `json:"timestamp"`                          // Timestamp.
	EncodedDataLength        float64       `json:"encodedDataLength"`                  // Total number of bytes received for this request.
	ShouldReportCorbBlocking bool          `json:"shouldReportCorbBlocking,omitempty"` // Set when 1) response was blocked by Cross-Origin Read Blocking and also 2) this needs to be reported to the DevTools console.
}

// Unmarshal the byte array into a return value for LoadingFinished in the Network domain.
func (a *LoadingFinishedReply) UnmarshalJSON(b []byte) error {
	type Copy LoadingFinishedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = LoadingFinishedReply(*c)
	return nil
}

const EventNetworkRequestIntercepted = "Network.requestIntercepted"

// RequestInterceptedReply is the reply for RequestIntercepted events.
type RequestInterceptedReply struct {
	InterceptionID      InterceptionID      `json:"interceptionId"`                // Each request the page makes will have a unique id, however if any redirects are encountered while processing that fetch, they will be reported with the same id as the original fetch. Likewise if HTTP authentication is needed then the same fetch id will be used.
	Request             Request             `json:"request"`                       // No description.
	FrameID             shared.FrameID      `json:"frameId"`                       // The id of the frame that initiated the request.
	ResourceType        shared.ResourceType `json:"resourceType"`                  // How the requested resource will be used.
	IsNavigationRequest bool                `json:"isNavigationRequest"`           // Whether this is a navigation request, which can abort the navigation completely.
	IsDownload          bool                `json:"isDownload,omitempty"`          // Set if the request is a navigation that will result in a download. Only present after response is received from the server (i.e. HeadersReceived stage).
	RedirectURL         string              `json:"redirectUrl,omitempty"`         // Redirect location, only sent if a redirect was intercepted.
	AuthChallenge       AuthChallenge       `json:"authChallenge,omitempty"`       // Details of the Authorization Challenge encountered. If this is set then continueInterceptedRequest must contain an authChallengeResponse.
	ResponseErrorReason ErrorReason         `json:"responseErrorReason,omitempty"` // Response error if intercepted at response stage or if redirect occurred while intercepting request.
	ResponseStatusCode  int                 `json:"responseStatusCode,omitempty"`  // Response code if intercepted at response stage or if redirect occurred while intercepting request or auth retry occurred.
	ResponseHeaders     Headers             `json:"responseHeaders,omitempty"`     // Response headers if intercepted at the response stage or if redirect occurred while intercepting request or auth retry occurred.
}

// Unmarshal the byte array into a return value for RequestIntercepted in the Network domain.
func (a *RequestInterceptedReply) UnmarshalJSON(b []byte) error {
	type Copy RequestInterceptedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestInterceptedReply(*c)
	return nil
}

const EventNetworkRequestServedFromCache = "Network.requestServedFromCache"

// RequestServedFromCacheReply is the reply for RequestServedFromCache events.
type RequestServedFromCacheReply struct {
	RequestID RequestID `json:"requestId"` // Request identifier.
}

// Unmarshal the byte array into a return value for RequestServedFromCache in the Network domain.
func (a *RequestServedFromCacheReply) UnmarshalJSON(b []byte) error {
	type Copy RequestServedFromCacheReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestServedFromCacheReply(*c)
	return nil
}

const EventNetworkRequestWillBeSent = "Network.requestWillBeSent"

// RequestWillBeSentReply is the reply for RequestWillBeSent events.
type RequestWillBeSentReply struct {
	RequestID        RequestID           `json:"requestId"`                  // Request identifier.
	LoaderID         LoaderID            `json:"loaderId"`                   // Loader identifier. Empty string if the request is fetched from worker.
	DocumentURL      string              `json:"documentURL"`                // URL of the document this request is loaded for.
	Request          Request             `json:"request"`                    // Request data.
	Timestamp        MonotonicTime       `json:"timestamp"`                  // Timestamp.
	WallTime         TimeSinceEpoch      `json:"wallTime"`                   // Timestamp.
	Initiator        Initiator           `json:"initiator"`                  // Request initiator.
	RedirectResponse Response            `json:"redirectResponse,omitempty"` // Redirect response data.
	Type             shared.ResourceType `json:"type,omitempty"`             // Type of this resource.
	FrameID          shared.FrameID      `json:"frameId,omitempty"`          // Frame identifier.
	HasUserGesture   bool                `json:"hasUserGesture,omitempty"`   // Whether the request is initiated by a user gesture. Defaults to false.
}

// Unmarshal the byte array into a return value for RequestWillBeSent in the Network domain.
func (a *RequestWillBeSentReply) UnmarshalJSON(b []byte) error {
	type Copy RequestWillBeSentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestWillBeSentReply(*c)
	return nil
}

const EventNetworkResourceChangedPriority = "Network.resourceChangedPriority"

// ResourceChangedPriorityReply is the reply for ResourceChangedPriority events.
type ResourceChangedPriorityReply struct {
	RequestID   RequestID        `json:"requestId"`   // Request identifier.
	NewPriority ResourcePriority `json:"newPriority"` // New priority
	Timestamp   MonotonicTime    `json:"timestamp"`   // Timestamp.
}

// Unmarshal the byte array into a return value for ResourceChangedPriority in the Network domain.
func (a *ResourceChangedPriorityReply) UnmarshalJSON(b []byte) error {
	type Copy ResourceChangedPriorityReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResourceChangedPriorityReply(*c)
	return nil
}

const EventNetworkSignedExchangeReceived = "Network.signedExchangeReceived"

// SignedExchangeReceivedReply is the reply for SignedExchangeReceived events.
type SignedExchangeReceivedReply struct {
	RequestID RequestID          `json:"requestId"` // Request identifier.
	Info      SignedExchangeInfo `json:"info"`      // Information about the signed exchange response.
}

// Unmarshal the byte array into a return value for SignedExchangeReceived in the Network domain.
func (a *SignedExchangeReceivedReply) UnmarshalJSON(b []byte) error {
	type Copy SignedExchangeReceivedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SignedExchangeReceivedReply(*c)
	return nil
}

const EventNetworkResponseReceived = "Network.responseReceived"

// ResponseReceivedReply is the reply for ResponseReceived events.
type ResponseReceivedReply struct {
	RequestID RequestID           `json:"requestId"`         // Request identifier.
	LoaderID  LoaderID            `json:"loaderId"`          // Loader identifier. Empty string if the request is fetched from worker.
	Timestamp MonotonicTime       `json:"timestamp"`         // Timestamp.
	Type      shared.ResourceType `json:"type"`              // Resource type.
	Response  Response            `json:"response"`          // Response data.
	FrameID   shared.FrameID      `json:"frameId,omitempty"` // Frame identifier.
}

// Unmarshal the byte array into a return value for ResponseReceived in the Network domain.
func (a *ResponseReceivedReply) UnmarshalJSON(b []byte) error {
	type Copy ResponseReceivedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResponseReceivedReply(*c)
	return nil
}

const EventNetworkWebSocketClosed = "Network.webSocketClosed"

// WebSocketClosedReply is the reply for WebSocketClosed events.
type WebSocketClosedReply struct {
	RequestID RequestID     `json:"requestId"` // Request identifier.
	Timestamp MonotonicTime `json:"timestamp"` // Timestamp.
}

// Unmarshal the byte array into a return value for WebSocketClosed in the Network domain.
func (a *WebSocketClosedReply) UnmarshalJSON(b []byte) error {
	type Copy WebSocketClosedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = WebSocketClosedReply(*c)
	return nil
}

const EventNetworkWebSocketCreated = "Network.webSocketCreated"

// WebSocketCreatedReply is the reply for WebSocketCreated events.
type WebSocketCreatedReply struct {
	RequestID RequestID `json:"requestId"`           // Request identifier.
	URL       string    `json:"url"`                 // WebSocket request URL.
	Initiator Initiator `json:"initiator,omitempty"` // Request initiator.
}

// Unmarshal the byte array into a return value for WebSocketCreated in the Network domain.
func (a *WebSocketCreatedReply) UnmarshalJSON(b []byte) error {
	type Copy WebSocketCreatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = WebSocketCreatedReply(*c)
	return nil
}

const EventNetworkWebSocketFrameError = "Network.webSocketFrameError"

// WebSocketFrameErrorReply is the reply for WebSocketFrameError events.
type WebSocketFrameErrorReply struct {
	RequestID    RequestID     `json:"requestId"`    // Request identifier.
	Timestamp    MonotonicTime `json:"timestamp"`    // Timestamp.
	ErrorMessage string        `json:"errorMessage"` // WebSocket frame error message.
}

// Unmarshal the byte array into a return value for WebSocketFrameError in the Network domain.
func (a *WebSocketFrameErrorReply) UnmarshalJSON(b []byte) error {
	type Copy WebSocketFrameErrorReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = WebSocketFrameErrorReply(*c)
	return nil
}

const EventNetworkWebSocketFrameReceived = "Network.webSocketFrameReceived"

// WebSocketFrameReceivedReply is the reply for WebSocketFrameReceived events.
type WebSocketFrameReceivedReply struct {
	RequestID RequestID      `json:"requestId"` // Request identifier.
	Timestamp MonotonicTime  `json:"timestamp"` // Timestamp.
	Response  WebSocketFrame `json:"response"`  // WebSocket response data.
}

// Unmarshal the byte array into a return value for WebSocketFrameReceived in the Network domain.
func (a *WebSocketFrameReceivedReply) UnmarshalJSON(b []byte) error {
	type Copy WebSocketFrameReceivedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = WebSocketFrameReceivedReply(*c)
	return nil
}

const EventNetworkWebSocketFrameSent = "Network.webSocketFrameSent"

// WebSocketFrameSentReply is the reply for WebSocketFrameSent events.
type WebSocketFrameSentReply struct {
	RequestID RequestID      `json:"requestId"` // Request identifier.
	Timestamp MonotonicTime  `json:"timestamp"` // Timestamp.
	Response  WebSocketFrame `json:"response"`  // WebSocket response data.
}

// Unmarshal the byte array into a return value for WebSocketFrameSent in the Network domain.
func (a *WebSocketFrameSentReply) UnmarshalJSON(b []byte) error {
	type Copy WebSocketFrameSentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = WebSocketFrameSentReply(*c)
	return nil
}

const EventNetworkWebSocketHandshakeResponseReceived = "Network.webSocketHandshakeResponseReceived"

// WebSocketHandshakeResponseReceivedReply is the reply for WebSocketHandshakeResponseReceived events.
type WebSocketHandshakeResponseReceivedReply struct {
	RequestID RequestID         `json:"requestId"` // Request identifier.
	Timestamp MonotonicTime     `json:"timestamp"` // Timestamp.
	Response  WebSocketResponse `json:"response"`  // WebSocket response data.
}

// Unmarshal the byte array into a return value for WebSocketHandshakeResponseReceived in the Network domain.
func (a *WebSocketHandshakeResponseReceivedReply) UnmarshalJSON(b []byte) error {
	type Copy WebSocketHandshakeResponseReceivedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = WebSocketHandshakeResponseReceivedReply(*c)
	return nil
}

const EventNetworkWebSocketWillSendHandshakeRequest = "Network.webSocketWillSendHandshakeRequest"

// WebSocketWillSendHandshakeRequestReply is the reply for WebSocketWillSendHandshakeRequest events.
type WebSocketWillSendHandshakeRequestReply struct {
	RequestID RequestID        `json:"requestId"` // Request identifier.
	Timestamp MonotonicTime    `json:"timestamp"` // Timestamp.
	WallTime  TimeSinceEpoch   `json:"wallTime"`  // UTC Timestamp.
	Request   WebSocketRequest `json:"request"`   // WebSocket request data.
}

// Unmarshal the byte array into a return value for WebSocketWillSendHandshakeRequest in the Network domain.
func (a *WebSocketWillSendHandshakeRequestReply) UnmarshalJSON(b []byte) error {
	type Copy WebSocketWillSendHandshakeRequestReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = WebSocketWillSendHandshakeRequestReply(*c)
	return nil
}
