// Code generated by cdpgen. DO NOT EDIT.

package layertree

import (
	"encoding/json"
	"log"

	"github.com/4ydx/cdp/protocol/dom"
)

const CommandLayerTreeCompositingReasons = "LayerTree.compositingReasons"

// CompositingReasonsArgs represents the arguments for CompositingReasons in the LayerTree domain.
type CompositingReasonsArgs struct {
	LayerID LayerID `json:"layerId"` // The id of the layer for which we want to get the reasons it was composited.
}

// Unmarshal the byte array into a return value for CompositingReasons in the LayerTree domain.
func (a *CompositingReasonsArgs) UnmarshalJSON(b []byte) error {
	type Copy CompositingReasonsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CompositingReasonsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for CompositingReasons in the LayerTree domain.
func (a *CompositingReasonsArgs) MarshalJSON() ([]byte, error) {
	type Copy CompositingReasonsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CompositingReasonsReply represents the return values for CompositingReasons in the LayerTree domain.
type CompositingReasonsReply struct {
	CompositingReasons []string `json:"compositingReasons"` // A list of strings specifying reasons for the given layer to become composited.
}

// CompositingReasonsReply returns whether or not the FrameID matches the reply value for CompositingReasons in the LayerTree domain.
func (a *CompositingReasonsReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: CompositingReasonsReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for CompositingReasons in the LayerTree domain.
func (a *CompositingReasonsReply) UnmarshalJSON(b []byte) error {
	type Copy CompositingReasonsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CompositingReasonsReply(*c)
	return nil
}

const CommandLayerTreeDisable = "LayerTree.disable"

// DisableArgs represents the arguments for Disable in the LayerTree domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the LayerTree domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the LayerTree domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the LayerTree domain.
type DisableReply struct {
}

// DisableReply returns whether or not the FrameID matches the reply value for Disable in the LayerTree domain.
func (a *DisableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: DisableReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Disable in the LayerTree domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

const CommandLayerTreeEnable = "LayerTree.enable"

// EnableArgs represents the arguments for Enable in the LayerTree domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the LayerTree domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the LayerTree domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the LayerTree domain.
type EnableReply struct {
}

// EnableReply returns whether or not the FrameID matches the reply value for Enable in the LayerTree domain.
func (a *EnableReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: EnableReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for Enable in the LayerTree domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

const CommandLayerTreeLoadSnapshot = "LayerTree.loadSnapshot"

// LoadSnapshotArgs represents the arguments for LoadSnapshot in the LayerTree domain.
type LoadSnapshotArgs struct {
	Tiles []PictureTile `json:"tiles"` // An array of tiles composing the snapshot.
}

// Unmarshal the byte array into a return value for LoadSnapshot in the LayerTree domain.
func (a *LoadSnapshotArgs) UnmarshalJSON(b []byte) error {
	type Copy LoadSnapshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = LoadSnapshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for LoadSnapshot in the LayerTree domain.
func (a *LoadSnapshotArgs) MarshalJSON() ([]byte, error) {
	type Copy LoadSnapshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// LoadSnapshotReply represents the return values for LoadSnapshot in the LayerTree domain.
type LoadSnapshotReply struct {
	SnapshotID SnapshotID `json:"snapshotId"` // The id of the snapshot.
}

// LoadSnapshotReply returns whether or not the FrameID matches the reply value for LoadSnapshot in the LayerTree domain.
func (a *LoadSnapshotReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: LoadSnapshotReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for LoadSnapshot in the LayerTree domain.
func (a *LoadSnapshotReply) UnmarshalJSON(b []byte) error {
	type Copy LoadSnapshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = LoadSnapshotReply(*c)
	return nil
}

const CommandLayerTreeMakeSnapshot = "LayerTree.makeSnapshot"

// MakeSnapshotArgs represents the arguments for MakeSnapshot in the LayerTree domain.
type MakeSnapshotArgs struct {
	LayerID LayerID `json:"layerId"` // The id of the layer.
}

// Unmarshal the byte array into a return value for MakeSnapshot in the LayerTree domain.
func (a *MakeSnapshotArgs) UnmarshalJSON(b []byte) error {
	type Copy MakeSnapshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = MakeSnapshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for MakeSnapshot in the LayerTree domain.
func (a *MakeSnapshotArgs) MarshalJSON() ([]byte, error) {
	type Copy MakeSnapshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// MakeSnapshotReply represents the return values for MakeSnapshot in the LayerTree domain.
type MakeSnapshotReply struct {
	SnapshotID SnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// MakeSnapshotReply returns whether or not the FrameID matches the reply value for MakeSnapshot in the LayerTree domain.
func (a *MakeSnapshotReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: MakeSnapshotReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for MakeSnapshot in the LayerTree domain.
func (a *MakeSnapshotReply) UnmarshalJSON(b []byte) error {
	type Copy MakeSnapshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = MakeSnapshotReply(*c)
	return nil
}

const CommandLayerTreeProfileSnapshot = "LayerTree.profileSnapshot"

// ProfileSnapshotArgs represents the arguments for ProfileSnapshot in the LayerTree domain.
type ProfileSnapshotArgs struct {
	SnapshotID     SnapshotID `json:"snapshotId"`               // The id of the layer snapshot.
	MinRepeatCount int        `json:"minRepeatCount,omitempty"` // The maximum number of times to replay the snapshot (1, if not specified).
	MinDuration    float64    `json:"minDuration,omitempty"`    // The minimum duration (in seconds) to replay the snapshot.
	ClipRect       dom.Rect   `json:"clipRect,omitempty"`       // The clip rectangle to apply when replaying the snapshot.
}

// Unmarshal the byte array into a return value for ProfileSnapshot in the LayerTree domain.
func (a *ProfileSnapshotArgs) UnmarshalJSON(b []byte) error {
	type Copy ProfileSnapshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ProfileSnapshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ProfileSnapshot in the LayerTree domain.
func (a *ProfileSnapshotArgs) MarshalJSON() ([]byte, error) {
	type Copy ProfileSnapshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ProfileSnapshotReply represents the return values for ProfileSnapshot in the LayerTree domain.
type ProfileSnapshotReply struct {
	Timings []PaintProfile `json:"timings"` // The array of paint profiles, one per run.
}

// ProfileSnapshotReply returns whether or not the FrameID matches the reply value for ProfileSnapshot in the LayerTree domain.
func (a *ProfileSnapshotReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ProfileSnapshotReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for ProfileSnapshot in the LayerTree domain.
func (a *ProfileSnapshotReply) UnmarshalJSON(b []byte) error {
	type Copy ProfileSnapshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ProfileSnapshotReply(*c)
	return nil
}

const CommandLayerTreeReleaseSnapshot = "LayerTree.releaseSnapshot"

// ReleaseSnapshotArgs represents the arguments for ReleaseSnapshot in the LayerTree domain.
type ReleaseSnapshotArgs struct {
	SnapshotID SnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// Unmarshal the byte array into a return value for ReleaseSnapshot in the LayerTree domain.
func (a *ReleaseSnapshotArgs) UnmarshalJSON(b []byte) error {
	type Copy ReleaseSnapshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReleaseSnapshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ReleaseSnapshot in the LayerTree domain.
func (a *ReleaseSnapshotArgs) MarshalJSON() ([]byte, error) {
	type Copy ReleaseSnapshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ReleaseSnapshotReply represents the return values for ReleaseSnapshot in the LayerTree domain.
type ReleaseSnapshotReply struct {
}

// ReleaseSnapshotReply returns whether or not the FrameID matches the reply value for ReleaseSnapshot in the LayerTree domain.
func (a *ReleaseSnapshotReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ReleaseSnapshotReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for ReleaseSnapshot in the LayerTree domain.
func (a *ReleaseSnapshotReply) UnmarshalJSON(b []byte) error {
	type Copy ReleaseSnapshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReleaseSnapshotReply(*c)
	return nil
}

const CommandLayerTreeReplaySnapshot = "LayerTree.replaySnapshot"

// ReplaySnapshotArgs represents the arguments for ReplaySnapshot in the LayerTree domain.
type ReplaySnapshotArgs struct {
	SnapshotID SnapshotID `json:"snapshotId"`         // The id of the layer snapshot.
	FromStep   int        `json:"fromStep,omitempty"` // The first step to replay from (replay from the very start if not specified).
	ToStep     int        `json:"toStep,omitempty"`   // The last step to replay to (replay till the end if not specified).
	Scale      float64    `json:"scale,omitempty"`    // The scale to apply while replaying (defaults to 1).
}

// Unmarshal the byte array into a return value for ReplaySnapshot in the LayerTree domain.
func (a *ReplaySnapshotArgs) UnmarshalJSON(b []byte) error {
	type Copy ReplaySnapshotArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReplaySnapshotArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ReplaySnapshot in the LayerTree domain.
func (a *ReplaySnapshotArgs) MarshalJSON() ([]byte, error) {
	type Copy ReplaySnapshotArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ReplaySnapshotReply represents the return values for ReplaySnapshot in the LayerTree domain.
type ReplaySnapshotReply struct {
	DataURL string `json:"dataURL"` // A data: URL for resulting image.
}

// ReplaySnapshotReply returns whether or not the FrameID matches the reply value for ReplaySnapshot in the LayerTree domain.
func (a *ReplaySnapshotReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: ReplaySnapshotReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for ReplaySnapshot in the LayerTree domain.
func (a *ReplaySnapshotReply) UnmarshalJSON(b []byte) error {
	type Copy ReplaySnapshotReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReplaySnapshotReply(*c)
	return nil
}

const CommandLayerTreeSnapshotCommandLog = "LayerTree.snapshotCommandLog"

// SnapshotCommandLogArgs represents the arguments for SnapshotCommandLog in the LayerTree domain.
type SnapshotCommandLogArgs struct {
	SnapshotID SnapshotID `json:"snapshotId"` // The id of the layer snapshot.
}

// Unmarshal the byte array into a return value for SnapshotCommandLog in the LayerTree domain.
func (a *SnapshotCommandLogArgs) UnmarshalJSON(b []byte) error {
	type Copy SnapshotCommandLogArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SnapshotCommandLogArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SnapshotCommandLog in the LayerTree domain.
func (a *SnapshotCommandLogArgs) MarshalJSON() ([]byte, error) {
	type Copy SnapshotCommandLogArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SnapshotCommandLogReply represents the return values for SnapshotCommandLog in the LayerTree domain.
type SnapshotCommandLogReply struct {
	CommandLog []json.RawMessage `json:"commandLog"` // The array of canvas function calls.
}

// SnapshotCommandLogReply returns whether or not the FrameID matches the reply value for SnapshotCommandLog in the LayerTree domain.
func (a *SnapshotCommandLogReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: SnapshotCommandLogReply", err)
	}
	return true
}

// Unmarshal the byte array into a return value for SnapshotCommandLog in the LayerTree domain.
func (a *SnapshotCommandLogReply) UnmarshalJSON(b []byte) error {
	type Copy SnapshotCommandLogReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SnapshotCommandLogReply(*c)
	return nil
}
