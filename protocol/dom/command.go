// Code generated by cdpgen. DO NOT EDIT.

package dom

import (
	"encoding/json"

	"github.com/4ydx/cdp/protocol"
	"github.com/4ydx/cdp/protocol/runtime"
)

const CommandDOMCollectClassNamesFromSubtree = "DOM.collectClassNamesFromSubtree"

// CollectClassNamesFromSubtreeArgs represents the arguments for CollectClassNamesFromSubtree in the DOM domain.
type CollectClassNamesFromSubtreeArgs struct {
	NodeID NodeID `json:"nodeId"` // Id of the node to collect class names.
}

// Unmarshal the byte array into a return value for CollectClassNamesFromSubtree in the DOM domain.
func (a *CollectClassNamesFromSubtreeArgs) UnmarshalJSON(b []byte) error {
	type Copy CollectClassNamesFromSubtreeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CollectClassNamesFromSubtreeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for CollectClassNamesFromSubtree in the DOM domain.
func (a *CollectClassNamesFromSubtreeArgs) MarshalJSON() ([]byte, error) {
	type Copy CollectClassNamesFromSubtreeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CollectClassNamesFromSubtreeReply represents the return values for CollectClassNamesFromSubtree in the DOM domain.
type CollectClassNamesFromSubtreeReply struct {
	ClassNames []string `json:"classNames"` // Class name list.
}

// Unmarshal the byte array into a return value for CollectClassNamesFromSubtree in the DOM domain.
func (a *CollectClassNamesFromSubtreeReply) UnmarshalJSON(b []byte) error {
	type Copy CollectClassNamesFromSubtreeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CollectClassNamesFromSubtreeReply(*c)
	return nil
}

const CommandDOMCopyTo = "DOM.copyTo"

// CopyToArgs represents the arguments for CopyTo in the DOM domain.
type CopyToArgs struct {
	NodeID             NodeID `json:"nodeId"`                       // Id of the node to copy.
	TargetNodeID       NodeID `json:"targetNodeId"`                 // Id of the element to drop the copy into.
	InsertBeforeNodeID NodeID `json:"insertBeforeNodeId,omitempty"` // Drop the copy before this node (if absent, the copy becomes the last child of `targetNodeId`).
}

// Unmarshal the byte array into a return value for CopyTo in the DOM domain.
func (a *CopyToArgs) UnmarshalJSON(b []byte) error {
	type Copy CopyToArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CopyToArgs(*c)
	return nil
}

// Marshall the byte array into a return value for CopyTo in the DOM domain.
func (a *CopyToArgs) MarshalJSON() ([]byte, error) {
	type Copy CopyToArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// CopyToReply represents the return values for CopyTo in the DOM domain.
type CopyToReply struct {
	NodeID NodeID `json:"nodeId"` // Id of the node clone.
}

// Unmarshal the byte array into a return value for CopyTo in the DOM domain.
func (a *CopyToReply) UnmarshalJSON(b []byte) error {
	type Copy CopyToReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CopyToReply(*c)
	return nil
}

const CommandDOMDescribeNode = "DOM.describeNode"

// DescribeNodeArgs represents the arguments for DescribeNode in the DOM domain.
type DescribeNodeArgs struct {
	NodeID        NodeID                `json:"nodeId,omitempty"`        // Identifier of the node.
	BackendNodeID BackendNodeID         `json:"backendNodeId,omitempty"` // Identifier of the backend node.
	ObjectID      shared.RemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node wrapper.
	Depth         int                   `json:"depth,omitempty"`         // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce        bool                  `json:"pierce,omitempty"`        // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
}

// Unmarshal the byte array into a return value for DescribeNode in the DOM domain.
func (a *DescribeNodeArgs) UnmarshalJSON(b []byte) error {
	type Copy DescribeNodeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DescribeNodeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for DescribeNode in the DOM domain.
func (a *DescribeNodeArgs) MarshalJSON() ([]byte, error) {
	type Copy DescribeNodeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DescribeNodeReply represents the return values for DescribeNode in the DOM domain.
type DescribeNodeReply struct {
	Node Node `json:"node"` // Node description.
}

// Unmarshal the byte array into a return value for DescribeNode in the DOM domain.
func (a *DescribeNodeReply) UnmarshalJSON(b []byte) error {
	type Copy DescribeNodeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DescribeNodeReply(*c)
	return nil
}

const CommandDOMDisable = "DOM.disable"

// DisableArgs represents the arguments for Disable in the DOM domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the DOM domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the DOM domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the DOM domain.
type DisableReply struct {
}

// Unmarshal the byte array into a return value for Disable in the DOM domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

const CommandDOMDiscardSearchResults = "DOM.discardSearchResults"

// DiscardSearchResultsArgs represents the arguments for DiscardSearchResults in the DOM domain.
type DiscardSearchResultsArgs struct {
	SearchID string `json:"searchId"` // Unique search session identifier.
}

// Unmarshal the byte array into a return value for DiscardSearchResults in the DOM domain.
func (a *DiscardSearchResultsArgs) UnmarshalJSON(b []byte) error {
	type Copy DiscardSearchResultsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DiscardSearchResultsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for DiscardSearchResults in the DOM domain.
func (a *DiscardSearchResultsArgs) MarshalJSON() ([]byte, error) {
	type Copy DiscardSearchResultsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DiscardSearchResultsReply represents the return values for DiscardSearchResults in the DOM domain.
type DiscardSearchResultsReply struct {
}

// Unmarshal the byte array into a return value for DiscardSearchResults in the DOM domain.
func (a *DiscardSearchResultsReply) UnmarshalJSON(b []byte) error {
	type Copy DiscardSearchResultsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DiscardSearchResultsReply(*c)
	return nil
}

const CommandDOMEnable = "DOM.enable"

// EnableArgs represents the arguments for Enable in the DOM domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the DOM domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the DOM domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the DOM domain.
type EnableReply struct {
}

// Unmarshal the byte array into a return value for Enable in the DOM domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

const CommandDOMFocus = "DOM.focus"

// FocusArgs represents the arguments for Focus in the DOM domain.
type FocusArgs struct {
	NodeID        NodeID                `json:"nodeId,omitempty"`        // Identifier of the node.
	BackendNodeID BackendNodeID         `json:"backendNodeId,omitempty"` // Identifier of the backend node.
	ObjectID      shared.RemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node wrapper.
}

// Unmarshal the byte array into a return value for Focus in the DOM domain.
func (a *FocusArgs) UnmarshalJSON(b []byte) error {
	type Copy FocusArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FocusArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Focus in the DOM domain.
func (a *FocusArgs) MarshalJSON() ([]byte, error) {
	type Copy FocusArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// FocusReply represents the return values for Focus in the DOM domain.
type FocusReply struct {
}

// Unmarshal the byte array into a return value for Focus in the DOM domain.
func (a *FocusReply) UnmarshalJSON(b []byte) error {
	type Copy FocusReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = FocusReply(*c)
	return nil
}

const CommandDOMGetAttributes = "DOM.getAttributes"

// GetAttributesArgs represents the arguments for GetAttributes in the DOM domain.
type GetAttributesArgs struct {
	NodeID NodeID `json:"nodeId"` // Id of the node to retrieve attibutes for.
}

// Unmarshal the byte array into a return value for GetAttributes in the DOM domain.
func (a *GetAttributesArgs) UnmarshalJSON(b []byte) error {
	type Copy GetAttributesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetAttributesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetAttributes in the DOM domain.
func (a *GetAttributesArgs) MarshalJSON() ([]byte, error) {
	type Copy GetAttributesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetAttributesReply represents the return values for GetAttributes in the DOM domain.
type GetAttributesReply struct {
	Attributes []string `json:"attributes"` // An interleaved array of node attribute names and values.
}

// Unmarshal the byte array into a return value for GetAttributes in the DOM domain.
func (a *GetAttributesReply) UnmarshalJSON(b []byte) error {
	type Copy GetAttributesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetAttributesReply(*c)
	return nil
}

const CommandDOMGetBoxModel = "DOM.getBoxModel"

// GetBoxModelArgs represents the arguments for GetBoxModel in the DOM domain.
type GetBoxModelArgs struct {
	NodeID        NodeID                `json:"nodeId,omitempty"`        // Identifier of the node.
	BackendNodeID BackendNodeID         `json:"backendNodeId,omitempty"` // Identifier of the backend node.
	ObjectID      shared.RemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node wrapper.
}

// Unmarshal the byte array into a return value for GetBoxModel in the DOM domain.
func (a *GetBoxModelArgs) UnmarshalJSON(b []byte) error {
	type Copy GetBoxModelArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetBoxModelArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetBoxModel in the DOM domain.
func (a *GetBoxModelArgs) MarshalJSON() ([]byte, error) {
	type Copy GetBoxModelArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetBoxModelReply represents the return values for GetBoxModel in the DOM domain.
type GetBoxModelReply struct {
	Model BoxModel `json:"model"` // Box model for the node.
}

// Unmarshal the byte array into a return value for GetBoxModel in the DOM domain.
func (a *GetBoxModelReply) UnmarshalJSON(b []byte) error {
	type Copy GetBoxModelReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetBoxModelReply(*c)
	return nil
}

const CommandDOMGetContentQuads = "DOM.getContentQuads"

// GetContentQuadsArgs represents the arguments for GetContentQuads in the DOM domain.
type GetContentQuadsArgs struct {
	NodeID        NodeID                `json:"nodeId,omitempty"`        // Identifier of the node.
	BackendNodeID BackendNodeID         `json:"backendNodeId,omitempty"` // Identifier of the backend node.
	ObjectID      shared.RemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node wrapper.
}

// Unmarshal the byte array into a return value for GetContentQuads in the DOM domain.
func (a *GetContentQuadsArgs) UnmarshalJSON(b []byte) error {
	type Copy GetContentQuadsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetContentQuadsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetContentQuads in the DOM domain.
func (a *GetContentQuadsArgs) MarshalJSON() ([]byte, error) {
	type Copy GetContentQuadsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetContentQuadsReply represents the return values for GetContentQuads in the DOM domain.
type GetContentQuadsReply struct {
	Quads []Quad `json:"quads"` // Quads that describe node layout relative to viewport.
}

// Unmarshal the byte array into a return value for GetContentQuads in the DOM domain.
func (a *GetContentQuadsReply) UnmarshalJSON(b []byte) error {
	type Copy GetContentQuadsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetContentQuadsReply(*c)
	return nil
}

const CommandDOMGetDocument = "DOM.getDocument"

// GetDocumentArgs represents the arguments for GetDocument in the DOM domain.
type GetDocumentArgs struct {
	Depth  int  `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce bool `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
}

// Unmarshal the byte array into a return value for GetDocument in the DOM domain.
func (a *GetDocumentArgs) UnmarshalJSON(b []byte) error {
	type Copy GetDocumentArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetDocumentArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetDocument in the DOM domain.
func (a *GetDocumentArgs) MarshalJSON() ([]byte, error) {
	type Copy GetDocumentArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetDocumentReply represents the return values for GetDocument in the DOM domain.
type GetDocumentReply struct {
	Root Node `json:"root"` // Resulting node.
}

// Unmarshal the byte array into a return value for GetDocument in the DOM domain.
func (a *GetDocumentReply) UnmarshalJSON(b []byte) error {
	type Copy GetDocumentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetDocumentReply(*c)
	return nil
}

const CommandDOMGetFlattenedDocument = "DOM.getFlattenedDocument"

// GetFlattenedDocumentArgs represents the arguments for GetFlattenedDocument in the DOM domain.
type GetFlattenedDocumentArgs struct {
	Depth  int  `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce bool `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the subtree (default is false).
}

// Unmarshal the byte array into a return value for GetFlattenedDocument in the DOM domain.
func (a *GetFlattenedDocumentArgs) UnmarshalJSON(b []byte) error {
	type Copy GetFlattenedDocumentArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetFlattenedDocumentArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetFlattenedDocument in the DOM domain.
func (a *GetFlattenedDocumentArgs) MarshalJSON() ([]byte, error) {
	type Copy GetFlattenedDocumentArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetFlattenedDocumentReply represents the return values for GetFlattenedDocument in the DOM domain.
type GetFlattenedDocumentReply struct {
	Nodes []Node `json:"nodes"` // Resulting node.
}

// Unmarshal the byte array into a return value for GetFlattenedDocument in the DOM domain.
func (a *GetFlattenedDocumentReply) UnmarshalJSON(b []byte) error {
	type Copy GetFlattenedDocumentReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetFlattenedDocumentReply(*c)
	return nil
}

const CommandDOMGetNodeForLocation = "DOM.getNodeForLocation"

// GetNodeForLocationArgs represents the arguments for GetNodeForLocation in the DOM domain.
type GetNodeForLocationArgs struct {
	X                         int  `json:"x"`                                   // X coordinate.
	Y                         int  `json:"y"`                                   // Y coordinate.
	IncludeUserAgentShadowDOM bool `json:"includeUserAgentShadowDOM,omitempty"` // False to skip to the nearest non-UA shadow root ancestor (default: false).
}

// Unmarshal the byte array into a return value for GetNodeForLocation in the DOM domain.
func (a *GetNodeForLocationArgs) UnmarshalJSON(b []byte) error {
	type Copy GetNodeForLocationArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetNodeForLocationArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetNodeForLocation in the DOM domain.
func (a *GetNodeForLocationArgs) MarshalJSON() ([]byte, error) {
	type Copy GetNodeForLocationArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetNodeForLocationReply represents the return values for GetNodeForLocation in the DOM domain.
type GetNodeForLocationReply struct {
	NodeID NodeID `json:"nodeId"` // Id of the node at given coordinates.
}

// Unmarshal the byte array into a return value for GetNodeForLocation in the DOM domain.
func (a *GetNodeForLocationReply) UnmarshalJSON(b []byte) error {
	type Copy GetNodeForLocationReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetNodeForLocationReply(*c)
	return nil
}

const CommandDOMGetOuterHTML = "DOM.getOuterHTML"

// GetOuterHTMLArgs represents the arguments for GetOuterHTML in the DOM domain.
type GetOuterHTMLArgs struct {
	NodeID        NodeID                `json:"nodeId,omitempty"`        // Identifier of the node.
	BackendNodeID BackendNodeID         `json:"backendNodeId,omitempty"` // Identifier of the backend node.
	ObjectID      shared.RemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node wrapper.
}

// Unmarshal the byte array into a return value for GetOuterHTML in the DOM domain.
func (a *GetOuterHTMLArgs) UnmarshalJSON(b []byte) error {
	type Copy GetOuterHTMLArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetOuterHTMLArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetOuterHTML in the DOM domain.
func (a *GetOuterHTMLArgs) MarshalJSON() ([]byte, error) {
	type Copy GetOuterHTMLArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetOuterHTMLReply represents the return values for GetOuterHTML in the DOM domain.
type GetOuterHTMLReply struct {
	OuterHTML string `json:"outerHTML"` // Outer HTML markup.
}

// Unmarshal the byte array into a return value for GetOuterHTML in the DOM domain.
func (a *GetOuterHTMLReply) UnmarshalJSON(b []byte) error {
	type Copy GetOuterHTMLReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetOuterHTMLReply(*c)
	return nil
}

const CommandDOMGetRelayoutBoundary = "DOM.getRelayoutBoundary"

// GetRelayoutBoundaryArgs represents the arguments for GetRelayoutBoundary in the DOM domain.
type GetRelayoutBoundaryArgs struct {
	NodeID NodeID `json:"nodeId"` // Id of the node.
}

// Unmarshal the byte array into a return value for GetRelayoutBoundary in the DOM domain.
func (a *GetRelayoutBoundaryArgs) UnmarshalJSON(b []byte) error {
	type Copy GetRelayoutBoundaryArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetRelayoutBoundaryArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetRelayoutBoundary in the DOM domain.
func (a *GetRelayoutBoundaryArgs) MarshalJSON() ([]byte, error) {
	type Copy GetRelayoutBoundaryArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetRelayoutBoundaryReply represents the return values for GetRelayoutBoundary in the DOM domain.
type GetRelayoutBoundaryReply struct {
	NodeID NodeID `json:"nodeId"` // Relayout boundary node id for the given node.
}

// Unmarshal the byte array into a return value for GetRelayoutBoundary in the DOM domain.
func (a *GetRelayoutBoundaryReply) UnmarshalJSON(b []byte) error {
	type Copy GetRelayoutBoundaryReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetRelayoutBoundaryReply(*c)
	return nil
}

const CommandDOMGetSearchResults = "DOM.getSearchResults"

// GetSearchResultsArgs represents the arguments for GetSearchResults in the DOM domain.
type GetSearchResultsArgs struct {
	SearchID  string `json:"searchId"`  // Unique search session identifier.
	FromIndex int    `json:"fromIndex"` // Start index of the search result to be returned.
	ToIndex   int    `json:"toIndex"`   // End index of the search result to be returned.
}

// Unmarshal the byte array into a return value for GetSearchResults in the DOM domain.
func (a *GetSearchResultsArgs) UnmarshalJSON(b []byte) error {
	type Copy GetSearchResultsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetSearchResultsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetSearchResults in the DOM domain.
func (a *GetSearchResultsArgs) MarshalJSON() ([]byte, error) {
	type Copy GetSearchResultsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetSearchResultsReply represents the return values for GetSearchResults in the DOM domain.
type GetSearchResultsReply struct {
	NodeIDs []NodeID `json:"nodeIds"` // Ids of the search result nodes.
}

// Unmarshal the byte array into a return value for GetSearchResults in the DOM domain.
func (a *GetSearchResultsReply) UnmarshalJSON(b []byte) error {
	type Copy GetSearchResultsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetSearchResultsReply(*c)
	return nil
}

const CommandDOMMarkUndoableState = "DOM.markUndoableState"

// MarkUndoableStateArgs represents the arguments for MarkUndoableState in the DOM domain.
type MarkUndoableStateArgs struct {
}

// Unmarshal the byte array into a return value for MarkUndoableState in the DOM domain.
func (a *MarkUndoableStateArgs) UnmarshalJSON(b []byte) error {
	type Copy MarkUndoableStateArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = MarkUndoableStateArgs(*c)
	return nil
}

// Marshall the byte array into a return value for MarkUndoableState in the DOM domain.
func (a *MarkUndoableStateArgs) MarshalJSON() ([]byte, error) {
	type Copy MarkUndoableStateArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// MarkUndoableStateReply represents the return values for MarkUndoableState in the DOM domain.
type MarkUndoableStateReply struct {
}

// Unmarshal the byte array into a return value for MarkUndoableState in the DOM domain.
func (a *MarkUndoableStateReply) UnmarshalJSON(b []byte) error {
	type Copy MarkUndoableStateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = MarkUndoableStateReply(*c)
	return nil
}

const CommandDOMMoveTo = "DOM.moveTo"

// MoveToArgs represents the arguments for MoveTo in the DOM domain.
type MoveToArgs struct {
	NodeID             NodeID `json:"nodeId"`                       // Id of the node to move.
	TargetNodeID       NodeID `json:"targetNodeId"`                 // Id of the element to drop the moved node into.
	InsertBeforeNodeID NodeID `json:"insertBeforeNodeId,omitempty"` // Drop node before this one (if absent, the moved node becomes the last child of `targetNodeId`).
}

// Unmarshal the byte array into a return value for MoveTo in the DOM domain.
func (a *MoveToArgs) UnmarshalJSON(b []byte) error {
	type Copy MoveToArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = MoveToArgs(*c)
	return nil
}

// Marshall the byte array into a return value for MoveTo in the DOM domain.
func (a *MoveToArgs) MarshalJSON() ([]byte, error) {
	type Copy MoveToArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// MoveToReply represents the return values for MoveTo in the DOM domain.
type MoveToReply struct {
	NodeID NodeID `json:"nodeId"` // New id of the moved node.
}

// Unmarshal the byte array into a return value for MoveTo in the DOM domain.
func (a *MoveToReply) UnmarshalJSON(b []byte) error {
	type Copy MoveToReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = MoveToReply(*c)
	return nil
}

const CommandDOMPerformSearch = "DOM.performSearch"

// PerformSearchArgs represents the arguments for PerformSearch in the DOM domain.
type PerformSearchArgs struct {
	Query                     string `json:"query"`                               // Plain text or query selector or XPath search query.
	IncludeUserAgentShadowDOM bool   `json:"includeUserAgentShadowDOM,omitempty"` // True to search in user agent shadow DOM.
}

// Unmarshal the byte array into a return value for PerformSearch in the DOM domain.
func (a *PerformSearchArgs) UnmarshalJSON(b []byte) error {
	type Copy PerformSearchArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PerformSearchArgs(*c)
	return nil
}

// Marshall the byte array into a return value for PerformSearch in the DOM domain.
func (a *PerformSearchArgs) MarshalJSON() ([]byte, error) {
	type Copy PerformSearchArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// PerformSearchReply represents the return values for PerformSearch in the DOM domain.
type PerformSearchReply struct {
	SearchID    string `json:"searchId"`    // Unique search session identifier.
	ResultCount int    `json:"resultCount"` // Number of search results.
}

// Unmarshal the byte array into a return value for PerformSearch in the DOM domain.
func (a *PerformSearchReply) UnmarshalJSON(b []byte) error {
	type Copy PerformSearchReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PerformSearchReply(*c)
	return nil
}

const CommandDOMPushNodeByPathToFrontend = "DOM.pushNodeByPathToFrontend"

// PushNodeByPathToFrontendArgs represents the arguments for PushNodeByPathToFrontend in the DOM domain.
type PushNodeByPathToFrontendArgs struct {
	Path string `json:"path"` // Path to node in the proprietary format.
}

// Unmarshal the byte array into a return value for PushNodeByPathToFrontend in the DOM domain.
func (a *PushNodeByPathToFrontendArgs) UnmarshalJSON(b []byte) error {
	type Copy PushNodeByPathToFrontendArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PushNodeByPathToFrontendArgs(*c)
	return nil
}

// Marshall the byte array into a return value for PushNodeByPathToFrontend in the DOM domain.
func (a *PushNodeByPathToFrontendArgs) MarshalJSON() ([]byte, error) {
	type Copy PushNodeByPathToFrontendArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// PushNodeByPathToFrontendReply represents the return values for PushNodeByPathToFrontend in the DOM domain.
type PushNodeByPathToFrontendReply struct {
	NodeID NodeID `json:"nodeId"` // Id of the node for given path.
}

// Unmarshal the byte array into a return value for PushNodeByPathToFrontend in the DOM domain.
func (a *PushNodeByPathToFrontendReply) UnmarshalJSON(b []byte) error {
	type Copy PushNodeByPathToFrontendReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PushNodeByPathToFrontendReply(*c)
	return nil
}

const CommandDOMPushNodesByBackendIdsToFrontend = "DOM.pushNodesByBackendIdsToFrontend"

// PushNodesByBackendIdsToFrontendArgs represents the arguments for PushNodesByBackendIdsToFrontend in the DOM domain.
type PushNodesByBackendIdsToFrontendArgs struct {
	BackendNodeIDs []BackendNodeID `json:"backendNodeIds"` // The array of backend node ids.
}

// Unmarshal the byte array into a return value for PushNodesByBackendIdsToFrontend in the DOM domain.
func (a *PushNodesByBackendIdsToFrontendArgs) UnmarshalJSON(b []byte) error {
	type Copy PushNodesByBackendIdsToFrontendArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PushNodesByBackendIdsToFrontendArgs(*c)
	return nil
}

// Marshall the byte array into a return value for PushNodesByBackendIdsToFrontend in the DOM domain.
func (a *PushNodesByBackendIdsToFrontendArgs) MarshalJSON() ([]byte, error) {
	type Copy PushNodesByBackendIdsToFrontendArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// PushNodesByBackendIdsToFrontendReply represents the return values for PushNodesByBackendIdsToFrontend in the DOM domain.
type PushNodesByBackendIdsToFrontendReply struct {
	NodeIDs []NodeID `json:"nodeIds"` // The array of ids of pushed nodes that correspond to the backend ids specified in backendNodeIds.
}

// Unmarshal the byte array into a return value for PushNodesByBackendIdsToFrontend in the DOM domain.
func (a *PushNodesByBackendIdsToFrontendReply) UnmarshalJSON(b []byte) error {
	type Copy PushNodesByBackendIdsToFrontendReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PushNodesByBackendIdsToFrontendReply(*c)
	return nil
}

const CommandDOMQuerySelector = "DOM.querySelector"

// QuerySelectorArgs represents the arguments for QuerySelector in the DOM domain.
type QuerySelectorArgs struct {
	NodeID   NodeID `json:"nodeId"`   // Id of the node to query upon.
	Selector string `json:"selector"` // Selector string.
}

// Unmarshal the byte array into a return value for QuerySelector in the DOM domain.
func (a *QuerySelectorArgs) UnmarshalJSON(b []byte) error {
	type Copy QuerySelectorArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = QuerySelectorArgs(*c)
	return nil
}

// Marshall the byte array into a return value for QuerySelector in the DOM domain.
func (a *QuerySelectorArgs) MarshalJSON() ([]byte, error) {
	type Copy QuerySelectorArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// QuerySelectorReply represents the return values for QuerySelector in the DOM domain.
type QuerySelectorReply struct {
	NodeID NodeID `json:"nodeId"` // Query selector result.
}

// Unmarshal the byte array into a return value for QuerySelector in the DOM domain.
func (a *QuerySelectorReply) UnmarshalJSON(b []byte) error {
	type Copy QuerySelectorReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = QuerySelectorReply(*c)
	return nil
}

const CommandDOMQuerySelectorAll = "DOM.querySelectorAll"

// QuerySelectorAllArgs represents the arguments for QuerySelectorAll in the DOM domain.
type QuerySelectorAllArgs struct {
	NodeID   NodeID `json:"nodeId"`   // Id of the node to query upon.
	Selector string `json:"selector"` // Selector string.
}

// Unmarshal the byte array into a return value for QuerySelectorAll in the DOM domain.
func (a *QuerySelectorAllArgs) UnmarshalJSON(b []byte) error {
	type Copy QuerySelectorAllArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = QuerySelectorAllArgs(*c)
	return nil
}

// Marshall the byte array into a return value for QuerySelectorAll in the DOM domain.
func (a *QuerySelectorAllArgs) MarshalJSON() ([]byte, error) {
	type Copy QuerySelectorAllArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// QuerySelectorAllReply represents the return values for QuerySelectorAll in the DOM domain.
type QuerySelectorAllReply struct {
	NodeIDs []NodeID `json:"nodeIds"` // Query selector result.
}

// Unmarshal the byte array into a return value for QuerySelectorAll in the DOM domain.
func (a *QuerySelectorAllReply) UnmarshalJSON(b []byte) error {
	type Copy QuerySelectorAllReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = QuerySelectorAllReply(*c)
	return nil
}

const CommandDOMRedo = "DOM.redo"

// RedoArgs represents the arguments for Redo in the DOM domain.
type RedoArgs struct {
}

// Unmarshal the byte array into a return value for Redo in the DOM domain.
func (a *RedoArgs) UnmarshalJSON(b []byte) error {
	type Copy RedoArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RedoArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Redo in the DOM domain.
func (a *RedoArgs) MarshalJSON() ([]byte, error) {
	type Copy RedoArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RedoReply represents the return values for Redo in the DOM domain.
type RedoReply struct {
}

// Unmarshal the byte array into a return value for Redo in the DOM domain.
func (a *RedoReply) UnmarshalJSON(b []byte) error {
	type Copy RedoReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RedoReply(*c)
	return nil
}

const CommandDOMRemoveAttribute = "DOM.removeAttribute"

// RemoveAttributeArgs represents the arguments for RemoveAttribute in the DOM domain.
type RemoveAttributeArgs struct {
	NodeID NodeID `json:"nodeId"` // Id of the element to remove attribute from.
	Name   string `json:"name"`   // Name of the attribute to remove.
}

// Unmarshal the byte array into a return value for RemoveAttribute in the DOM domain.
func (a *RemoveAttributeArgs) UnmarshalJSON(b []byte) error {
	type Copy RemoveAttributeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveAttributeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RemoveAttribute in the DOM domain.
func (a *RemoveAttributeArgs) MarshalJSON() ([]byte, error) {
	type Copy RemoveAttributeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RemoveAttributeReply represents the return values for RemoveAttribute in the DOM domain.
type RemoveAttributeReply struct {
}

// Unmarshal the byte array into a return value for RemoveAttribute in the DOM domain.
func (a *RemoveAttributeReply) UnmarshalJSON(b []byte) error {
	type Copy RemoveAttributeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveAttributeReply(*c)
	return nil
}

const CommandDOMRemoveNode = "DOM.removeNode"

// RemoveNodeArgs represents the arguments for RemoveNode in the DOM domain.
type RemoveNodeArgs struct {
	NodeID NodeID `json:"nodeId"` // Id of the node to remove.
}

// Unmarshal the byte array into a return value for RemoveNode in the DOM domain.
func (a *RemoveNodeArgs) UnmarshalJSON(b []byte) error {
	type Copy RemoveNodeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveNodeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RemoveNode in the DOM domain.
func (a *RemoveNodeArgs) MarshalJSON() ([]byte, error) {
	type Copy RemoveNodeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RemoveNodeReply represents the return values for RemoveNode in the DOM domain.
type RemoveNodeReply struct {
}

// Unmarshal the byte array into a return value for RemoveNode in the DOM domain.
func (a *RemoveNodeReply) UnmarshalJSON(b []byte) error {
	type Copy RemoveNodeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RemoveNodeReply(*c)
	return nil
}

const CommandDOMRequestChildNodes = "DOM.requestChildNodes"

// RequestChildNodesArgs represents the arguments for RequestChildNodes in the DOM domain.
type RequestChildNodesArgs struct {
	NodeID NodeID `json:"nodeId"`           // Id of the node to get children for.
	Depth  int    `json:"depth,omitempty"`  // The maximum depth at which children should be retrieved, defaults to 1. Use -1 for the entire subtree or provide an integer larger than 0.
	Pierce bool   `json:"pierce,omitempty"` // Whether or not iframes and shadow roots should be traversed when returning the sub-tree (default is false).
}

// Unmarshal the byte array into a return value for RequestChildNodes in the DOM domain.
func (a *RequestChildNodesArgs) UnmarshalJSON(b []byte) error {
	type Copy RequestChildNodesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestChildNodesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RequestChildNodes in the DOM domain.
func (a *RequestChildNodesArgs) MarshalJSON() ([]byte, error) {
	type Copy RequestChildNodesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RequestChildNodesReply represents the return values for RequestChildNodes in the DOM domain.
type RequestChildNodesReply struct {
}

// Unmarshal the byte array into a return value for RequestChildNodes in the DOM domain.
func (a *RequestChildNodesReply) UnmarshalJSON(b []byte) error {
	type Copy RequestChildNodesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestChildNodesReply(*c)
	return nil
}

const CommandDOMRequestNode = "DOM.requestNode"

// RequestNodeArgs represents the arguments for RequestNode in the DOM domain.
type RequestNodeArgs struct {
	ObjectID shared.RemoteObjectID `json:"objectId"` // JavaScript object id to convert into node.
}

// Unmarshal the byte array into a return value for RequestNode in the DOM domain.
func (a *RequestNodeArgs) UnmarshalJSON(b []byte) error {
	type Copy RequestNodeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestNodeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for RequestNode in the DOM domain.
func (a *RequestNodeArgs) MarshalJSON() ([]byte, error) {
	type Copy RequestNodeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// RequestNodeReply represents the return values for RequestNode in the DOM domain.
type RequestNodeReply struct {
	NodeID NodeID `json:"nodeId"` // Node id for given object.
}

// Unmarshal the byte array into a return value for RequestNode in the DOM domain.
func (a *RequestNodeReply) UnmarshalJSON(b []byte) error {
	type Copy RequestNodeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = RequestNodeReply(*c)
	return nil
}

const CommandDOMResolveNode = "DOM.resolveNode"

// ResolveNodeArgs represents the arguments for ResolveNode in the DOM domain.
type ResolveNodeArgs struct {
	NodeID        NodeID        `json:"nodeId,omitempty"`        // Id of the node to resolve.
	BackendNodeID BackendNodeID `json:"backendNodeId,omitempty"` // Backend identifier of the node to resolve.
	ObjectGroup   string        `json:"objectGroup,omitempty"`   // Symbolic group name that can be used to release multiple objects.
}

// Unmarshal the byte array into a return value for ResolveNode in the DOM domain.
func (a *ResolveNodeArgs) UnmarshalJSON(b []byte) error {
	type Copy ResolveNodeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResolveNodeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ResolveNode in the DOM domain.
func (a *ResolveNodeArgs) MarshalJSON() ([]byte, error) {
	type Copy ResolveNodeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ResolveNodeReply represents the return values for ResolveNode in the DOM domain.
type ResolveNodeReply struct {
	Object runtime.RemoteObject `json:"object"` // JavaScript object wrapper for given node.
}

// Unmarshal the byte array into a return value for ResolveNode in the DOM domain.
func (a *ResolveNodeReply) UnmarshalJSON(b []byte) error {
	type Copy ResolveNodeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResolveNodeReply(*c)
	return nil
}

const CommandDOMSetAttributeValue = "DOM.setAttributeValue"

// SetAttributeValueArgs represents the arguments for SetAttributeValue in the DOM domain.
type SetAttributeValueArgs struct {
	NodeID NodeID `json:"nodeId"` // Id of the element to set attribute for.
	Name   string `json:"name"`   // Attribute name.
	Value  string `json:"value"`  // Attribute value.
}

// Unmarshal the byte array into a return value for SetAttributeValue in the DOM domain.
func (a *SetAttributeValueArgs) UnmarshalJSON(b []byte) error {
	type Copy SetAttributeValueArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetAttributeValueArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetAttributeValue in the DOM domain.
func (a *SetAttributeValueArgs) MarshalJSON() ([]byte, error) {
	type Copy SetAttributeValueArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetAttributeValueReply represents the return values for SetAttributeValue in the DOM domain.
type SetAttributeValueReply struct {
}

// Unmarshal the byte array into a return value for SetAttributeValue in the DOM domain.
func (a *SetAttributeValueReply) UnmarshalJSON(b []byte) error {
	type Copy SetAttributeValueReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetAttributeValueReply(*c)
	return nil
}

const CommandDOMSetAttributesAsText = "DOM.setAttributesAsText"

// SetAttributesAsTextArgs represents the arguments for SetAttributesAsText in the DOM domain.
type SetAttributesAsTextArgs struct {
	NodeID NodeID `json:"nodeId"`         // Id of the element to set attributes for.
	Text   string `json:"text"`           // Text with a number of attributes. Will parse this text using HTML parser.
	Name   string `json:"name,omitempty"` // Attribute name to replace with new attributes derived from text in case text parsed successfully.
}

// Unmarshal the byte array into a return value for SetAttributesAsText in the DOM domain.
func (a *SetAttributesAsTextArgs) UnmarshalJSON(b []byte) error {
	type Copy SetAttributesAsTextArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetAttributesAsTextArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetAttributesAsText in the DOM domain.
func (a *SetAttributesAsTextArgs) MarshalJSON() ([]byte, error) {
	type Copy SetAttributesAsTextArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetAttributesAsTextReply represents the return values for SetAttributesAsText in the DOM domain.
type SetAttributesAsTextReply struct {
}

// Unmarshal the byte array into a return value for SetAttributesAsText in the DOM domain.
func (a *SetAttributesAsTextReply) UnmarshalJSON(b []byte) error {
	type Copy SetAttributesAsTextReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetAttributesAsTextReply(*c)
	return nil
}

const CommandDOMSetFileInputFiles = "DOM.setFileInputFiles"

// SetFileInputFilesArgs represents the arguments for SetFileInputFiles in the DOM domain.
type SetFileInputFilesArgs struct {
	Files         []string              `json:"files"`                   // Array of file paths to set.
	NodeID        NodeID                `json:"nodeId,omitempty"`        // Identifier of the node.
	BackendNodeID BackendNodeID         `json:"backendNodeId,omitempty"` // Identifier of the backend node.
	ObjectID      shared.RemoteObjectID `json:"objectId,omitempty"`      // JavaScript object id of the node wrapper.
}

// Unmarshal the byte array into a return value for SetFileInputFiles in the DOM domain.
func (a *SetFileInputFilesArgs) UnmarshalJSON(b []byte) error {
	type Copy SetFileInputFilesArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetFileInputFilesArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetFileInputFiles in the DOM domain.
func (a *SetFileInputFilesArgs) MarshalJSON() ([]byte, error) {
	type Copy SetFileInputFilesArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetFileInputFilesReply represents the return values for SetFileInputFiles in the DOM domain.
type SetFileInputFilesReply struct {
}

// Unmarshal the byte array into a return value for SetFileInputFiles in the DOM domain.
func (a *SetFileInputFilesReply) UnmarshalJSON(b []byte) error {
	type Copy SetFileInputFilesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetFileInputFilesReply(*c)
	return nil
}

const CommandDOMSetInspectedNode = "DOM.setInspectedNode"

// SetInspectedNodeArgs represents the arguments for SetInspectedNode in the DOM domain.
type SetInspectedNodeArgs struct {
	NodeID NodeID `json:"nodeId"` // DOM node id to be accessible by means of $x command line API.
}

// Unmarshal the byte array into a return value for SetInspectedNode in the DOM domain.
func (a *SetInspectedNodeArgs) UnmarshalJSON(b []byte) error {
	type Copy SetInspectedNodeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetInspectedNodeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetInspectedNode in the DOM domain.
func (a *SetInspectedNodeArgs) MarshalJSON() ([]byte, error) {
	type Copy SetInspectedNodeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetInspectedNodeReply represents the return values for SetInspectedNode in the DOM domain.
type SetInspectedNodeReply struct {
}

// Unmarshal the byte array into a return value for SetInspectedNode in the DOM domain.
func (a *SetInspectedNodeReply) UnmarshalJSON(b []byte) error {
	type Copy SetInspectedNodeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetInspectedNodeReply(*c)
	return nil
}

const CommandDOMSetNodeName = "DOM.setNodeName"

// SetNodeNameArgs represents the arguments for SetNodeName in the DOM domain.
type SetNodeNameArgs struct {
	NodeID NodeID `json:"nodeId"` // Id of the node to set name for.
	Name   string `json:"name"`   // New node's name.
}

// Unmarshal the byte array into a return value for SetNodeName in the DOM domain.
func (a *SetNodeNameArgs) UnmarshalJSON(b []byte) error {
	type Copy SetNodeNameArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetNodeNameArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetNodeName in the DOM domain.
func (a *SetNodeNameArgs) MarshalJSON() ([]byte, error) {
	type Copy SetNodeNameArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetNodeNameReply represents the return values for SetNodeName in the DOM domain.
type SetNodeNameReply struct {
	NodeID NodeID `json:"nodeId"` // New node's id.
}

// Unmarshal the byte array into a return value for SetNodeName in the DOM domain.
func (a *SetNodeNameReply) UnmarshalJSON(b []byte) error {
	type Copy SetNodeNameReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetNodeNameReply(*c)
	return nil
}

const CommandDOMSetNodeValue = "DOM.setNodeValue"

// SetNodeValueArgs represents the arguments for SetNodeValue in the DOM domain.
type SetNodeValueArgs struct {
	NodeID NodeID `json:"nodeId"` // Id of the node to set value for.
	Value  string `json:"value"`  // New node's value.
}

// Unmarshal the byte array into a return value for SetNodeValue in the DOM domain.
func (a *SetNodeValueArgs) UnmarshalJSON(b []byte) error {
	type Copy SetNodeValueArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetNodeValueArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetNodeValue in the DOM domain.
func (a *SetNodeValueArgs) MarshalJSON() ([]byte, error) {
	type Copy SetNodeValueArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetNodeValueReply represents the return values for SetNodeValue in the DOM domain.
type SetNodeValueReply struct {
}

// Unmarshal the byte array into a return value for SetNodeValue in the DOM domain.
func (a *SetNodeValueReply) UnmarshalJSON(b []byte) error {
	type Copy SetNodeValueReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetNodeValueReply(*c)
	return nil
}

const CommandDOMSetOuterHTML = "DOM.setOuterHTML"

// SetOuterHTMLArgs represents the arguments for SetOuterHTML in the DOM domain.
type SetOuterHTMLArgs struct {
	NodeID    NodeID `json:"nodeId"`    // Id of the node to set markup for.
	OuterHTML string `json:"outerHTML"` // Outer HTML markup to set.
}

// Unmarshal the byte array into a return value for SetOuterHTML in the DOM domain.
func (a *SetOuterHTMLArgs) UnmarshalJSON(b []byte) error {
	type Copy SetOuterHTMLArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetOuterHTMLArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetOuterHTML in the DOM domain.
func (a *SetOuterHTMLArgs) MarshalJSON() ([]byte, error) {
	type Copy SetOuterHTMLArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetOuterHTMLReply represents the return values for SetOuterHTML in the DOM domain.
type SetOuterHTMLReply struct {
}

// Unmarshal the byte array into a return value for SetOuterHTML in the DOM domain.
func (a *SetOuterHTMLReply) UnmarshalJSON(b []byte) error {
	type Copy SetOuterHTMLReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetOuterHTMLReply(*c)
	return nil
}

const CommandDOMUndo = "DOM.undo"

// UndoArgs represents the arguments for Undo in the DOM domain.
type UndoArgs struct {
}

// Unmarshal the byte array into a return value for Undo in the DOM domain.
func (a *UndoArgs) UnmarshalJSON(b []byte) error {
	type Copy UndoArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UndoArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Undo in the DOM domain.
func (a *UndoArgs) MarshalJSON() ([]byte, error) {
	type Copy UndoArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// UndoReply represents the return values for Undo in the DOM domain.
type UndoReply struct {
}

// Unmarshal the byte array into a return value for Undo in the DOM domain.
func (a *UndoReply) UnmarshalJSON(b []byte) error {
	type Copy UndoReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = UndoReply(*c)
	return nil
}

const CommandDOMGetFrameOwner = "DOM.getFrameOwner"

// GetFrameOwnerArgs represents the arguments for GetFrameOwner in the DOM domain.
type GetFrameOwnerArgs struct {
	FrameID shared.FrameID `json:"frameId"` // No description.
}

// Unmarshal the byte array into a return value for GetFrameOwner in the DOM domain.
func (a *GetFrameOwnerArgs) UnmarshalJSON(b []byte) error {
	type Copy GetFrameOwnerArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetFrameOwnerArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetFrameOwner in the DOM domain.
func (a *GetFrameOwnerArgs) MarshalJSON() ([]byte, error) {
	type Copy GetFrameOwnerArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetFrameOwnerReply represents the return values for GetFrameOwner in the DOM domain.
type GetFrameOwnerReply struct {
	NodeID NodeID `json:"nodeId"` // No description.
}

// Unmarshal the byte array into a return value for GetFrameOwner in the DOM domain.
func (a *GetFrameOwnerReply) UnmarshalJSON(b []byte) error {
	type Copy GetFrameOwnerReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetFrameOwnerReply(*c)
	return nil
}
