// Code generated by cdpgen. DO NOT EDIT.

package dom

import (
	"encoding/json"
)

const (
	EventDOMAttributeModified       = "DOM.attributeModified"
	EventDOMAttributeRemoved        = "DOM.attributeRemoved"
	EventDOMCharacterDataModified   = "DOM.characterDataModified"
	EventDOMChildNodeCountUpdated   = "DOM.childNodeCountUpdated"
	EventDOMChildNodeInserted       = "DOM.childNodeInserted"
	EventDOMChildNodeRemoved        = "DOM.childNodeRemoved"
	EventDOMDistributedNodesUpdated = "DOM.distributedNodesUpdated"
	EventDOMDocumentUpdated         = "DOM.documentUpdated"
	EventDOMInlineStyleInvalidated  = "DOM.inlineStyleInvalidated"
	EventDOMPseudoElementAdded      = "DOM.pseudoElementAdded"
	EventDOMPseudoElementRemoved    = "DOM.pseudoElementRemoved"
	EventDOMSetChildNodes           = "DOM.setChildNodes"
	EventDOMShadowRootPopped        = "DOM.shadowRootPopped"
	EventDOMShadowRootPushed        = "DOM.shadowRootPushed"
)

var EventConstants = map[string]json.Unmarshaler{
	EventDOMAttributeModified:       &AttributeModifiedReply{},
	EventDOMAttributeRemoved:        &AttributeRemovedReply{},
	EventDOMCharacterDataModified:   &CharacterDataModifiedReply{},
	EventDOMChildNodeCountUpdated:   &ChildNodeCountUpdatedReply{},
	EventDOMChildNodeInserted:       &ChildNodeInsertedReply{},
	EventDOMChildNodeRemoved:        &ChildNodeRemovedReply{},
	EventDOMDistributedNodesUpdated: &DistributedNodesUpdatedReply{},
	EventDOMDocumentUpdated:         &DocumentUpdatedReply{},
	EventDOMInlineStyleInvalidated:  &InlineStyleInvalidatedReply{},
	EventDOMPseudoElementAdded:      &PseudoElementAddedReply{},
	EventDOMPseudoElementRemoved:    &PseudoElementRemovedReply{},
	EventDOMSetChildNodes:           &SetChildNodesReply{},
	EventDOMShadowRootPopped:        &ShadowRootPoppedReply{},
	EventDOMShadowRootPushed:        &ShadowRootPushedReply{},
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	return e, ok
}

// AttributeModifiedReply is the reply for AttributeModified events.
type AttributeModifiedReply struct {
	NodeID NodeID `json:"nodeId"` // Id of the node that has changed.
	Name   string `json:"name"`   // Attribute name.
	Value  string `json:"value"`  // Attribute value.
}

// Unmarshal the byte array into a return value for AttributeModified in the DOM domain.
func (a *AttributeModifiedReply) UnmarshalJSON(b []byte) error {
	type Copy AttributeModifiedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AttributeModifiedReply(*c)
	return nil
}

// AttributeRemovedReply is the reply for AttributeRemoved events.
type AttributeRemovedReply struct {
	NodeID NodeID `json:"nodeId"` // Id of the node that has changed.
	Name   string `json:"name"`   // A ttribute name.
}

// Unmarshal the byte array into a return value for AttributeRemoved in the DOM domain.
func (a *AttributeRemovedReply) UnmarshalJSON(b []byte) error {
	type Copy AttributeRemovedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AttributeRemovedReply(*c)
	return nil
}

// CharacterDataModifiedReply is the reply for CharacterDataModified events.
type CharacterDataModifiedReply struct {
	NodeID        NodeID `json:"nodeId"`        // Id of the node that has changed.
	CharacterData string `json:"characterData"` // New text value.
}

// Unmarshal the byte array into a return value for CharacterDataModified in the DOM domain.
func (a *CharacterDataModifiedReply) UnmarshalJSON(b []byte) error {
	type Copy CharacterDataModifiedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = CharacterDataModifiedReply(*c)
	return nil
}

// ChildNodeCountUpdatedReply is the reply for ChildNodeCountUpdated events.
type ChildNodeCountUpdatedReply struct {
	NodeID         NodeID `json:"nodeId"`         // Id of the node that has changed.
	ChildNodeCount int    `json:"childNodeCount"` // New node count.
}

// Unmarshal the byte array into a return value for ChildNodeCountUpdated in the DOM domain.
func (a *ChildNodeCountUpdatedReply) UnmarshalJSON(b []byte) error {
	type Copy ChildNodeCountUpdatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ChildNodeCountUpdatedReply(*c)
	return nil
}

// ChildNodeInsertedReply is the reply for ChildNodeInserted events.
type ChildNodeInsertedReply struct {
	ParentNodeID   NodeID `json:"parentNodeId"`   // Id of the node that has changed.
	PreviousNodeID NodeID `json:"previousNodeId"` // If of the previous siblint.
	Node           Node   `json:"node"`           // Inserted node data.
}

// Unmarshal the byte array into a return value for ChildNodeInserted in the DOM domain.
func (a *ChildNodeInsertedReply) UnmarshalJSON(b []byte) error {
	type Copy ChildNodeInsertedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ChildNodeInsertedReply(*c)
	return nil
}

// ChildNodeRemovedReply is the reply for ChildNodeRemoved events.
type ChildNodeRemovedReply struct {
	ParentNodeID NodeID `json:"parentNodeId"` // Parent id.
	NodeID       NodeID `json:"nodeId"`       // Id of the node that has been removed.
}

// Unmarshal the byte array into a return value for ChildNodeRemoved in the DOM domain.
func (a *ChildNodeRemovedReply) UnmarshalJSON(b []byte) error {
	type Copy ChildNodeRemovedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ChildNodeRemovedReply(*c)
	return nil
}

// DistributedNodesUpdatedReply is the reply for DistributedNodesUpdated events.
type DistributedNodesUpdatedReply struct {
	InsertionPointID NodeID        `json:"insertionPointId"` // Insertion point where distributed nodes were updated.
	DistributedNodes []BackendNode `json:"distributedNodes"` // Distributed nodes for given insertion point.
}

// Unmarshal the byte array into a return value for DistributedNodesUpdated in the DOM domain.
func (a *DistributedNodesUpdatedReply) UnmarshalJSON(b []byte) error {
	type Copy DistributedNodesUpdatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DistributedNodesUpdatedReply(*c)
	return nil
}

// DocumentUpdatedReply is the reply for DocumentUpdated events.
type DocumentUpdatedReply struct {
}

// Unmarshal the byte array into a return value for DocumentUpdated in the DOM domain.
func (a *DocumentUpdatedReply) UnmarshalJSON(b []byte) error {
	type Copy DocumentUpdatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DocumentUpdatedReply(*c)
	return nil
}

// InlineStyleInvalidatedReply is the reply for InlineStyleInvalidated events.
type InlineStyleInvalidatedReply struct {
	NodeIDs []NodeID `json:"nodeIds"` // Ids of the nodes for which the inline styles have been invalidated.
}

// Unmarshal the byte array into a return value for InlineStyleInvalidated in the DOM domain.
func (a *InlineStyleInvalidatedReply) UnmarshalJSON(b []byte) error {
	type Copy InlineStyleInvalidatedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = InlineStyleInvalidatedReply(*c)
	return nil
}

// PseudoElementAddedReply is the reply for PseudoElementAdded events.
type PseudoElementAddedReply struct {
	ParentID      NodeID `json:"parentId"`      // Pseudo element's parent element id.
	PseudoElement Node   `json:"pseudoElement"` // The added pseudo element.
}

// Unmarshal the byte array into a return value for PseudoElementAdded in the DOM domain.
func (a *PseudoElementAddedReply) UnmarshalJSON(b []byte) error {
	type Copy PseudoElementAddedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PseudoElementAddedReply(*c)
	return nil
}

// PseudoElementRemovedReply is the reply for PseudoElementRemoved events.
type PseudoElementRemovedReply struct {
	ParentID        NodeID `json:"parentId"`        // Pseudo element's parent element id.
	PseudoElementID NodeID `json:"pseudoElementId"` // The removed pseudo element id.
}

// Unmarshal the byte array into a return value for PseudoElementRemoved in the DOM domain.
func (a *PseudoElementRemovedReply) UnmarshalJSON(b []byte) error {
	type Copy PseudoElementRemovedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = PseudoElementRemovedReply(*c)
	return nil
}

// SetChildNodesReply is the reply for SetChildNodes events.
type SetChildNodesReply struct {
	ParentID NodeID `json:"parentId"` // Parent node id to populate with children.
	Nodes    []Node `json:"nodes"`    // Child nodes array.
}

// Unmarshal the byte array into a return value for SetChildNodes in the DOM domain.
func (a *SetChildNodesReply) UnmarshalJSON(b []byte) error {
	type Copy SetChildNodesReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetChildNodesReply(*c)
	return nil
}

// ShadowRootPoppedReply is the reply for ShadowRootPopped events.
type ShadowRootPoppedReply struct {
	HostID NodeID `json:"hostId"` // Host element id.
	RootID NodeID `json:"rootId"` // Shadow root id.
}

// Unmarshal the byte array into a return value for ShadowRootPopped in the DOM domain.
func (a *ShadowRootPoppedReply) UnmarshalJSON(b []byte) error {
	type Copy ShadowRootPoppedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ShadowRootPoppedReply(*c)
	return nil
}

// ShadowRootPushedReply is the reply for ShadowRootPushed events.
type ShadowRootPushedReply struct {
	HostID NodeID `json:"hostId"` // Host element id.
	Root   Node   `json:"root"`   // Shadow root.
}

// Unmarshal the byte array into a return value for ShadowRootPushed in the DOM domain.
func (a *ShadowRootPushedReply) UnmarshalJSON(b []byte) error {
	type Copy ShadowRootPushedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ShadowRootPushedReply(*c)
	return nil
}
