// Code generated by cdpgen. DO NOT EDIT.

package animation

import (
	"encoding/json"

	"github.com/4ydx/cdp/protocol/runtime"
)

const CommandAnimationDisable = "Animation.disable"

// DisableArgs represents the arguments for Disable in the Animation domain.
type DisableArgs struct {
}

// Unmarshal the byte array into a return value for Disable in the Animation domain.
func (a *DisableArgs) UnmarshalJSON(b []byte) error {
	type Copy DisableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Disable in the Animation domain.
func (a *DisableArgs) MarshalJSON() ([]byte, error) {
	type Copy DisableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// DisableReply represents the return values for Disable in the Animation domain.
type DisableReply struct {
}

// Unmarshal the byte array into a return value for Disable in the Animation domain.
func (a *DisableReply) UnmarshalJSON(b []byte) error {
	type Copy DisableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = DisableReply(*c)
	return nil
}

const CommandAnimationEnable = "Animation.enable"

// EnableArgs represents the arguments for Enable in the Animation domain.
type EnableArgs struct {
}

// Unmarshal the byte array into a return value for Enable in the Animation domain.
func (a *EnableArgs) UnmarshalJSON(b []byte) error {
	type Copy EnableArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableArgs(*c)
	return nil
}

// Marshall the byte array into a return value for Enable in the Animation domain.
func (a *EnableArgs) MarshalJSON() ([]byte, error) {
	type Copy EnableArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// EnableReply represents the return values for Enable in the Animation domain.
type EnableReply struct {
}

// Unmarshal the byte array into a return value for Enable in the Animation domain.
func (a *EnableReply) UnmarshalJSON(b []byte) error {
	type Copy EnableReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = EnableReply(*c)
	return nil
}

const CommandAnimationGetCurrentTime = "Animation.getCurrentTime"

// GetCurrentTimeArgs represents the arguments for GetCurrentTime in the Animation domain.
type GetCurrentTimeArgs struct {
	ID string `json:"id"` // Id of animation.
}

// Unmarshal the byte array into a return value for GetCurrentTime in the Animation domain.
func (a *GetCurrentTimeArgs) UnmarshalJSON(b []byte) error {
	type Copy GetCurrentTimeArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetCurrentTimeArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetCurrentTime in the Animation domain.
func (a *GetCurrentTimeArgs) MarshalJSON() ([]byte, error) {
	type Copy GetCurrentTimeArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetCurrentTimeReply represents the return values for GetCurrentTime in the Animation domain.
type GetCurrentTimeReply struct {
	CurrentTime float64 `json:"currentTime"` // Current time of the page.
}

// Unmarshal the byte array into a return value for GetCurrentTime in the Animation domain.
func (a *GetCurrentTimeReply) UnmarshalJSON(b []byte) error {
	type Copy GetCurrentTimeReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetCurrentTimeReply(*c)
	return nil
}

const CommandAnimationGetPlaybackRate = "Animation.getPlaybackRate"

// GetPlaybackRateArgs represents the arguments for GetPlaybackRate in the Animation domain.
type GetPlaybackRateArgs struct {
}

// Unmarshal the byte array into a return value for GetPlaybackRate in the Animation domain.
func (a *GetPlaybackRateArgs) UnmarshalJSON(b []byte) error {
	type Copy GetPlaybackRateArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetPlaybackRateArgs(*c)
	return nil
}

// Marshall the byte array into a return value for GetPlaybackRate in the Animation domain.
func (a *GetPlaybackRateArgs) MarshalJSON() ([]byte, error) {
	type Copy GetPlaybackRateArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// GetPlaybackRateReply represents the return values for GetPlaybackRate in the Animation domain.
type GetPlaybackRateReply struct {
	PlaybackRate float64 `json:"playbackRate"` // Playback rate for animations on page.
}

// Unmarshal the byte array into a return value for GetPlaybackRate in the Animation domain.
func (a *GetPlaybackRateReply) UnmarshalJSON(b []byte) error {
	type Copy GetPlaybackRateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = GetPlaybackRateReply(*c)
	return nil
}

const CommandAnimationReleaseAnimations = "Animation.releaseAnimations"

// ReleaseAnimationsArgs represents the arguments for ReleaseAnimations in the Animation domain.
type ReleaseAnimationsArgs struct {
	Animations []string `json:"animations"` // List of animation ids to seek.
}

// Unmarshal the byte array into a return value for ReleaseAnimations in the Animation domain.
func (a *ReleaseAnimationsArgs) UnmarshalJSON(b []byte) error {
	type Copy ReleaseAnimationsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReleaseAnimationsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ReleaseAnimations in the Animation domain.
func (a *ReleaseAnimationsArgs) MarshalJSON() ([]byte, error) {
	type Copy ReleaseAnimationsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ReleaseAnimationsReply represents the return values for ReleaseAnimations in the Animation domain.
type ReleaseAnimationsReply struct {
}

// Unmarshal the byte array into a return value for ReleaseAnimations in the Animation domain.
func (a *ReleaseAnimationsReply) UnmarshalJSON(b []byte) error {
	type Copy ReleaseAnimationsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ReleaseAnimationsReply(*c)
	return nil
}

const CommandAnimationResolveAnimation = "Animation.resolveAnimation"

// ResolveAnimationArgs represents the arguments for ResolveAnimation in the Animation domain.
type ResolveAnimationArgs struct {
	AnimationID string `json:"animationId"` // Animation id.
}

// Unmarshal the byte array into a return value for ResolveAnimation in the Animation domain.
func (a *ResolveAnimationArgs) UnmarshalJSON(b []byte) error {
	type Copy ResolveAnimationArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResolveAnimationArgs(*c)
	return nil
}

// Marshall the byte array into a return value for ResolveAnimation in the Animation domain.
func (a *ResolveAnimationArgs) MarshalJSON() ([]byte, error) {
	type Copy ResolveAnimationArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// ResolveAnimationReply represents the return values for ResolveAnimation in the Animation domain.
type ResolveAnimationReply struct {
	RemoteObject runtime.RemoteObject `json:"remoteObject"` // Corresponding remote object.
}

// Unmarshal the byte array into a return value for ResolveAnimation in the Animation domain.
func (a *ResolveAnimationReply) UnmarshalJSON(b []byte) error {
	type Copy ResolveAnimationReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = ResolveAnimationReply(*c)
	return nil
}

const CommandAnimationSeekAnimations = "Animation.seekAnimations"

// SeekAnimationsArgs represents the arguments for SeekAnimations in the Animation domain.
type SeekAnimationsArgs struct {
	Animations  []string `json:"animations"`  // List of animation ids to seek.
	CurrentTime float64  `json:"currentTime"` // Set the current time of each animation.
}

// Unmarshal the byte array into a return value for SeekAnimations in the Animation domain.
func (a *SeekAnimationsArgs) UnmarshalJSON(b []byte) error {
	type Copy SeekAnimationsArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SeekAnimationsArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SeekAnimations in the Animation domain.
func (a *SeekAnimationsArgs) MarshalJSON() ([]byte, error) {
	type Copy SeekAnimationsArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SeekAnimationsReply represents the return values for SeekAnimations in the Animation domain.
type SeekAnimationsReply struct {
}

// Unmarshal the byte array into a return value for SeekAnimations in the Animation domain.
func (a *SeekAnimationsReply) UnmarshalJSON(b []byte) error {
	type Copy SeekAnimationsReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SeekAnimationsReply(*c)
	return nil
}

const CommandAnimationSetPaused = "Animation.setPaused"

// SetPausedArgs represents the arguments for SetPaused in the Animation domain.
type SetPausedArgs struct {
	Animations []string `json:"animations"` // Animations to set the pause state of.
	Paused     bool     `json:"paused"`     // Paused state to set to.
}

// Unmarshal the byte array into a return value for SetPaused in the Animation domain.
func (a *SetPausedArgs) UnmarshalJSON(b []byte) error {
	type Copy SetPausedArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetPausedArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetPaused in the Animation domain.
func (a *SetPausedArgs) MarshalJSON() ([]byte, error) {
	type Copy SetPausedArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetPausedReply represents the return values for SetPaused in the Animation domain.
type SetPausedReply struct {
}

// Unmarshal the byte array into a return value for SetPaused in the Animation domain.
func (a *SetPausedReply) UnmarshalJSON(b []byte) error {
	type Copy SetPausedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetPausedReply(*c)
	return nil
}

const CommandAnimationSetPlaybackRate = "Animation.setPlaybackRate"

// SetPlaybackRateArgs represents the arguments for SetPlaybackRate in the Animation domain.
type SetPlaybackRateArgs struct {
	PlaybackRate float64 `json:"playbackRate"` // Playback rate for animations on page
}

// Unmarshal the byte array into a return value for SetPlaybackRate in the Animation domain.
func (a *SetPlaybackRateArgs) UnmarshalJSON(b []byte) error {
	type Copy SetPlaybackRateArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetPlaybackRateArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetPlaybackRate in the Animation domain.
func (a *SetPlaybackRateArgs) MarshalJSON() ([]byte, error) {
	type Copy SetPlaybackRateArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetPlaybackRateReply represents the return values for SetPlaybackRate in the Animation domain.
type SetPlaybackRateReply struct {
}

// Unmarshal the byte array into a return value for SetPlaybackRate in the Animation domain.
func (a *SetPlaybackRateReply) UnmarshalJSON(b []byte) error {
	type Copy SetPlaybackRateReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetPlaybackRateReply(*c)
	return nil
}

const CommandAnimationSetTiming = "Animation.setTiming"

// SetTimingArgs represents the arguments for SetTiming in the Animation domain.
type SetTimingArgs struct {
	AnimationID string  `json:"animationId"` // Animation id.
	Duration    float64 `json:"duration"`    // Duration of the animation.
	Delay       float64 `json:"delay"`       // Delay of the animation.
}

// Unmarshal the byte array into a return value for SetTiming in the Animation domain.
func (a *SetTimingArgs) UnmarshalJSON(b []byte) error {
	type Copy SetTimingArgs
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetTimingArgs(*c)
	return nil
}

// Marshall the byte array into a return value for SetTiming in the Animation domain.
func (a *SetTimingArgs) MarshalJSON() ([]byte, error) {
	type Copy SetTimingArgs
	c := &Copy{}
	*c = Copy(*a)
	return json.Marshal(&c)
}

// SetTimingReply represents the return values for SetTiming in the Animation domain.
type SetTimingReply struct {
}

// Unmarshal the byte array into a return value for SetTiming in the Animation domain.
func (a *SetTimingReply) UnmarshalJSON(b []byte) error {
	type Copy SetTimingReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = SetTimingReply(*c)
	return nil
}
