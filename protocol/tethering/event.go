// Code generated by cdpgen. DO NOT EDIT.

package tethering

import (
	"encoding/json"
	"log"
)

const (
	EventTetheringAccepted = "Tethering.accepted"
)

type Unmarshaler func() json.Unmarshaler

var EventConstants = map[string]Unmarshaler{
	EventTetheringAccepted: func() json.Unmarshaler { return &AcceptedReply{} },
}

func GetEventReply(event string) (json.Unmarshaler, bool) {
	e, ok := EventConstants[event]
	if ok {
		return e(), ok
	}
	return nil, ok
}

// AcceptedReply is the reply for Accepted events.
type AcceptedReply struct {
	Port         int    `json:"port"`         // Port number that was successfully bound.
	ConnectionID string `json:"connectionId"` // Connection id to be used.
}

// Unmarshal the byte array into a return value for Accepted in the Tethering domain.
func (a *AcceptedReply) UnmarshalJSON(b []byte) error {
	type Copy AcceptedReply
	c := &Copy{}
	err := json.Unmarshal(b, c)
	if err != nil {
		return err
	}
	*a = AcceptedReply(*c)
	return nil
}

// AcceptedReply returns whether or not the FrameID matches the reply value for Accepted in the Accepted domain.
func (a *AcceptedReply) MatchFrameID(frameID string, m []byte) bool {
	err := a.UnmarshalJSON(m)
	if err != nil {
		log.Fatalf("unmarshal error: AcceptedReply %s", err)
	}
	return true
}

// AcceptedReply returns the FrameID for Accepted in the Accepted domain.
func (a *AcceptedReply) GetFrameID() string {
	return ""
}
